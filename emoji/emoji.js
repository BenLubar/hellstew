"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, M, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	M = $pkg.M = $newType(4, $kindMap, "js.M", true, "github.com/gopherjs/gopherjs/js", true, null);
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var $ptr, fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "", exported: true, typ: ptrType, tag: ""}]);
	M.init($String, $emptyInterface);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$3, init, GOROOT, Goexit, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$3 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	GOROOT = function() {
		var $ptr, goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/home/ben/.golang-bootstrap/go-1.7";
	};
	$pkg.GOROOT = GOROOT;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$3.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$5, sliceType$3, ptrType$6, ptrType$7, funcType, ptrType$13, funcType$1, ptrType$14, arrayType$1, semWaiters, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$1.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($Int32);
	ptrType$5 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(rlocker);
	ptrType$7 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$13 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$14 = $ptrType(Once);
	arrayType$1 = $arrayType($Uint8, 128);
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var $ptr, size;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire(m);
			}
			$s = -1; return;
			return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire(m);
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			race.Release(m);
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				$s = -1; return;
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	init$1 = function() {
		var $ptr, n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.ReleaseMerge((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$3(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Acquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Release((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Release((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$3(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$6);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$7).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$7).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$5], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$5], false)}];
	ptrType$13.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$7.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$6.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", exported: false, typ: sliceType$3, tag: ""}, {prop: "New", name: "New", exported: true, typ: funcType, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Uint32, tag: ""}]);
	poolLocal.init("sync", [{prop: "private$0", name: "private", exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", exported: false, typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", exported: true, typ: Mutex, tag: ""}, {prop: "pad", name: "pad", exported: false, typ: arrayType$1, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, RuneScanner, stringWriter, sliceType, errWhence, errOffset, WriteString;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
	sliceType = $sliceType($Uint8);
	WriteString = function(w, s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
			return [n, err];
		/* } */ case 2:
		_r$1 = w.Write(new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, CaseRange, d, foldPair, arrayType, sliceType$3, sliceType$4, _CaseRanges, asciiFold, caseOrbit, to, To, ToUpper, ToLower, SimpleFold;
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var $ptr, _q, hi, l, lo, m, r;
		if ((r >> 0) < 128) {
			return (((r < 0 || r >= asciiFold.length) ? $throwRuntimeError("index out of range") : asciiFold[r]) >> 0);
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	CaseRange.init("", [{prop: "Lo", name: "Lo", exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(1042, 1074), new foldPair.ptr(1044, 1076), new foldPair.ptr(1054, 1086), new foldPair.ptr(1057, 1089), new foldPair.ptr(1058, 1090), new foldPair.ptr(1066, 1098), new foldPair.ptr(1074, 7296), new foldPair.ptr(1076, 7297), new foldPair.ptr(1086, 7298), new foldPair.ptr(1089, 7299), new foldPair.ptr(1090, 7300), new foldPair.ptr(1098, 7302), new foldPair.ptr(1122, 1123), new foldPair.ptr(1123, 7303), new foldPair.ptr(7296, 1042), new foldPair.ptr(7297, 1044), new foldPair.ptr(7298, 1054), new foldPair.ptr(7299, 1057), new foldPair.ptr(7300, 7301), new foldPair.ptr(7301, 1058), new foldPair.ptr(7302, 1066), new foldPair.ptr(7303, 1122), new foldPair.ptr(7304, 42570), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197), new foldPair.ptr(42570, 42571), new foldPair.ptr(42571, 7304)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? $throwRuntimeError("index out of range") : first[p0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((p0 & 31) >>> 0) >> 0) << 6 >> 0) | (((b1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((p0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((p0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((b2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? $throwRuntimeError("index out of range") : first[s0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((s.charCodeAt(0) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((s0 & 31) >>> 0) >> 0) << 6 >> 0) | (((s1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((s0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((s0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((s2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var $ptr, r;
		if (r < 0) {
			return false;
		} else if (55296 <= r && r <= 57343) {
			return false;
		} else if (r > 1114111) {
			return false;
		}
		return true;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint8, [240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 35, 3, 3, 52, 4, 4, 4, 68, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241]);
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBufferString, Count, Contains, Index, Replace;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", true, "bytes", false, null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, b, c, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off));
			n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBufferString = function(s) {
		var $ptr, s;
		return new Buffer.ptr(new sliceType($stringToBytes(s)), 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBufferString = NewBufferString;
	Count = function(s, sep) {
		var $ptr, c, count, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return utf8.RuneCount(s) + 1 >> 0;
		}
		if (n > s.$length) {
			return 0;
		}
		count = 0;
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if ((n === 1) || Equal($subslice(s, i, (i + n >> 0)), sep)) {
				count = count + (1) >> 0;
				i = i + (n) >> 0;
				continue;
			}
			i = i + (1) >> 0;
		}
		return count;
	};
	$pkg.Count = Count;
	Contains = function(b, subslice) {
		var $ptr, b, subslice;
		return !((Index(b, subslice) === -1));
	};
	$pkg.Contains = Contains;
	Index = function(s, sep) {
		var $ptr, c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		m = 0;
		if (!((n === 0))) {
			m = Count(s, old);
		}
		if (m === 0) {
			return $appendSlice(sliceType.nil, s);
		}
		if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.$length + ($imul(n, ((new$1.$length - old.$length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.$length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRune($subslice(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($subslice(s, start), old)) >> 0;
			}
			w = w + ($copySlice($subslice(t, w), $subslice(s, start, j))) >> 0;
			w = w + ($copySlice($subslice(t, w), new$1)) >> 0;
			start = j + old.$length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copySlice($subslice(t, w), $subslice(s, start))) >> 0;
		return $subslice(t, 0, w);
	};
	$pkg.Replace = Replace;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", exported: false, typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", exported: false, typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", exported: false, typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", exported: false, typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Writer, sliceType, ptrType$1, errNegativeRead, errNegativeWrite, NewWriterSize, NewWriter;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", true, "bufio", true, function(err_, buf_, n_, wr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.buf = sliceType.nil;
			this.n = 0;
			this.wr = $ifaceNil;
			return;
		}
		this.err = err_;
		this.buf = buf_;
		this.n = n_;
		this.wr = wr_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(Writer);
	NewWriterSize = function(w, size) {
		var $ptr, _tuple, b, ok, size, w;
		_tuple = $assertType(w, ptrType$1, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size <= 0) {
			size = 4096;
		}
		return new Writer.ptr($ifaceNil, $makeSlice(sliceType, size), 0, w);
	};
	$pkg.NewWriterSize = NewWriterSize;
	NewWriter = function(w) {
		var $ptr, w;
		return NewWriterSize(w, 4096);
	};
	$pkg.NewWriter = NewWriter;
	Writer.ptr.prototype.Reset = function(w) {
		var $ptr, b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.flush = function() {
		var $ptr, _r, _tuple, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
			return b.err;
		}
		if (b.n === 0) {
			$s = -1; return $ifaceNil;
			return $ifaceNil;
		}
		_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			$s = -1; return err;
			return err;
		}
		b.n = 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.ptr.prototype.Available = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = 0;
			/* */ if (b.Buffered() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.Buffered() === 0) { */ case 3:
				_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				$s = 5; continue;
			/* } else { */ case 4:
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				_r$1 = b.flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn;
			_tmp$1 = b.err;
			nn = _tmp;
			err = _tmp$1;
			$s = -1; return [nn, err];
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn;
		_tmp$3 = $ifaceNil;
		nn = _tmp$2;
		err = _tmp$3;
		$s = -1; return [nn, err];
		return [nn, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var $ptr, _r, _v, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return b.err;
			return b.err;
		}
		if (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }
		_r = b.flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return b.err;
			return b.err;
		/* } */ case 2:
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		size = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (r < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 128) { */ case 1:
			_r = b.WriteByte((r << 24 >>> 24)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				size = _tmp;
				err = _tmp$1;
				$s = -1; return [size, err];
				return [size, err];
			}
			_tmp$2 = 1;
			_tmp$3 = $ifaceNil;
			size = _tmp$2;
			err = _tmp$3;
			$s = -1; return [size, err];
			return [size, err];
		/* } */ case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = b.err;
			size = _tmp$4;
			err = _tmp$5;
			$s = -1; return [size, err];
			return [size, err];
		}
		n = b.Available();
		/* */ if (n < 4) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (n < 4) { */ case 4:
			_r$1 = b.flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0;
				_tmp$7 = b.err;
				size = _tmp$6;
				err = _tmp$7;
				$s = -1; return [size, err];
				return [size, err];
			}
			n = b.Available();
			/* */ if (n < 4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (n < 4) { */ case 7:
				_r$2 = b.WriteString($encodeRune(r)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				size = _tuple[0];
				err = _tuple[1];
				$s = -1; return [size, err];
				return [size, err];
			/* } */ case 8:
		/* } */ case 5:
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size;
		_tmp$9 = $ifaceNil;
		size = _tmp$8;
		err = _tmp$9;
		$s = -1; return [size, err];
		return [size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, b, n, n$1, nn, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		nn = 0;
		/* while (true) { */ case 1:
			/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = $substring(s, n);
			_r = b.flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return [nn, b.err];
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		$s = -1; return [nn, $ifaceNil];
		return [nn, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		/* */ if (b.Buffered() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.Buffered() === 0) { */ case 1:
			_tuple = $assertType(b.wr, io.ReaderFrom, true);
			w = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				n = _tuple$1[0];
				err = _tuple$1[1];
				$s = -1; return [n, err];
				return [n, err];
			/* } */ case 4:
		/* } */ case 2:
		m = 0;
		/* while (true) { */ case 6:
			/* */ if (b.Available() === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (b.Available() === 0) { */ case 8:
				_r$1 = b.flush(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err1 = _r$1;
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
					return [n, err];
				}
			/* } */ case 9:
			nr = 0;
			/* while (true) { */ case 11:
				/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 12; continue; }
				_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				m = _tuple$2[0];
				err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 12; continue;
				}
				nr = nr + (1) >> 0;
			/* } */ $s = 11; continue; case 12:
			if (nr === 100) {
				_tmp$2 = n;
				_tmp$3 = io.ErrNoProgress;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 7; continue;
			}
		/* } */ $s = 6; continue; case 7:
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 14:
			/* */ if (b.Available() === 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (b.Available() === 0) { */ case 16:
				_r$3 = b.flush(); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 18; continue;
			/* } else { */ case 17:
				err = $ifaceNil;
			/* } */ case 18:
		/* } */ case 15:
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flush", name: "flush", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	Writer.init("bufio", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType, tag: ""}, {prop: "n", name: "n", exported: false, typ: $Int, tag: ""}, {prop: "wr", name: "wr", exported: false, typ: io.Writer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, buf, pow10tab, init, Float32bits, Float64bits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", exported: false, typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, js, race, runtime, sync, mmapper, Errno, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType$2, arrayType$5, arrayType$13, arrayType$14, structType, ptrType$22, ptrType$25, mapType, funcType, funcType$1, ptrType$29, arrayType$18, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors, init, printWarning, printToConsole, use, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, msanRead, msanWrite, itoa, uitoa, clen, ReadDirent, ParseDirent, errnoErr, Read, Write, Close, Fchdir, Fchmod, Fsync, Getdents, read, write, munmap, Fchown, Fstat, Ftruncate, Lstat, Pread, Pwrite, Seek, mmap;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Uint64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Nlink = new $Uint64(0, 0);
			this.Mode = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.X__pad0 = 0;
			this.Rdev = new $Uint64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.X__unused = arrayType$18.zero();
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Mode = Mode_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.X__pad0 = X__pad0_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.X__unused = X__unused_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", true, "syscall", true, function(Ino_, Off_, Reclen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Off = new $Int64(0, 0);
			this.Reclen = 0;
			this.Type = 0;
			this.Name = arrayType$13.zero();
			this.Pad_cgo_0 = arrayType$14.zero();
			return;
		}
		this.Ino = Ino_;
		this.Off = Off_;
		this.Reclen = Reclen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$5 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType($Int8, 256);
	arrayType$14 = $arrayType($Uint8, 5);
	structType = $structType("syscall", [{prop: "addr", name: "addr", exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", exported: false, typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType($Int64);
	ptrType$25 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$29 = $ptrType(Timespec);
	arrayType$18 = $arrayType($Int64, 3);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	indexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 60) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = $substring(s, 0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			$s = -1; return [value, found];
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			$s = -1; return [value, found];
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = $substring(s, (i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				$s = -1; return [value, found];
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		$s = -1; return [value, found];
		return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$5.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	clen = function(n) {
		var $ptr, i, n;
		i = 0;
		while (true) {
			if (!(i < n.$length)) { break; }
			if (((i < 0 || i >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + i]) === 0) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return n.$length;
	};
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		_tuple = Getdents(fd, buf);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(new $Uint64(0, 0), new $Int64(0, 0), 0, 0, arrayType$13.zero(), arrayType$14.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Off = new $Int64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Type = _view.getUint8(18, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 19, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 275, _array.buffer.byteLength)), _struct);
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes), 0, clen(new sliceType(bytes))));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0;
		_tmp$1 = count;
		_tmp$2 = names;
		consumed = _tmp;
		count = _tmp$1;
		newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
			return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 133) {
			s = ((e < 0 || e >= errors.length) ? $throwRuntimeError("index out of range") : errors[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 104) || (e === 103) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange($sliceToArray(p), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
			}
		}
		if (false && n > 0) {
			msanWrite($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange($sliceToArray(p), n);
		}
		if (false && n > 0) {
			msanRead($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(3, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(81, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(91, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(74, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Getdents = function(fd, buf) {
		var $ptr, _p0, _tuple, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(217, (fd >>> 0), _p0, (buf.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdents = Getdents;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(0, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(1, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(11, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(93, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(5, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(77, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(6, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(17, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(18, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, off, offset, r0, whence;
		off = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(8, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		off = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [off, err];
	};
	$pkg.Seek = Seek;
	mmap = function(addr, length, prot, flags, fd, offset) {
		var $ptr, _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;
		xaddr = 0;
		err = $ifaceNil;
		_tuple = Syscall6(9, addr, length, (prot >>> 0), (flags >>> 0), (fd >>> 0), (offset.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		xaddr = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [xaddr, err];
	};
	ptrType$25.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init("syscall", [{prop: "Mutex", name: "", exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", exported: false, typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", exported: false, typ: funcType$1, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", exported: true, typ: $Uint64, tag: ""}, {prop: "Ino", name: "Ino", exported: true, typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", exported: true, typ: $Uint32, tag: ""}, {prop: "X__pad0", name: "X__pad0", exported: true, typ: $Int32, tag: ""}, {prop: "Rdev", name: "Rdev", exported: true, typ: $Uint64, tag: ""}, {prop: "Size", name: "Size", exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", exported: true, typ: $Int64, tag: ""}, {prop: "Atim", name: "Atim", exported: true, typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", exported: true, typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", exported: true, typ: Timespec, tag: ""}, {prop: "X__unused", name: "X__unused", exported: true, typ: arrayType$18, tag: ""}]);
	Dirent.init("", [{prop: "Ino", name: "Ino", exported: true, typ: $Uint64, tag: ""}, {prop: "Off", name: "Off", exported: true, typ: $Int64, tag: ""}, {prop: "Reclen", name: "Reclen", exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", exported: true, typ: arrayType$13, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", exported: true, typ: arrayType$14, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Once, funcType, ptrType$3;
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, arrayType$4, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, zoneDirs, _tuple, _r, init, initLocal, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		Unix(new $Int64(0, 0), new $Int64(0, 0));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	indexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = t.AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		$s = -1; return $bytesToString(b);
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, (month >> 0), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, (month >> 0), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), $substring(s, 1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _1, _2, _3, _4, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_1 === (258)) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_1 === (257)) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_1 === (261)) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day > daysIn((month >> 0), year)) {
			$s = -1; return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
			return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [_r$1, $ifaceNil];
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				$s = -1; return [t, $ifaceNil];
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			$s = -1; return [t, $ifaceNil];
			return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				$s = -1; return [t$1, $ifaceNil];
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			$s = -1; return [t$1, $ifaceNil];
			return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return [_r$6, $ifaceNil];
		return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt($substring(value, 1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi($substring(value, 1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		$s = -1; return [name, offset, abs];
		return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		$s = -1; return [year, month, day];
		return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		$s = -1; return year;
		return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		$s = -1; return month;
		return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		$s = -1; return day;
		return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		$s = -1; return [hour, min, sec];
		return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		$s = -1; return yday + 1 >> 0;
		return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		$s = -1; return [year, month, day, yday];
		return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((((m < 0 || m >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x])) >> 0) >> 0);
	};
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		$s = -1; return [name, offset];
		return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		$s = -1; return [enc, $ifaceNil];
		return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return [_r$2, $ifaceNil];
		return [_r$2, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$3 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$8 = _r$3;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		$s = -1; return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			$s = -1; return utcLoc;
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1.name;
		return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "sec", name: "sec", exported: false, typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", exported: false, typ: $Int32, tag: ""}, {prop: "loc", name: "loc", exported: false, typ: ptrType$1, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, ptrType$12, funcType$1, ptrType$13, arrayType$1, arrayType$5, ptrType$15, errFinished, lstat, runtime_args, init, NewSyscallError, IsNotExist, isNotExist, fixCount, sigpipe, syscallMode, NewFile, epipecheck, Lstat, basename, init$1, fillFileStatFromSys, timespecToTime;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$12.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(fd_, name_, dirinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil);
			this.sys = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(File);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	ptrType$12 = $ptrType(file);
	funcType$1 = $funcType([ptrType$12], [$error], false);
	ptrType$13 = $ptrType(time.Location);
	arrayType$1 = $arrayType($Int64, 3);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$1.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$1.nil) {
			$s = -1; return [sliceType$2.nil, $pkg.ErrInvalid];
			return [sliceType$2.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2, pe$3;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$3 = _ref.$val;
			err = pe$3.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $pkg.ErrInvalid;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return NewSyscallError("fsync", e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$1.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$12, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.fd === 1) || (file$1.file.fd === 2))) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$12.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, fs;
		f = this;
		if (f === ptrType$1.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Fstat(f.file.fd, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs, f.file.name);
		return [fs, $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (false && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (false && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		var $ptr;
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	fillFileStatFromSys = function(fs, name) {
		var $ptr, _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime(fs.sys.Mtim));
		fs.mode = (((fs.sys.Mode & 511) >>> 0) >>> 0);
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if (_1 === (24576)) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", exported: true, typ: $error, tag: ""}]);
	File.init("os", [{prop: "file", name: "", exported: false, typ: ptrType$12, tag: ""}]);
	file.init("os", [{prop: "fd", name: "fd", exported: false, typ: $Int, tag: ""}, {prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", exported: false, typ: ptrType, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", exported: false, typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", exported: false, typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, formatBits, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >>> 0);
			dig = (y$2 = k, y$2 < 32 ? (n >>> y$2) : 0) >>> 0;
			n = n - (((y$3 = k, y$3 < 32 ? (dig << y$3) : 0) >>> 0)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = n - (((y$5 = k, y$5 < 32 ? (dig$1 << y$5) : 0) >>> 0)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, digs, prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, width, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, utf8.RuneLen(r), quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, width, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, width;
		runeTmp = arrayType$4.zero();
		if ((r === (quote >> 0)) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, (r << 24 >>> 24));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, (r << 24 >>> 24));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt(((r << 24 >>> 24) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s >>> 0), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	AppendQuote = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var $ptr, dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = (c$1 >> 0) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = (c$1 >> 0);
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _1, _q, _tuple, _tuple$1, buf, c, err, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [$bytesToString(buf), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = (r << 16 >>> 16);
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? $throwRuntimeError("index out of range") : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	decimal.init("strconv", [{prop: "d", name: "d", exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, mapType$1, structType$1, sliceType$5, ptrType$3, funcType$1, sliceType$6, ptrType$4, ptrType$5, sliceType$7, sliceType$8, ptrType$6, ptrType$7, structType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, ptrType$8, ptrType$9, sliceType$14, sliceType$15, ptrType$10, sliceType$16, ptrType$16, sliceType$18, ptrType$17, funcType$3, funcType$4, funcType$5, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$3.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$5.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.methods = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$5.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$5.nil);
			this.fields = sliceType$8.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$14.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$10.nil;
			this.index = sliceType$14.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType(method);
	mapType$1 = $mapType(ptrType$1, sliceType$3);
	structType$1 = $structType("reflect", [{prop: "RWMutex", name: "", exported: true, typ: sync.RWMutex, tag: ""}, {prop: "m", name: "m", exported: false, typ: mapType$1, tag: ""}]);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$3], true);
	sliceType$6 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	sliceType$7 = $sliceType(imethod);
	sliceType$8 = $sliceType(structField);
	ptrType$6 = $ptrType(uncommonType);
	ptrType$7 = $ptrType(nameData);
	structType$8 = $structType("reflect", [{prop: "str", name: "str", exported: false, typ: $String, tag: ""}]);
	sliceType$9 = $sliceType(ptrType$3);
	sliceType$10 = $sliceType(Value);
	sliceType$11 = $sliceType(Type);
	sliceType$12 = $sliceType(sliceType$9);
	ptrType$8 = $ptrType(interfaceType);
	ptrType$9 = $ptrType(imethod);
	sliceType$14 = $sliceType($Int);
	sliceType$15 = $sliceType(fieldScan);
	ptrType$10 = $ptrType(structType);
	sliceType$16 = $sliceType($Uint8);
	ptrType$16 = $ptrType($UnsafePointer);
	sliceType$18 = $sliceType($Int32);
	ptrType$17 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$3.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$7.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), new name.ptr(ptrType$5.nil), sliceType$8.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$5.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newNameOff(newName(internalStr(typ.string), "", "", !!(typ.exported))), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$3, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff(newName(internalStr(m.name), "", "", internalStr(m.pkg) === "")), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff(newName(internalStr(typ.pkg), "", "", false)), ($parseInt(methodSet.length) << 16 >>> 16), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem), (dir >>> 0)));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = ($parseInt(results.length) << 16 >>> 16);
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), ($parseInt(params.length) << 16 >>> 16), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$7, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === "")), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), new name.ptr(ptrType$5.nil), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$8, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var $ptr, t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var $ptr, _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$6.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var $ptr, t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var $ptr, t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = $clone(this, name);
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var $ptr, _entry, n, s;
		s = "";
		n = $clone(this, name);
		s = (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var $ptr, _entry, n;
		n = $clone(this, name);
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var $ptr, _entry, n;
		n = $clone(this, name);
		return (_entry = nameMap[ptrType$5.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$7.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var $ptr, _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$5);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$5.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= nameOffList.$length) ? $throwRuntimeError("index out of range") : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var $ptr, i, n;
		n = $clone(n, name);
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return (i >> 0);
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var $ptr, off, t, x;
		t = this;
		return (x = (off >> 0), ((x < 0 || x >= typeOffList.$length) ? $throwRuntimeError("index out of range") : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var $ptr, i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return (i >> 0);
	};
	internalStr = function(strObj) {
		var $ptr, c, strObj;
		c = new structType$8.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$9, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? $throwRuntimeError("index out of range") : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$9, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? $throwRuntimeError("index out of range") : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		return reflectType($funcType($externalize(jsIn, sliceType$9), $externalize(jsOut, sliceType$9), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return new (jsType(typ).ptr)();
		} else if (_1 === (17)) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_1 === (4)) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if ((_1 === (2)) || (_1 === (5))) {
			ptr.$set((bits.$low >> 0));
		} else if (_1 === (6)) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_1 === (8)) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			ptr.$set((bits.$low >>> 0));
		} else if (_1 === (11)) {
			ptr.$set(bits);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var $ptr, _$37, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$37 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!tt.rtype.nameOff(m.name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = tt.rtype.nameOff(m.name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])), method);
			if (!v.typ.nameOff(m$1.name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [_$37, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return new (jsType(v.typ))(v.object());
			return new (jsType(v.typ))(v.object());
		}
		$s = -1; return v.object();
		return v.object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$9)));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _1, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
				return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
						return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
			return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? $throwRuntimeError("index out of range") : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = pname.name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = mtyp.kindType;
		in$1 = $makeSlice(sliceType$11, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$11, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var $ptr, arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$9)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), fn, fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$10, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$10.nil;
				return sliceType$10.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$10([$clone(_r$14, Value)]);
				return new sliceType$10([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$10, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
				return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$10.nil;
		return sliceType$10.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = v.object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if (v.IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = v.object();
				tt = v.typ.kindType;
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
				return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = v.typ.kindType;
		if ((i >>> 0) >= (tt.fields.$length >>> 0)) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | (typ[0].Kind() >>> 0)) >>> 0;
		if (!field.name.isExported()) {
			if (field.name.name() === "") {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).name.tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = v.typ.kindType;
				if (i[0] < 0 || i[0] > (tt.len >> 0)) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
					return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = v.object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = v.typ.kindType;
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
					return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
				return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return v.object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return v.object() === $chanNil;
		} else if (_1 === (19)) {
			return v.object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return v.object() === false;
		} else if (_1 === (20)) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt(v.object().length);
		} else if (_1 === (23)) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_1 === (19)) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface(x, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set(x.object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = v.typ.kindType;
				cap = (tt.len >> 0);
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))(v.object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = v.object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = v.ptr.$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$12([new sliceType$9([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$12([new sliceType$9([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$9([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
			return false;
		}
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, s, t;
		t = this;
		s = t.nameOff(t.str).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var $ptr, _entry, _i, _i$1, _key, _ref, _ref$1, _tuple, allExported, allm, found, m, m$1, methods, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = methodCache.RWMutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = methodCache.m[ptrType$1.keyFor(t)], _entry !== undefined ? [_entry.v, true] : [sliceType$3.nil, false]);
		methods = _tuple[0];
		found = _tuple[1];
		$r = methodCache.RWMutex.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (found) {
			$s = -1; return methods;
			return methods;
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			$s = -1; return sliceType$3.nil;
			return sliceType$3.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!name$1.isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$3, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if (name$2.isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		$r = methodCache.RWMutex.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (methodCache.m === false) {
			methodCache.m = {};
		}
		_key = t; (methodCache.m || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: methods };
		$r = methodCache.RWMutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return methods;
		return methods;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$s = -1; return tt.NumMethod();
			return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
			return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
			return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
			return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (ut.mcount >> 0))) { break; } */ if(!(i < (ut.mcount >> 0))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? $throwRuntimeError("index out of range") : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if (pname.isExported() && pname.name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pname.isExported() && pname.name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
				return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$6.nil) {
			return "";
		}
		return t.nameOff(ut.pkgPath).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return (tt.inCount >> 0);
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = pname.name();
		if (!pname.isExported()) {
			m.PkgPath = pname.pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = t.pkgPath.name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$8.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (t.rtype.nameOff(p.name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = $substring(tag, 0, i);
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = $substring(tag, 0, (i + 1 >> 0));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, name$1, p, t, t$1, tag, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; name$1 = $f.name$1; p = $f.p; t = $f.t; t$1 = $f.t$1; tag = $f.tag; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		name$1 = p.name.name();
		/* */ if (!(name$1 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1 === "")) { */ case 1:
			f.Name = name$1;
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!p.name.isExported()) {
			f.PkgPath = t.pkgPath.name();
		}
		tag = p.name.tag();
		if (!(tag === "")) {
			f.Tag = tag;
		}
		f.Offset = p.offset;
		f.Index = new sliceType$14([i]);
		$s = -1; return f;
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.name$1 = name$1; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.tag = tag; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, name$1, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		ok = false;
		t = this;
		current = new sliceType$15([]);
		next = new sliceType$15([new fieldScan.ptr(t, sliceType$14.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$10.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$10.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					name$1 = f.name.name();
					/* */ if (!(name$1 === "")) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(name$1 === "")) { */ case 9:
						fname = name$1;
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$10.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$14.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$10.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$10.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$10.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$10.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$14.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, tfname, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; tfname = $f.tfname; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$14.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name$1[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name$1[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				tfname = tf.name.name();
				/* */ if (tfname === "") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tfname === "") { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tfname === name$1[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tfname === name$1[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			$s = -1; return [f, present];
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name$1) { return function(s) {
			var $ptr, s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.tfname = tfname; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (V.nameOff(vm.name).name() === t.rtype.nameOff(tm.name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$6.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < (v$1.mcount >> 0))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? $throwRuntimeError("index out of range") : vmethods.$array[vmethods.$offset + j$1]), method);
			if (V.nameOff(vm$1.name).name() === t.rtype.nameOff(tm$1.name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _1, _i, _ref, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_1 = kind;
		if (_1 === (17)) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_1 === (18)) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_1 === (19)) {
			t = T.kindType;
			v = V.kindType;
			if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
				return false;
			}
			i = 0;
			while (true) {
				if (!(i < t.rtype.NumIn())) { break; }
				if (!($interfaceIsEqual(t.rtype.In(i), v.rtype.In(i)))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			i$1 = 0;
			while (true) {
				if (!(i$1 < t.rtype.NumOut())) { break; }
				if (!($interfaceIsEqual(t.rtype.Out(i$1), v.rtype.Out(i$1)))) {
					return false;
				}
				i$1 = i$1 + (1) >> 0;
			}
			return true;
		} else if (_1 === (20)) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_1 === (21)) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if ((_1 === (22)) || (_1 === (23))) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_1 === (25)) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref = t$2.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$2 = _i;
				tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i$2]));
				vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$2]));
				if (!(tf.name.name() === vf.name.name())) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.name.tag() === vf.name.tag())) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return v.ptr.$get();
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_1 === (16)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!(v.Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = v.Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
			return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return v.ptr.$get();
		} else if (_1 === (14)) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (3)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (4)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (5)) {
			return new $Int64(0, p.$get());
		} else if (_1 === (6)) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, e.$get(), fl);
			return new Value.ptr(typ, e.$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$10, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = (i >>> 0) >= (_r >>> 0); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
			return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var $ptr, _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = v.Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_1 === (16)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			v.ptr.$set($fround(x));
		} else if (_1 === (14)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (3)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_1 === (4)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_1 === (5)) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_1 === (6)) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			$s = -1; return;
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$16(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (8)) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_1 === (9)) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_1 === (10)) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_1 === (11)) {
			v.ptr.$set(x);
		} else if (_1 === (12)) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
			return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return v.ptr.$get();
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$6.nil || (i >>> 0) >= (ut.mcount >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (8)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (9)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (10)) {
			return new $Uint64(0, p.$get());
		} else if (_1 === (11)) {
			return p.$get();
		} else if (_1 === (12)) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			/* */ if (directlyAssignable(dst, v.typ)) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (directlyAssignable(dst, v.typ)) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
				return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$1 = valueInterface(v, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				_r$2 = dst.NumMethod(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2 === 0) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r$2 === 0) { */ case 9:
					target.$set(x);
					$s = 11; continue;
				/* } else { */ case 10:
					ifaceE2I(dst, x, target);
				/* } */ case 11:
				$s = -1; return new Value.ptr(dst, target, 148);
				return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
					return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
					return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
					return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
					return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
					return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
					return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
					return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
					return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
					return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
					return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
							return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
							return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
							return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
							return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		if (haveIdenticalUnderlyingType(dst, src)) {
			$s = -1; return cvtDirect;
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 23; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 23:
		/* */ if (_v$2) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_v$2) { */ case 21:
			$s = -1; return cvtDirect;
			return cvtDirect;
		/* } */ case 22:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
				return cvtI2I;
			}
			$s = -1; return cvtT2I;
			return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			ptr.$set($fround(v));
		} else if (_1 === (8)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_1 === (16)) {
			ptr.$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 96) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$16($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$18($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$6.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}];
	ptrType$17.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$5], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$3], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$10.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$10], [sliceType$10], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$16], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$16], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$18], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$10], [sliceType$10], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$18], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", exported: false, typ: sliceType$3, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", exported: false, typ: ptrType$5, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", exported: false, typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", exported: false, typ: ptrType$3, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$14], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$6], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", exported: false, typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", exported: false, typ: ptrType$5, tag: ""}, {prop: "str", name: "str", exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", exported: false, typ: sliceType$7, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "", exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", exported: false, typ: sliceType$8, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", exported: true, typ: sliceType$14, tag: ""}, {prop: "Anonymous", name: "Anonymous", exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$10, tag: ""}, {prop: "index", name: "index", exported: false, typ: sliceType$14, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new structType$1.ptr(new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$6(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, byteType, space, ssFree, complexError, boolError, newPrinter, Sprintf, Errorf, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var $ptr, _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? $throwRuntimeError("index out of range") : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var $ptr, buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint((u.$low >> 0))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen((u.$low >> 0))) >> 0;
			utf8.EncodeRune($subslice(buf, i), (u.$low >> 0));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var $ptr, _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = new $Int64(u.$high, u.$low), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var $ptr, buf, c, f, r, w;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, buf, c, f, r;
		f = this;
		r = (c.$low >> 0);
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var $ptr, f, num, oldZero, prec, size, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, (verb << 24 >>> 24), prec, size);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Sprintf = function(format, a) {
		var $ptr, _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		$s = -1; return s;
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	getField = function(v, i) {
		var $ptr, _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$1 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if (p.value.IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (p.value.IsValid()) { */ case 3:
				_r$1 = p.value.Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue(p.value, 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var $ptr, _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f.$ptr = $ptr; $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var $ptr, _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var $ptr, _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f.$ptr = $ptr; $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var $ptr, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64(new $Uint64(0, c), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer(new $Uint64(0, c$1), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s($bytesToString(v));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q($bytesToString(v));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue(_r, verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		u = 0;
			_1 = value.Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = value.Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = value.Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger(new $Uint64(0, u.constructor === Number ? u : 1), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if ((v.Kind() === 22) && v.IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r = _r; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var $ptr, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
						return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
						return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
			return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer(_r$1, 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat(f$1, 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex(new $Complex128(f$3.$real, f$3.$imag), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$5), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$6), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$7), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$8), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(f$9.$high, f$9.$low), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$10), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$11), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$12), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$13), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			$r = p.printValue(f$18, verb, 0); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$2 = p.handleMethods(verb); /* */ $s = 58; case 58: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (!_r$2) { */ case 56:
				_r$3 = reflect.ValueOf(f$19); /* */ $s = 59; case 59: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = p.printValue(_r$3, verb, 0); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 57:
		/* } */ case 36:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		/* */ if (depth > 0 && value.IsValid() && value.CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && value.IsValid() && value.CanInterface()) { */ case 1:
			_r = value.Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
				return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = value.Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool(f.Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger((x = f.Int(), new $Uint64(x.$high, x.$low)), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger(f.Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat(f.Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat(f.Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex(f.Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex(f.Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = f.String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = f.Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = f.MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = f.MapIndex(key); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue(_r$5, verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = f.Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < f.NumField())) { break; } */ if(!(i$1 < f.NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = f.Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField(f, i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue(_r$8, verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = f.Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!value$1.IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!value$1.IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = f.Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = f.Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if (f.Kind() === 23) { $s = 81; continue; }
							/* */ if (f.CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if (f.Kind() === 23) { */ case 81:
								_r$13 = f.Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if (f.CanAddr()) { */ case 82:
								_r$14 = f.Slice(0, f.Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = _r$14.Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, f.Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = f.Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = _r$16.Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$17.$low << 24 >>> 24));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
							return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = f.Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if ((f.Kind() === 23) && f.IsNil()) { $s = 99; continue; }
					/* */ $s = 100; continue;
					/* if ((f.Kind() === 23) && f.IsNil()) { */ case 99:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
						return;
					/* } else { */ case 100:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
						i$3 = 0;
						/* while (true) { */ case 102:
							/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 103; continue; }
							if (i$3 > 0) {
								(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
							}
							_r$20 = f.Index(i$3); /* */ $s = 104; case 104: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							$r = p.printValue(_r$20, verb, depth + 1 >> 0); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							i$3 = i$3 + (1) >> 0;
						/* } */ $s = 102; continue; case 103:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					/* } */ case 101:
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 106:
						/* if (!(i$4 < f.Len())) { break; } */ if(!(i$4 < f.Len())) { $s = 107; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = f.Index(i$4); /* */ $s = 108; case 108: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue(_r$21, verb, depth + 1 >> 0); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 106; continue; case 107:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !((f.Pointer() === 0))) { $s = 110; continue; }
				/* */ $s = 111; continue;
				/* if ((depth === 0) && !((f.Pointer() === 0))) { */ case 110:
						_r$22 = f.Elem(); /* */ $s = 113; case 113: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = a.Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 114; continue; }
						/* */ $s = 115; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 114:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
							return;
						/* } */ case 115:
					case 112:
				/* } */ case 111:
				$r = p.fmtPointer(f, verb); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer(f, verb); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType(f); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = v.Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = v.Int();
						if ((x = new $Int64(0, ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)), (x.$high === n.$high && x.$low === n.$low))) {
							num = ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0);
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = v.Uint();
						if ((x$1 = new $Int64(n$1.$high, n$1.$low), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = new $Uint64(0, (n$1.$low >> 0)), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = (n$1.$low >> 0);
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var $ptr, p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), (c >> 0)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
			return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
				return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "", exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "", exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/html/atom"] = (function() {
	var $pkg = {}, $init, Atom, table, fnv, match, Lookup, String;
	Atom = $pkg.Atom = $newType(4, $kindUint32, "atom.Atom", true, "golang.org/x/net/html/atom", true, null);
	Atom.prototype.String = function() {
		var $ptr, a, n, start;
		a = this.$val;
		start = ((a >>> 8 >>> 0) >>> 0);
		n = (((a & 255) >>> 0) >>> 0);
		if ((start + n >>> 0) > 1582) {
			return "";
		}
		return $substring("abbradiogrouparamalignmarkbdialogaccept-charsetbodyaccesskeygenavaluealtdetailsampatternobreversedfnoembedirnamediagroupingasyncanvasidefaultfooterowspanoframesetitleaudionblurubyautofocusandboxmplaceholderautoplaybasefontimeupdatebdoncancelabelooptgrouplaintextrackindisabledivarbgsoundlowbrbigblinkblockquotebuttonabortranslatecodefercolgroupostercolorcolspannotation-xmlcommandraggablegendcontrolsmallcoordsortedcrossoriginsourcefieldsetfigcaptionafterprintfigurequiredforeignObjectforeignobjectformactionautocompleteerrorformenctypemustmatchallengeformmethodformnovalidatetimeterformtargetheightmlhgroupreloadhiddenhigh1hreflanghttp-equivideoncanplaythrough2iframeimageimglyph3isindexismappletitemscopeditemtypemarqueematheaderspacermaxlength4minlength5mtextareadonlymultiplemutedonclickoncloseamlesspellcheckedoncontextmenuitemidoncuechangeondblclickondragendondragenterondragleaveondragoverondragstarticleondropzonemptiedondurationchangeonendedonerroronfocusrcdocitempropenoscriptonhashchangeoninputmodeloninvalidonkeydownloadonkeypressrclangonkeyupublicontenteditableonlanguagechangeonloadeddatalistingonloadedmetadatabindexonloadstartonmessageonmousedownonmousemoveonmouseoutputonmouseoveronmouseuponmousewheelonofflineononlineonpagehidesclassectionbeforeunloaddresshapeonpageshowidth6onpausemaponplayingonpopstateonprogresstrikeytypeonratechangeonresetonresizestrongonscrollonseekedonseekingonselectedonshowraponsortableonstalledonstorageonsubmitemrefacenteronsuspendontoggleonunloadonvolumechangeonwaitingoptimumanifestepromptoptionbeforeprintstylesummarysupsvgsystemplate", start, (start + n >>> 0));
	};
	$ptrType(Atom).prototype.String = function() { return new Atom(this.$get()).String(); };
	Atom.prototype.string = function() {
		var $ptr, a;
		a = this.$val;
		return $substring("abbradiogrouparamalignmarkbdialogaccept-charsetbodyaccesskeygenavaluealtdetailsampatternobreversedfnoembedirnamediagroupingasyncanvasidefaultfooterowspanoframesetitleaudionblurubyautofocusandboxmplaceholderautoplaybasefontimeupdatebdoncancelabelooptgrouplaintextrackindisabledivarbgsoundlowbrbigblinkblockquotebuttonabortranslatecodefercolgroupostercolorcolspannotation-xmlcommandraggablegendcontrolsmallcoordsortedcrossoriginsourcefieldsetfigcaptionafterprintfigurequiredforeignObjectforeignobjectformactionautocompleteerrorformenctypemustmatchallengeformmethodformnovalidatetimeterformtargetheightmlhgroupreloadhiddenhigh1hreflanghttp-equivideoncanplaythrough2iframeimageimglyph3isindexismappletitemscopeditemtypemarqueematheaderspacermaxlength4minlength5mtextareadonlymultiplemutedonclickoncloseamlesspellcheckedoncontextmenuitemidoncuechangeondblclickondragendondragenterondragleaveondragoverondragstarticleondropzonemptiedondurationchangeonendedonerroronfocusrcdocitempropenoscriptonhashchangeoninputmodeloninvalidonkeydownloadonkeypressrclangonkeyupublicontenteditableonlanguagechangeonloadeddatalistingonloadedmetadatabindexonloadstartonmessageonmousedownonmousemoveonmouseoutputonmouseoveronmouseuponmousewheelonofflineononlineonpagehidesclassectionbeforeunloaddresshapeonpageshowidth6onpausemaponplayingonpopstateonprogresstrikeytypeonratechangeonresetonresizestrongonscrollonseekedonseekingonselectedonshowraponsortableonstalledonstorageonsubmitemrefacenteronsuspendontoggleonunloadonvolumechangeonwaitingoptimumanifestepromptoptionbeforeprintstylesummarysupsvgsystemplate", (a >>> 8 >>> 0), ((a >>> 8 >>> 0) + ((a & 255) >>> 0) >>> 0));
	};
	$ptrType(Atom).prototype.string = function() { return new Atom(this.$get()).string(); };
	fnv = function(h, s) {
		var $ptr, _i, _ref, h, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			h = (h ^ ((((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >>> 0))) >>> 0;
			h = $imul(h, (16777619)) >>> 0;
			_i++;
		}
		return h;
	};
	match = function(s, t) {
		var $ptr, _i, _ref, c, i, s, t;
		_ref = t;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((s.charCodeAt(i) === c))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Lookup = function(s) {
		var $ptr, a, a$1, h, s, x, x$1;
		if ((s.$length === 0) || s.$length > 19) {
			return 0;
		}
		h = fnv(3246237246, s);
		a = (x = (h & 511) >>> 0, ((x < 0 || x >= table.length) ? $throwRuntimeError("index out of range") : table[x]));
		if (((((a & 255) >>> 0) >> 0) === s.$length) && match(new Atom(a).string(), s)) {
			return a;
		}
		a$1 = (x$1 = (((h >>> 16 >>> 0)) & 511) >>> 0, ((x$1 < 0 || x$1 >= table.length) ? $throwRuntimeError("index out of range") : table[x$1]));
		if (((((a$1 & 255) >>> 0) >> 0) === s.$length) && match(new Atom(a$1).string(), s)) {
			return a$1;
		}
		return 0;
	};
	$pkg.Lookup = Lookup;
	String = function(s) {
		var $ptr, a, s;
		a = Lookup(s);
		if (!((a === 0))) {
			return new Atom(a).String();
		}
		return $bytesToString(s);
	};
	$pkg.String = String;
	Atom.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "string", name: "string", pkg: "golang.org/x/net/html/atom", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		table = $toNativeArray($kindUint32, [0, 297483, 385545, 129555, 391686, 0, 0, 387847, 5636, 0, 371975, 327178, 358918, 97033, 15875, 95495, 0, 2817, 0, 0, 185607, 281096, 0, 19972, 0, 0, 260873, 352008, 86019, 0, 0, 0, 248072, 161802, 400643, 0, 118792, 0, 0, 0, 0, 0, 0, 155143, 394253, 221195, 329986, 370440, 159746, 208653, 0, 171013, 331015, 153862, 30468, 358408, 0, 0, 70403, 129550, 0, 0, 0, 0, 191234, 203784, 10247, 34050, 335882, 257795, 183047, 13065, 0, 36102, 282116, 176133, 0, 0, 0, 0, 0, 210948, 12036, 0, 0, 39432, 346631, 75525, 41221, 231431, 0, 142850, 0, 78081, 249604, 195076, 0, 279046, 55812, 54788, 90631, 341767, 73218, 0, 110600, 0, 191235, 70915, 0, 0, 0, 185606, 81666, 86024, 144642, 0, 80391, 14598, 311817, 139017, 176643, 0, 190722, 243207, 188681, 193797, 47879, 363270, 4106, 285956, 31493, 173826, 157442, 159748, 28170, 103430, 266503, 216330, 16389, 0, 59656, 0, 205578, 39429, 0, 74755, 0, 0, 128518, 26883, 0, 195336, 0, 273669, 398855, 73987, 778, 27652, 0, 402182, 0, 89349, 32518, 152836, 0, 356105, 0, 0, 0, 0, 0, 0, 325893, 155395, 165136, 226826, 402952, 120845, 0, 37380, 0, 0, 282119, 302086, 0, 209163, 0, 73475, 116226, 375561, 79366, 318212, 0, 320007, 338442, 368137, 184836, 17667, 0, 35330, 20743, 308748, 218889, 44804, 3073, 202503, 147973, 71687, 0, 0, 151814, 0, 257, 181000, 0, 0, 113415, 68616, 0, 210952, 401411, 102149, 281092, 0, 314120, 172550, 0, 25861, 66818, 289547, 0, 246534, 0, 0, 0, 377864, 0, 59139, 18178, 33541, 168962, 338952, 76810, 0, 61445, 1537, 0, 37383, 0, 0, 0, 333577, 0, 172291, 62984, 271111, 0, 343564, 0, 252428, 18439, 0, 262152, 0, 0, 81929, 0, 271119, 0, 224011, 8454, 358920, 0, 0, 127498, 374022, 0, 283920, 75780, 56580, 106251, 244999, 362244, 270852, 0, 164101, 318981, 0, 0, 381966, 43526, 178441, 397573, 0, 0, 269830, 0, 143886, 360966, 0, 333574, 247812, 179202, 56076, 67844, 149258, 0, 0, 0, 241415, 156934, 11265, 0, 141322, 256005, 0, 330498, 51458, 213515, 124173, 0, 0, 0, 321294, 179461, 235017, 84741, 49411, 237328, 6403, 0, 0, 292361, 393222, 191241, 206855, 52744, 0, 514, 144906, 0, 0, 25351, 0, 0, 200711, 294667, 239368, 0, 0, 258569, 179462, 100360, 199429, 363784, 332038, 112650, 218886, 158468, 0, 246531, 87814, 0, 91918, 390916, 4, 6918, 0, 4610, 0, 257282, 0, 0, 120835, 108547, 0, 349444, 274960, 34311, 6659, 316170, 26887, 136196, 127492, 0, 165129, 24835, 287496, 0, 0, 25858, 160772, 0, 233736, 264202, 146440, 90628, 1, 279052, 0, 42501, 0, 11781, 142342, 0, 62468, 169478, 0, 185604, 0, 0, 0, 0, 0, 389384, 45833, 84228, 350470, 197384, 3077, 0, 0, 135431, 373508, 64777, 159234, 365833, 0, 0, 250886, 187142, 348424, 303627, 379912, 354056, 0, 136205, 117766, 300298, 155139, 329477, 104710, 0, 22276, 0, 0, 21250, 4357, 255495, 0, 0, 268295, 0, 0, 114700, 8462, 211974, 256009, 0, 340742, 370947, 66821, 230917, 0, 54792, 0, 0, 0, 0, 0, 109062, 98822, 185349, 0, 35845, 0, 0, 125958, 28165, 91914, 134411, 0, 250376, 0, 349445, 130060, 38148, 38920, 150278, 233222, 176902, 0, 23048, 0, 0, 0, 174343, 0, 0, 159752, 0, 193282, 324359, 0, 0, 0, 188675, 49931, 194056, 0, 306441, 229387]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Reader, sliceType, ptrType$5, IndexByte, Index, Count, NewReader, Contains, ContainsRune, IndexRune, IndexAny, HasPrefix, Map, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, Trim, TrimLeft, Replace, EqualFold;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	sliceType = $sliceType($Uint8);
	ptrType$5 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Reader.ptr.prototype.Len = function() {
		var $ptr, r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var $ptr, r;
		r = this;
		return new $Int64(0, r.s.length);
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, $substring(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("strings.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, $substring(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, b, r, x, x$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString($substring(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = new $Int64(0, size), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = new $Int64(0, r.s.length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; m = $f.m; n = $f.n; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
			return [n, err];
		}
		s = $substring(r.s, $flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(s) {
		var $ptr, r, s;
		r = this;
		Reader.copy(r, new Reader.ptr(s, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(s) { return this.$val.Reset(s); };
	NewReader = function(s) {
		var $ptr, s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	IndexAny = function(s, chars) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, chars, i, m, s;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, $substring(s, 0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
			return s;
		}
		$s = -1; return $bytesToString($subslice(b, 0, nbytes));
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			$s = -1; return "";
			return "";
		}
		$s = -1; return $substring(s, i);
		return $substring(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $substring(s, 0, i);
		return $substring(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString($substring(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return start;
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString($substring(s, 0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	Trim = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
			return s;
		}
		_r = TrimFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Trim }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Trim = Trim;
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			$s = -1; return s;
			return s;
		}
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.Replace = Replace;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!(s === "") && !(t === ""))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if (s.charCodeAt(0) < 128) {
				_tmp$2 = (s.charCodeAt(0) >> 0);
				_tmp$3 = $substring(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $substring(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if (t.charCodeAt(0) < 128) {
				_tmp$6 = (t.charCodeAt(0) >> 0);
				_tmp$7 = $substring(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRuneInString(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $substring(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s === t;
	};
	$pkg.EqualFold = EqualFold;
	ptrType$5.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$String], [], false)}];
	Reader.init("strings", [{prop: "s", name: "s", exported: false, typ: $String, tag: ""}, {prop: "i", name: "i", exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/net/html"] = (function() {
	var $pkg = {}, $init, bufio, bytes, errors, fmt, atom, io, strconv, strings, utf8, NodeType, Node, nodeStack, parser, scope, insertionMode, writer, TokenType, Attribute, Token, span, Tokenizer, sliceType, ptrType, sliceType$1, sliceType$2, sliceType$3, arrayType, arrayType$1, arrayType$2, ptrType$1, ptrType$2, sliceType$4, sliceType$5, arrayType$3, arrayType$4, sliceType$6, ptrType$3, isSpecialElementMap, entity, entity2, replacementTable, breakout, svgTagNameAdjustments, mathMLAttributeAdjustments, svgAttributeAdjustments, scopeMarker, scopeMarker$24ptr, defaultScopeStopTags, plaintextAbort, voidElements, nul, replacement, isSpecialElement, unescapeEntity, unescape, lower, escape, EscapeString, adjustAttributeNames, adjustForeignAttributes, htmlIntegrationPoint, mathMLTextIntegrationPoint, reparentChildren, beforeHeadIM, inHeadIM, afterHeadIM, copyAttributes, inBodyIM, textIM, inTableIM, inCaptionIM, inColumnGroupIM, inTableBodyIM, inRowIM, inCellIM, inSelectIM, inSelectInTableIM, afterBodyIM, inFramesetIM, afterFramesetIM, afterAfterBodyIM, afterAfterFramesetIM, parseForeignContent, ParseFragment, Render, render, render1, writeQuoted, readAtLeastOneByte, convertNewlines, NewTokenizerFragment;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	atom = $packages["golang.org/x/net/html/atom"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	NodeType = $pkg.NodeType = $newType(4, $kindUint32, "html.NodeType", true, "golang.org/x/net/html", true, null);
	Node = $pkg.Node = $newType(0, $kindStruct, "html.Node", true, "golang.org/x/net/html", true, function(Parent_, FirstChild_, LastChild_, PrevSibling_, NextSibling_, Type_, DataAtom_, Data_, Namespace_, Attr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Parent = ptrType.nil;
			this.FirstChild = ptrType.nil;
			this.LastChild = ptrType.nil;
			this.PrevSibling = ptrType.nil;
			this.NextSibling = ptrType.nil;
			this.Type = 0;
			this.DataAtom = 0;
			this.Data = "";
			this.Namespace = "";
			this.Attr = sliceType$1.nil;
			return;
		}
		this.Parent = Parent_;
		this.FirstChild = FirstChild_;
		this.LastChild = LastChild_;
		this.PrevSibling = PrevSibling_;
		this.NextSibling = NextSibling_;
		this.Type = Type_;
		this.DataAtom = DataAtom_;
		this.Data = Data_;
		this.Namespace = Namespace_;
		this.Attr = Attr_;
	});
	nodeStack = $pkg.nodeStack = $newType(12, $kindSlice, "html.nodeStack", true, "golang.org/x/net/html", false, null);
	parser = $pkg.parser = $newType(0, $kindStruct, "html.parser", true, "golang.org/x/net/html", false, function(tokenizer_, tok_, hasSelfClosingToken_, doc_, oe_, afe_, head_, form_, scripting_, framesetOK_, im_, originalIM_, fosterParenting_, quirks_, fragment_, context_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tokenizer = ptrType$2.nil;
			this.tok = new Token.ptr(0, 0, "", sliceType$1.nil);
			this.hasSelfClosingToken = false;
			this.doc = ptrType.nil;
			this.oe = nodeStack.nil;
			this.afe = nodeStack.nil;
			this.head = ptrType.nil;
			this.form = ptrType.nil;
			this.scripting = false;
			this.framesetOK = false;
			this.im = $throwNilPointerError;
			this.originalIM = $throwNilPointerError;
			this.fosterParenting = false;
			this.quirks = false;
			this.fragment = false;
			this.context = ptrType.nil;
			return;
		}
		this.tokenizer = tokenizer_;
		this.tok = tok_;
		this.hasSelfClosingToken = hasSelfClosingToken_;
		this.doc = doc_;
		this.oe = oe_;
		this.afe = afe_;
		this.head = head_;
		this.form = form_;
		this.scripting = scripting_;
		this.framesetOK = framesetOK_;
		this.im = im_;
		this.originalIM = originalIM_;
		this.fosterParenting = fosterParenting_;
		this.quirks = quirks_;
		this.fragment = fragment_;
		this.context = context_;
	});
	scope = $pkg.scope = $newType(4, $kindInt, "html.scope", true, "golang.org/x/net/html", false, null);
	insertionMode = $pkg.insertionMode = $newType(4, $kindFunc, "html.insertionMode", true, "golang.org/x/net/html", false, null);
	writer = $pkg.writer = $newType(8, $kindInterface, "html.writer", true, "golang.org/x/net/html", false, null);
	TokenType = $pkg.TokenType = $newType(4, $kindUint32, "html.TokenType", true, "golang.org/x/net/html", true, null);
	Attribute = $pkg.Attribute = $newType(0, $kindStruct, "html.Attribute", true, "golang.org/x/net/html", true, function(Namespace_, Key_, Val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Namespace = "";
			this.Key = "";
			this.Val = "";
			return;
		}
		this.Namespace = Namespace_;
		this.Key = Key_;
		this.Val = Val_;
	});
	Token = $pkg.Token = $newType(0, $kindStruct, "html.Token", true, "golang.org/x/net/html", true, function(Type_, DataAtom_, Data_, Attr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = 0;
			this.DataAtom = 0;
			this.Data = "";
			this.Attr = sliceType$1.nil;
			return;
		}
		this.Type = Type_;
		this.DataAtom = DataAtom_;
		this.Data = Data_;
		this.Attr = Attr_;
	});
	span = $pkg.span = $newType(0, $kindStruct, "html.span", true, "golang.org/x/net/html", false, function(start_, end_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.start = 0;
			this.end = 0;
			return;
		}
		this.start = start_;
		this.end = end_;
	});
	Tokenizer = $pkg.Tokenizer = $newType(0, $kindStruct, "html.Tokenizer", true, "golang.org/x/net/html", true, function(r_, tt_, err_, readErr_, raw_, buf_, maxBuf_, data_, pendingAttr_, attr_, nAttrReturned_, rawTag_, textIsRaw_, convertNUL_, allowCDATA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.tt = 0;
			this.err = $ifaceNil;
			this.readErr = $ifaceNil;
			this.raw = new span.ptr(0, 0);
			this.buf = sliceType$3.nil;
			this.maxBuf = 0;
			this.data = new span.ptr(0, 0);
			this.pendingAttr = arrayType$4.zero();
			this.attr = sliceType$6.nil;
			this.nAttrReturned = 0;
			this.rawTag = "";
			this.textIsRaw = false;
			this.convertNUL = false;
			this.allowCDATA = false;
			return;
		}
		this.r = r_;
		this.tt = tt_;
		this.err = err_;
		this.readErr = readErr_;
		this.raw = raw_;
		this.buf = buf_;
		this.maxBuf = maxBuf_;
		this.data = data_;
		this.pendingAttr = pendingAttr_;
		this.attr = attr_;
		this.nAttrReturned = nAttrReturned_;
		this.rawTag = rawTag_;
		this.textIsRaw = textIsRaw_;
		this.convertNUL = convertNUL_;
		this.allowCDATA = allowCDATA_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(Node);
	sliceType$1 = $sliceType(Attribute);
	sliceType$2 = $sliceType(atom.Atom);
	sliceType$3 = $sliceType($Uint8);
	arrayType = $arrayType($Int32, 2);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(nodeStack);
	ptrType$2 = $ptrType(Tokenizer);
	sliceType$4 = $sliceType(ptrType);
	sliceType$5 = $sliceType($emptyInterface);
	arrayType$3 = $arrayType($Uint8, 2);
	arrayType$4 = $arrayType(span, 2);
	sliceType$6 = $sliceType(arrayType$4);
	ptrType$3 = $ptrType(parser);
	isSpecialElement = function(element) {
		var $ptr, _1, _entry, element;
		_1 = element.Namespace;
		if (_1 === ("") || _1 === ("html")) {
			return (_entry = isSpecialElementMap[$String.keyFor(element.Data)], _entry !== undefined ? _entry.v : false);
		} else if (_1 === ("svg")) {
			return element.Data === "foreignObject";
		}
		return false;
	};
	unescapeEntity = function(b, dst, src, attribute) {
		var $ptr, _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, attribute, b, c, c$1, dst, dst1, dst1$1, entityName, hex, i, j, maxLen, s, src, src1, x, x$1, x$2, x$3, x$4;
		dst1 = 0;
		src1 = 0;
		_tmp = 1;
		_tmp$1 = $subslice(b, src);
		i = _tmp;
		s = _tmp$1;
		if (s.$length <= 1) {
			((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
			_tmp$2 = dst + 1 >> 0;
			_tmp$3 = src + 1 >> 0;
			dst1 = _tmp$2;
			src1 = _tmp$3;
			return [dst1, src1];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 35) {
			if (s.$length <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$4 = dst + 1 >> 0;
				_tmp$5 = src + 1 >> 0;
				dst1 = _tmp$4;
				src1 = _tmp$5;
				return [dst1, src1];
			}
			i = i + (1) >> 0;
			c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + (1) >> 0;
			}
			x = 0;
			while (true) {
				if (!(i < s.$length)) { break; }
				c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				i = i + (1) >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (($imul(16, x)) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((($imul(16, x)) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((($imul(16, x)) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (($imul(10, x)) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - (1) >> 0;
				}
				break;
			}
			if (i <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$6 = dst + 1 >> 0;
				_tmp$7 = src + 1 >> 0;
				dst1 = _tmp$6;
				src1 = _tmp$7;
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = (x$1 = x - 128 >> 0, ((x$1 < 0 || x$1 >= replacementTable.length) ? $throwRuntimeError("index out of range") : replacementTable[x$1]));
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tmp$8 = dst + utf8.EncodeRune($subslice(b, dst), x) >> 0;
			_tmp$9 = src + i >> 0;
			dst1 = _tmp$8;
			src1 = _tmp$9;
			return [dst1, src1];
		}
		while (true) {
			if (!(i < s.$length)) { break; }
			c$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			i = i + (1) >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - (1) >> 0;
			}
			break;
		}
		entityName = $bytesToString($subslice(s, 1, i));
		if (entityName === "") {
		} else if (attribute && !((entityName.charCodeAt((entityName.length - 1 >> 0)) === 59)) && s.$length > i && (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61)) {
		} else {
			x$2 = (_entry = entity[$String.keyFor(entityName)], _entry !== undefined ? _entry.v : 0);
			if (!((x$2 === 0))) {
				_tmp$10 = dst + utf8.EncodeRune($subslice(b, dst), x$2) >> 0;
				_tmp$11 = src + i >> 0;
				dst1 = _tmp$10;
				src1 = _tmp$11;
				return [dst1, src1];
			} else {
				x$3 = $clone((_entry$1 = entity2[$String.keyFor(entityName)], _entry$1 !== undefined ? _entry$1.v : arrayType.zero()), arrayType);
				if (!((x$3[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune($subslice(b, dst), x$3[0]) >> 0;
					_tmp$12 = dst1$1 + utf8.EncodeRune($subslice(b, dst1$1), x$3[1]) >> 0;
					_tmp$13 = src + i >> 0;
					dst1 = _tmp$12;
					src1 = _tmp$13;
					return [dst1, src1];
				} else if (!attribute) {
					maxLen = entityName.length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (true) {
						if (!(j > 1)) { break; }
						x$4 = (_entry$2 = entity[$String.keyFor($substring(entityName, 0, j))], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$4 === 0))) {
							_tmp$14 = dst + utf8.EncodeRune($subslice(b, dst), x$4) >> 0;
							_tmp$15 = (src + j >> 0) + 1 >> 0;
							dst1 = _tmp$14;
							src1 = _tmp$15;
							return [dst1, src1];
						}
						j = j - (1) >> 0;
					}
				}
			}
		}
		_tmp$16 = dst + i >> 0;
		_tmp$17 = src + i >> 0;
		dst1 = _tmp$16;
		src1 = _tmp$17;
		$copySlice($subslice(b, dst, dst1), $subslice(b, src, src1));
		_tmp$18 = dst1;
		_tmp$19 = src1;
		dst1 = _tmp$18;
		src1 = _tmp$19;
		return [dst1, src1];
	};
	unescape = function(b, attribute) {
		var $ptr, _i, _ref, _tmp, _tmp$1, _tuple, _tuple$1, attribute, b, c, c$1, dst, i, src;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c === 38) {
				_tuple = unescapeEntity(b, i, i, attribute);
				dst = _tuple[0];
				src = _tuple[1];
				while (true) {
					if (!(src < b.$length)) { break; }
					c$1 = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
					if (c$1 === 38) {
						_tuple$1 = unescapeEntity(b, dst, src, attribute);
						dst = _tuple$1[0];
						src = _tuple$1[1];
					} else {
						((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = c$1);
						_tmp = dst + 1 >> 0;
						_tmp$1 = src + 1 >> 0;
						dst = _tmp;
						src = _tmp$1;
					}
				}
				return $subslice(b, 0, dst);
			}
			_i++;
		}
		return b;
	};
	lower = function(b) {
		var $ptr, _i, _ref, b, c, i;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (65 <= c && c <= 90) {
				((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i] = ((c + 97 << 24 >>> 24) - 65 << 24 >>> 24));
			}
			_i++;
		}
		return b;
	};
	escape = function(w, s) {
		var $ptr, _1, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, esc, i, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; esc = $f.esc; i = $f.i; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = strings.IndexAny(s, "&'<>\"\r");
		/* while (true) { */ case 1:
			/* if (!(!((i === -1)))) { break; } */ if(!(!((i === -1)))) { $s = 2; continue; }
			_r = w.WriteString($substring(s, 0, i)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
				return err;
			}
			esc = "";
			_1 = s.charCodeAt(i);
			if (_1 === (38)) {
				esc = "&amp;";
			} else if (_1 === (39)) {
				esc = "&#39;";
			} else if (_1 === (60)) {
				esc = "&lt;";
			} else if (_1 === (62)) {
				esc = "&gt;";
			} else if (_1 === (34)) {
				esc = "&#34;";
			} else if (_1 === (13)) {
				esc = "&#13;";
			} else {
				$panic(new $String("unrecognized escape character"));
			}
			s = $substring(s, (i + 1 >> 0));
			_r$1 = w.WriteString(esc); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
				return err$1;
			}
			i = strings.IndexAny(s, "&'<>\"\r");
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.WriteString(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		err$2 = _tuple$2[1];
		$s = -1; return err$2;
		return err$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: escape }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.esc = esc; $f.i = i; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	EscapeString = function(s) {
		var $ptr, _r, buf, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		if (strings.IndexAny(s, "&'<>\"\r") === -1) {
			$s = -1; return s;
			return s;
		}
		buf[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0);
		_r = escape(buf[0], s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return buf[0].String();
		return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: EscapeString }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.EscapeString = EscapeString;
	adjustAttributeNames = function(aa, nameMap) {
		var $ptr, _entry, _i, _ref, _tuple, aa, i, nameMap, newName, ok;
		_ref = aa;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = (_entry = nameMap[$String.keyFor(((i < 0 || i >= aa.$length) ? $throwRuntimeError("index out of range") : aa.$array[aa.$offset + i]).Key)], _entry !== undefined ? [_entry.v, true] : ["", false]);
			newName = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				((i < 0 || i >= aa.$length) ? $throwRuntimeError("index out of range") : aa.$array[aa.$offset + i]).Key = newName;
			}
			_i++;
		}
	};
	adjustForeignAttributes = function(aa) {
		var $ptr, _1, _i, _ref, a, aa, i, j;
		_ref = aa;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			a = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
			if (a.Key === "" || !((a.Key.charCodeAt(0) === 120))) {
				_i++;
				continue;
			}
			_1 = a.Key;
			if (_1 === ("xlink:actuate") || _1 === ("xlink:arcrole") || _1 === ("xlink:href") || _1 === ("xlink:role") || _1 === ("xlink:show") || _1 === ("xlink:title") || _1 === ("xlink:type") || _1 === ("xml:base") || _1 === ("xml:lang") || _1 === ("xml:space") || _1 === ("xmlns:xlink")) {
				j = strings.Index(a.Key, ":");
				((i < 0 || i >= aa.$length) ? $throwRuntimeError("index out of range") : aa.$array[aa.$offset + i]).Namespace = $substring(a.Key, 0, j);
				((i < 0 || i >= aa.$length) ? $throwRuntimeError("index out of range") : aa.$array[aa.$offset + i]).Key = $substring(a.Key, (j + 1 >> 0));
			}
			_i++;
		}
	};
	htmlIntegrationPoint = function(n) {
		var $ptr, _1, _2, _i, _r, _ref, a, n, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; n = $f.n; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!((n.Type === 3))) {
			$s = -1; return false;
			return false;
		}
			_1 = n.Namespace;
			/* */ if (_1 === ("math")) { $s = 2; continue; }
			/* */ if (_1 === ("svg")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === ("math")) { */ case 2:
				/* */ if (n.Data === "annotation-xml") { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (n.Data === "annotation-xml") { */ case 5:
					_ref = n.Attr;
					_i = 0;
					/* while (true) { */ case 7:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
						a = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
						/* */ if (a.Key === "encoding") { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (a.Key === "encoding") { */ case 9:
							_r = strings.ToLower(a.Val); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							val = _r;
							if (val === "text/html" || val === "application/xhtml+xml") {
								$s = -1; return true;
								return true;
							}
						/* } */ case 10:
						_i++;
					/* } */ $s = 7; continue; case 8:
				/* } */ case 6:
				$s = 4; continue;
			/* } else if (_1 === ("svg")) { */ case 3:
				_2 = n.Data;
				if (_2 === ("desc") || _2 === ("foreignObject") || _2 === ("title")) {
					$s = -1; return true;
					return true;
				}
			/* } */ case 4:
		case 1:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: htmlIntegrationPoint }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.n = n; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mathMLTextIntegrationPoint = function(n) {
		var $ptr, _1, n;
		if (!(n.Namespace === "math")) {
			return false;
		}
		_1 = n.Data;
		if (_1 === ("mi") || _1 === ("mo") || _1 === ("mn") || _1 === ("ms") || _1 === ("mtext")) {
			return true;
		}
		return false;
	};
	Node.ptr.prototype.InsertBefore = function(newChild, oldChild) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, n, newChild, next, oldChild, prev;
		n = this;
		if (!(newChild.Parent === ptrType.nil) || !(newChild.PrevSibling === ptrType.nil) || !(newChild.NextSibling === ptrType.nil)) {
			$panic(new $String("html: InsertBefore called for an attached child Node"));
		}
		_tmp = ptrType.nil;
		_tmp$1 = ptrType.nil;
		prev = _tmp;
		next = _tmp$1;
		if (!(oldChild === ptrType.nil)) {
			_tmp$2 = oldChild.PrevSibling;
			_tmp$3 = oldChild;
			prev = _tmp$2;
			next = _tmp$3;
		} else {
			prev = n.LastChild;
		}
		if (!(prev === ptrType.nil)) {
			prev.NextSibling = newChild;
		} else {
			n.FirstChild = newChild;
		}
		if (!(next === ptrType.nil)) {
			next.PrevSibling = newChild;
		} else {
			n.LastChild = newChild;
		}
		newChild.Parent = n;
		newChild.PrevSibling = prev;
		newChild.NextSibling = next;
	};
	Node.prototype.InsertBefore = function(newChild, oldChild) { return this.$val.InsertBefore(newChild, oldChild); };
	Node.ptr.prototype.AppendChild = function(c) {
		var $ptr, c, last, n;
		n = this;
		if (!(c.Parent === ptrType.nil) || !(c.PrevSibling === ptrType.nil) || !(c.NextSibling === ptrType.nil)) {
			$panic(new $String("html: AppendChild called for an attached child Node"));
		}
		last = n.LastChild;
		if (!(last === ptrType.nil)) {
			last.NextSibling = c;
		} else {
			n.FirstChild = c;
		}
		n.LastChild = c;
		c.Parent = n;
		c.PrevSibling = last;
	};
	Node.prototype.AppendChild = function(c) { return this.$val.AppendChild(c); };
	Node.ptr.prototype.RemoveChild = function(c) {
		var $ptr, c, n;
		n = this;
		if (!(c.Parent === n)) {
			$panic(new $String("html: RemoveChild called for a non-child Node"));
		}
		if (n.FirstChild === c) {
			n.FirstChild = c.NextSibling;
		}
		if (!(c.NextSibling === ptrType.nil)) {
			c.NextSibling.PrevSibling = c.PrevSibling;
		}
		if (n.LastChild === c) {
			n.LastChild = c.PrevSibling;
		}
		if (!(c.PrevSibling === ptrType.nil)) {
			c.PrevSibling.NextSibling = c.NextSibling;
		}
		c.Parent = ptrType.nil;
		c.PrevSibling = ptrType.nil;
		c.NextSibling = ptrType.nil;
	};
	Node.prototype.RemoveChild = function(c) { return this.$val.RemoveChild(c); };
	reparentChildren = function(dst, src) {
		var $ptr, child, dst, src;
		while (true) {
			child = src.FirstChild;
			if (child === ptrType.nil) {
				break;
			}
			src.RemoveChild(child);
			dst.AppendChild(child);
		}
	};
	Node.ptr.prototype.clone = function() {
		var $ptr, m, n;
		n = this;
		m = new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, n.Type, n.DataAtom, n.Data, "", $makeSlice(sliceType$1, n.Attr.$length));
		$copySlice(m.Attr, n.Attr);
		return m;
	};
	Node.prototype.clone = function() { return this.$val.clone(); };
	$ptrType(nodeStack).prototype.pop = function() {
		var $ptr, i, n, s, x, x$1;
		s = this;
		i = s.$get().$length;
		n = (x = s.$get(), x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		s.$set($subslice((s.$get()), 0, (i - 1 >> 0)));
		return n;
	};
	$ptrType(nodeStack).prototype.top = function() {
		var $ptr, i, s, x, x$1;
		s = this;
		i = s.$get().$length;
		if (i > 0) {
			return (x = s.$get(), x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		}
		return ptrType.nil;
	};
	$ptrType(nodeStack).prototype.index = function(n) {
		var $ptr, i, n, s, x;
		s = this;
		i = s.$get().$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = s.$get(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) === n) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	$ptrType(nodeStack).prototype.insert = function(i, n) {
		var $ptr, i, n, s, x;
		s = this;
		s.$set($append(s.$get(), ptrType.nil));
		$copySlice($subslice((s.$get()), (i + 1 >> 0)), $subslice((s.$get()), i));
		(x = s.$get(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = n));
	};
	$ptrType(nodeStack).prototype.remove = function(n) {
		var $ptr, i, j, n, s, x;
		s = this;
		i = s.index(n);
		if (i === -1) {
			return;
		}
		$copySlice($subslice((s.$get()), i), $subslice((s.$get()), (i + 1 >> 0)));
		j = s.$get().$length - 1 >> 0;
		(x = s.$get(), ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = ptrType.nil));
		s.$set($subslice((s.$get()), 0, j));
	};
	parser.ptr.prototype.top = function() {
		var $ptr, n, p;
		p = this;
		n = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top();
		if (!(n === ptrType.nil)) {
			return n;
		}
		return p.doc;
	};
	parser.prototype.top = function() { return this.$val.top(); };
	parser.ptr.prototype.popUntil = function(s, matchTags) {
		var $ptr, i, matchTags, p, s;
		p = this;
		i = p.indexOfElementInScope(s, matchTags);
		if (!((i === -1))) {
			p.oe = $subslice(p.oe, 0, i);
			return true;
		}
		return false;
	};
	parser.prototype.popUntil = function(s, matchTags) { return this.$val.popUntil(s, matchTags); };
	parser.ptr.prototype.indexOfElementInScope = function(s, matchTags) {
		var $ptr, _1, _2, _entry, _i, _i$1, _ref, _ref$1, i, matchTags, p, s, t, t$1, tagAtom, x, x$1, x$2;
		p = this;
		i = p.oe.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			tagAtom = (x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).DataAtom;
			if ((x$1 = p.oe, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Namespace === "") {
				_ref = matchTags;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (t === tagAtom) {
						return i;
					}
					_i++;
				}
				_1 = s;
				if (_1 === (0)) {
				} else if (_1 === (1)) {
					if ((tagAtom === 51458) || (tagAtom === 35330)) {
						return -1;
					}
				} else if (_1 === (2)) {
					if (tagAtom === 79366) {
						return -1;
					}
				} else if (_1 === (3)) {
					if ((tagAtom === 152836) || (tagAtom === 273669)) {
						return -1;
					}
				} else if (_1 === (6)) {
					if (!((tagAtom === 62984)) && !((tagAtom === 393222))) {
						return -1;
					}
				} else {
					$panic(new $String("unreachable"));
				}
			}
			_2 = s;
			if ((_2 === (0)) || (_2 === (1)) || (_2 === (2))) {
				_ref$1 = (_entry = defaultScopeStopTags[$String.keyFor((x$2 = p.oe, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Namespace)], _entry !== undefined ? _entry.v : sliceType$2.nil);
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					t$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (t$1 === tagAtom) {
						return -1;
					}
					_i$1++;
				}
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	parser.prototype.indexOfElementInScope = function(s, matchTags) { return this.$val.indexOfElementInScope(s, matchTags); };
	parser.ptr.prototype.elementInScope = function(s, matchTags) {
		var $ptr, matchTags, p, s;
		p = this;
		return !((p.indexOfElementInScope(s, matchTags) === -1));
	};
	parser.prototype.elementInScope = function(s, matchTags) { return this.$val.elementInScope(s, matchTags); };
	parser.ptr.prototype.clearStackToContext = function(s) {
		var $ptr, _1, i, p, s, tagAtom, x;
		p = this;
		i = p.oe.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			tagAtom = (x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).DataAtom;
			_1 = s;
			if (_1 === (3)) {
				if ((tagAtom === 152836) || (tagAtom === 273669)) {
					p.oe = $subslice(p.oe, 0, (i + 1 >> 0));
					return;
				}
			} else if (_1 === (4)) {
				if ((tagAtom === 152836) || (tagAtom === 66818)) {
					p.oe = $subslice(p.oe, 0, (i + 1 >> 0));
					return;
				}
			} else if (_1 === (5)) {
				if ((tagAtom === 152836) || (tagAtom === 11781) || (tagAtom === 35845) || (tagAtom === 185349)) {
					p.oe = $subslice(p.oe, 0, (i + 1 >> 0));
					return;
				}
			} else {
				$panic(new $String("unreachable"));
			}
			i = i - (1) >> 0;
		}
	};
	parser.prototype.clearStackToContext = function(s) { return this.$val.clearStackToContext(s); };
	parser.ptr.prototype.generateImpliedEndTags = function(exceptions) {
		var $ptr, _1, _i, _ref, except, exceptions, i, n, p, x;
		p = this;
		i = 0;
		i = p.oe.$length - 1 >> 0;
		loop:
		while (true) {
			if (!(i >= 0)) { break; }
			n = (x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (n.Type === 3) {
				_1 = n.DataAtom;
				if ((_1 === (157442)) || (_1 === (329986)) || (_1 === (4610)) || (_1 === (393222)) || (_1 === (62984)) || (_1 === (3073)) || (_1 === (116226)) || (_1 === (81666))) {
					_ref = exceptions;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						except = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (n.Data === except) {
							break loop;
						}
						_i++;
					}
					i = i - (1) >> 0;
					continue;
				}
			}
			break;
		}
		p.oe = $subslice(p.oe, 0, (i + 1 >> 0));
	};
	parser.prototype.generateImpliedEndTags = function(exceptions) { return this.$val.generateImpliedEndTags(exceptions); };
	parser.ptr.prototype.addChild = function(n) {
		var $ptr, n, p;
		p = this;
		if (p.shouldFosterParent()) {
			p.fosterParent(n);
		} else {
			p.top().AppendChild(n);
		}
		if (n.Type === 3) {
			p.oe = $append(p.oe, n);
		}
	};
	parser.prototype.addChild = function(n) { return this.$val.addChild(n); };
	parser.ptr.prototype.shouldFosterParent = function() {
		var $ptr, _1, p;
		p = this;
		if (p.fosterParenting) {
			_1 = p.top().DataAtom;
			if ((_1 === (273669)) || (_1 === (11781)) || (_1 === (35845)) || (_1 === (185349)) || (_1 === (66818))) {
				return true;
			}
		}
		return false;
	};
	parser.prototype.shouldFosterParent = function() { return this.$val.shouldFosterParent(); };
	parser.ptr.prototype.fosterParent = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, i, n, p, parent, prev, table, x, x$1, x$2, x$3, x$4;
		p = this;
		_tmp = ptrType.nil;
		_tmp$1 = ptrType.nil;
		_tmp$2 = ptrType.nil;
		table = _tmp;
		parent = _tmp$1;
		prev = _tmp$2;
		i = 0;
		i = p.oe.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).DataAtom === 273669) {
				table = (x$1 = p.oe, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
				break;
			}
			i = i - (1) >> 0;
		}
		if (table === ptrType.nil) {
			parent = (x$2 = p.oe, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]));
		} else {
			parent = table.Parent;
		}
		if (parent === ptrType.nil) {
			parent = (x$3 = p.oe, x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4]));
		}
		if (!(table === ptrType.nil)) {
			prev = table.PrevSibling;
		} else {
			prev = parent.LastChild;
		}
		if (!(prev === ptrType.nil) && (prev.Type === 1) && (n.Type === 1)) {
			prev.Data = prev.Data + (n.Data);
			return;
		}
		parent.InsertBefore(n, table);
	};
	parser.prototype.fosterParent = function(n) { return this.$val.fosterParent(n); };
	parser.ptr.prototype.addText = function(text) {
		var $ptr, n, p, t, text;
		p = this;
		if (text === "") {
			return;
		}
		if (p.shouldFosterParent()) {
			p.fosterParent(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 1, 0, text, "", sliceType$1.nil));
			return;
		}
		t = p.top();
		n = t.LastChild;
		if (!(n === ptrType.nil) && (n.Type === 1)) {
			n.Data = n.Data + (text);
			return;
		}
		p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 1, 0, text, "", sliceType$1.nil));
	};
	parser.prototype.addText = function(text) { return this.$val.addText(text); };
	parser.ptr.prototype.addElement = function() {
		var $ptr, p;
		p = this;
		p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 3, p.tok.DataAtom, p.tok.Data, "", p.tok.Attr));
	};
	parser.prototype.addElement = function() { return this.$val.addElement(); };
	parser.ptr.prototype.addFormattingElement = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, attr, i, identicalElements, n, p, t0, t1, tagAtom, x;
		p = this;
		_tmp = p.tok.DataAtom;
		_tmp$1 = p.tok.Attr;
		tagAtom = _tmp;
		attr = _tmp$1;
		p.addElement();
		identicalElements = 0;
		i = p.afe.$length - 1 >> 0;
		findIdenticalElements:
		while (true) {
			if (!(i >= 0)) { break; }
			n = (x = p.afe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (n.Type === 6) {
				break;
			}
			if (!((n.Type === 3))) {
				i = i - (1) >> 0;
				continue;
			}
			if (!(n.Namespace === "")) {
				i = i - (1) >> 0;
				continue;
			}
			if (!((n.DataAtom === tagAtom))) {
				i = i - (1) >> 0;
				continue;
			}
			if (!((n.Attr.$length === attr.$length))) {
				i = i - (1) >> 0;
				continue;
			}
			_ref = n.Attr;
			_i = 0;
			compareAttributes:
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				t0 = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
				_ref$1 = attr;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					t1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Attribute);
					if (t0.Key === t1.Key && t0.Namespace === t1.Namespace && t0.Val === t1.Val) {
						_i++;
						continue compareAttributes;
					}
					_i$1++;
				}
				i = i - (1) >> 0;
				continue findIdenticalElements;
			}
			identicalElements = identicalElements + (1) >> 0;
			if (identicalElements >= 3) {
				(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).remove(n);
			}
			i = i - (1) >> 0;
		}
		p.afe = $append(p.afe, p.top());
	};
	parser.prototype.addFormattingElement = function() { return this.$val.addFormattingElement(); };
	parser.ptr.prototype.clearActiveFormattingElements = function() {
		var $ptr, n, p;
		p = this;
		while (true) {
			n = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).pop();
			if ((p.afe.$length === 0) || (n.Type === 6)) {
				return;
			}
		}
	};
	parser.prototype.clearActiveFormattingElements = function() { return this.$val.clearActiveFormattingElements(); };
	parser.ptr.prototype.reconstructActiveFormattingElements = function() {
		var $ptr, clone, i, n, p, x, x$1, x$2;
		p = this;
		n = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).top();
		if (n === ptrType.nil) {
			return;
		}
		if ((n.Type === 6) || !(((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(n) === -1))) {
			return;
		}
		i = p.afe.$length - 1 >> 0;
		while (true) {
			if (!(!((n.Type === 6)) && ((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(n) === -1))) { break; }
			if (i === 0) {
				i = -1;
				break;
			}
			i = i - (1) >> 0;
			n = (x = p.afe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		while (true) {
			i = i + (1) >> 0;
			clone = (x$1 = p.afe, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).clone();
			p.addChild(clone);
			(x$2 = p.afe, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i] = clone));
			if (i === (p.afe.$length - 1 >> 0)) {
				break;
			}
		}
	};
	parser.prototype.reconstructActiveFormattingElements = function() { return this.$val.reconstructActiveFormattingElements(); };
	parser.ptr.prototype.acknowledgeSelfClosingTag = function() {
		var $ptr, p;
		p = this;
		p.hasSelfClosingToken = false;
	};
	parser.prototype.acknowledgeSelfClosingTag = function() { return this.$val.acknowledgeSelfClosingTag(); };
	parser.ptr.prototype.setOriginalIM = function() {
		var $ptr, p;
		p = this;
		if (!(p.originalIM === $throwNilPointerError)) {
			$panic(new $String("html: bad parser state: originalIM was set twice"));
		}
		p.originalIM = p.im;
	};
	parser.prototype.setOriginalIM = function() { return this.$val.setOriginalIM(); };
	parser.ptr.prototype.resetInsertionMode = function() {
		var $ptr, _1, i, n, p, x;
		p = this;
		i = p.oe.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			n = (x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if ((i === 0) && !(p.context === ptrType.nil)) {
				n = p.context;
			}
			_1 = n.DataAtom;
			if (_1 === (358918)) {
				p.im = inSelectIM;
			} else if ((_1 === (18178)) || (_1 === (142850))) {
				p.im = inCellIM;
			} else if (_1 === (66818)) {
				p.im = inRowIM;
			} else if ((_1 === (11781)) || (_1 === (185349)) || (_1 === (35845))) {
				p.im = inTableBodyIM;
			} else if (_1 === (113415)) {
				p.im = inCaptionIM;
			} else if (_1 === (86024)) {
				p.im = inColumnGroupIM;
			} else if (_1 === (273669)) {
				p.im = inTableIM;
			} else if (_1 === (185604)) {
				p.im = inBodyIM;
			} else if (_1 === (12036)) {
				p.im = inBodyIM;
			} else if (_1 === (39432)) {
				p.im = inFramesetIM;
			} else if (_1 === (152836)) {
				p.im = beforeHeadIM;
			} else {
				i = i - (1) >> 0;
				continue;
			}
			return;
		}
		p.im = inBodyIM;
	};
	parser.prototype.resetInsertionMode = function() { return this.$val.resetInsertionMode(); };
	beforeHeadIM = function(p) {
		var $ptr, _1, _2, _3, _r, _r$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (5)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				p.tok.Data = _r;
				if (p.tok.Data.length === 0) {
					$s = -1; return true;
					return true;
				}
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 3:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (185604)) { $s = 10; continue; }
					/* */ if (_2 === (152836)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_2 === (185604)) { */ case 10:
						p.addElement();
						p.head = p.top();
						p.im = inHeadIM;
						$s = -1; return true;
						return true;
					/* } else if (_2 === (152836)) { */ case 11:
						_r$1 = inBodyIM(p); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } */ case 12:
				case 9:
				$s = 7; continue;
			/* } else if (_1 === (3)) { */ case 4:
					_3 = p.tok.DataAtom;
					/* */ if ((_3 === (185604)) || (_3 === (12036)) || (_3 === (152836)) || (_3 === (514))) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ((_3 === (185604)) || (_3 === (12036)) || (_3 === (152836)) || (_3 === (514))) { */ case 15:
						$r = p.parseImpliedToken(2, 185604, new atom.Atom(185604).String()); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return false;
						return false;
					/* } else { */ case 16:
						$s = -1; return true;
						return true;
					/* } */ case 17:
				case 14:
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 5:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 6:
				$s = -1; return true;
				return true;
			/* } */ case 7:
		case 1:
		$r = p.parseImpliedToken(2, 185604, new atom.Atom(185604).String()); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: beforeHeadIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	inHeadIM = function(p) {
		var $ptr, _1, _2, _3, _r, _r$1, n, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; n = $f.n; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (5)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				if (s.length < p.tok.Data.length) {
					p.addText($substring(p.tok.Data, 0, (p.tok.Data.length - s.length >> 0)));
					if (s === "") {
						$s = -1; return true;
						return true;
					}
					p.tok.Data = s;
				}
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 3:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (152836)) { $s = 10; continue; }
					/* */ if ((_2 === (54788)) || (_2 === (54792)) || (_2 === (71687)) || (_2 === (95495)) || (_2 === (75780)) || (_2 === (285956))) { $s = 11; continue; }
					/* */ if ((_2 === (250886)) || (_2 === (41221)) || (_2 === (250376)) || (_2 === (38920)) || (_2 === (397573))) { $s = 12; continue; }
					/* */ if (_2 === (185604)) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (_2 === (152836)) { */ case 10:
						_r$1 = inBodyIM(p); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if ((_2 === (54788)) || (_2 === (54792)) || (_2 === (71687)) || (_2 === (95495)) || (_2 === (75780)) || (_2 === (285956))) { */ case 11:
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						$s = -1; return true;
						return true;
					/* } else if ((_2 === (250886)) || (_2 === (41221)) || (_2 === (250376)) || (_2 === (38920)) || (_2 === (397573))) { */ case 12:
						p.addElement();
						p.setOriginalIM();
						p.im = textIM;
						$s = -1; return true;
						return true;
					/* } else if (_2 === (185604)) { */ case 13:
						$s = -1; return true;
						return true;
					/* } */ case 14:
				case 9:
				$s = 7; continue;
			/* } else if (_1 === (3)) { */ case 4:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (185604)) { $s = 17; continue; }
					/* */ if ((_3 === (12036)) || (_3 === (152836)) || (_3 === (514))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (_3 === (185604)) { */ case 17:
						n = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						if (!((n.DataAtom === 185604))) {
							$panic(new $String("html: bad parser state: <head> element not found, in the in-head insertion mode"));
						}
						p.im = afterHeadIM;
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (12036)) || (_3 === (152836)) || (_3 === (514))) { */ case 18:
						$r = p.parseImpliedToken(3, 185604, new atom.Atom(185604).String()); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return false;
						return false;
					/* } else { */ case 19:
						$s = -1; return true;
						return true;
					/* } */ case 20:
				case 16:
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 5:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 6:
				$s = -1; return true;
				return true;
			/* } */ case 7:
		case 1:
		$r = p.parseImpliedToken(3, 185604, new atom.Atom(185604).String()); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inHeadIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	afterHeadIM = function(p) {
		var $ptr, _1, _2, _3, _r, _r$1, _r$2, p, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (5)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				if (s.length < p.tok.Data.length) {
					p.addText($substring(p.tok.Data, 0, (p.tok.Data.length - s.length >> 0)));
					if (s === "") {
						$s = -1; return true;
						return true;
					}
					p.tok.Data = s;
				}
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 3:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (152836)) { $s = 10; continue; }
					/* */ if (_2 === (12036)) { $s = 11; continue; }
					/* */ if (_2 === (39432)) { $s = 12; continue; }
					/* */ if ((_2 === (54788)) || (_2 === (54792)) || (_2 === (71687)) || (_2 === (75780)) || (_2 === (285956)) || (_2 === (38920)) || (_2 === (250886)) || (_2 === (397573)) || (_2 === (41221))) { $s = 13; continue; }
					/* */ if (_2 === (185604)) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_2 === (152836)) { */ case 10:
						_r$1 = inBodyIM(p); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_2 === (12036)) { */ case 11:
						p.addElement();
						p.framesetOK = false;
						p.im = inBodyIM;
						$s = -1; return true;
						return true;
					/* } else if (_2 === (39432)) { */ case 12:
						p.addElement();
						p.im = inFramesetIM;
						$s = -1; return true;
						return true;
					/* } else if ((_2 === (54788)) || (_2 === (54792)) || (_2 === (71687)) || (_2 === (75780)) || (_2 === (285956)) || (_2 === (38920)) || (_2 === (250886)) || (_2 === (397573)) || (_2 === (41221))) { */ case 13:
						p.oe = $append(p.oe, p.head);
						$deferred.push([$methodVal((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))), "remove"), [p.head]]);
						_r$2 = inHeadIM(p); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
						return _r$2;
					/* } else if (_2 === (185604)) { */ case 14:
						$s = -1; return true;
						return true;
					/* } */ case 15:
				case 9:
				$s = 7; continue;
			/* } else if (_1 === (3)) { */ case 4:
				_3 = p.tok.DataAtom;
				if ((_3 === (12036)) || (_3 === (152836)) || (_3 === (514))) {
				} else {
					$s = -1; return true;
					return true;
				}
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 5:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 6:
				$s = -1; return true;
				return true;
			/* } */ case 7:
		case 1:
		$r = p.parseImpliedToken(2, 12036, new atom.Atom(12036).String()); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.framesetOK = true;
		$s = -1; return false;
		return false;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: afterHeadIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	copyAttributes = function(dst, src) {
		var $ptr, _entry, _i, _i$1, _key, _key$1, _ref, _ref$1, _tuple, attr, dst, ok, src, t, t$1;
		src = $clone(src, Token);
		if (src.Attr.$length === 0) {
			return;
		}
		attr = $makeMap($String.keyFor, []);
		_ref = dst.Attr;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
			_key = t.Key; (attr || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: t.Val };
			_i++;
		}
		_ref$1 = src.Attr;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			t$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Attribute);
			_tuple = (_entry = attr[$String.keyFor(t$1.Key)], _entry !== undefined ? [_entry.v, true] : ["", false]);
			ok = _tuple[1];
			if (!ok) {
				dst.Attr = $append(dst.Attr, t$1);
				_key$1 = t$1.Key; (attr || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: t$1.Val };
			}
			_i$1++;
		}
	};
	inBodyIM = function(p) {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _8, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _v, action, attr, body, body$1, d, i, i$1, i$2, i$3, n, n$1, n$2, node, node$1, node$2, p, prompt, t, t$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _8 = $f._8; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; action = $f.action; attr = $f.attr; body = $f.body; body$1 = $f.body$1; d = $f.d; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; node = $f.node; node$1 = $f.node$1; node$2 = $f.node$2; p = $f.p; prompt = $f.prompt; t = $f.t; t$1 = $f.t$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (5)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (1)) { */ case 2:
				d = p.tok.Data;
				n = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top();
				_2 = n.DataAtom;
				if ((_2 === (155139)) || (_2 === (282119))) {
					if (n.FirstChild === ptrType.nil) {
						if (!(d === "") && (d.charCodeAt(0) === 13)) {
							d = $substring(d, 1);
						}
						if (!(d === "") && (d.charCodeAt(0) === 10)) {
							d = $substring(d, 1);
						}
					}
				}
				d = strings.Replace(d, "\x00", "", -1);
				if (d === "") {
					$s = -1; return true;
					return true;
				}
				p.reconstructActiveFormattingElements();
				p.addText(d);
				if (!(p.framesetOK)) { _v = false; $s = 9; continue s; }
				_r = strings.TrimLeft(d, " \t\r\n\f"); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !(_r === ""); case 9:
				/* */ if (_v) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_v) { */ case 7:
					p.framesetOK = false;
				/* } */ case 8:
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 3:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (152836)) { $s = 12; continue; }
					/* */ if ((_3 === (54788)) || (_3 === (54792)) || (_3 === (71687)) || (_3 === (95495)) || (_3 === (75780)) || (_3 === (285956)) || (_3 === (38920)) || (_3 === (250886)) || (_3 === (397573)) || (_3 === (41221))) { $s = 13; continue; }
					/* */ if (_3 === (12036)) { $s = 14; continue; }
					/* */ if (_3 === (39432)) { $s = 15; continue; }
					/* */ if ((_3 === (324359)) || (_3 === (231431)) || (_3 === (33541)) || (_3 === (76810)) || (_3 === (374022)) || (_3 === (18439)) || (_3 === (26883)) || (_3 === (70403)) || (_3 === (73218)) || (_3 === (110600)) || (_3 === (112650)) || (_3 === (117766)) || (_3 === (36102)) || (_3 === (185606)) || (_3 === (153862)) || (_3 === (210948)) || (_3 === (15875)) || (_3 === (51458)) || (_3 === (3073)) || (_3 === (320007)) || (_3 === (398855)) || (_3 === (35330))) { $s = 16; continue; }
					/* */ if ((_3 === (159234)) || (_3 === (168962)) || (_3 === (173826)) || (_3 === (190722)) || (_3 === (193282)) || (_3 === (330498))) { $s = 17; continue; }
					/* */ if ((_3 === (155139)) || (_3 === (282119))) { $s = 18; continue; }
					/* */ if (_3 === (127492)) { $s = 19; continue; }
					/* */ if (_3 === (4610)) { $s = 20; continue; }
					/* */ if ((_3 === (157442)) || (_3 === (329986))) { $s = 21; continue; }
					/* */ if (_3 === (64777)) { $s = 22; continue; }
					/* */ if (_3 === (79366)) { $s = 23; continue; }
					/* */ if (_3 === (1)) { $s = 24; continue; }
					/* */ if ((_3 === (257)) || (_3 === (74755)) || (_3 === (84228)) || (_3 === (25858)) || (_3 === (55812)) || (_3 === (1537)) || (_3 === (11265)) || (_3 === (102149)) || (_3 === (340742)) || (_3 === (350470)) || (_3 === (21250)) || (_3 === (2817))) { $s = 25; continue; }
					/* */ if (_3 === (22276)) { $s = 26; continue; }
					/* */ if ((_3 === (176902)) || (_3 === (183047)) || (_3 === (125958))) { $s = 27; continue; }
					/* */ if (_3 === (273669)) { $s = 28; continue; }
					/* */ if ((_3 === (195076)) || (_3 === (514)) || (_3 === (25861)) || (_3 === (172291)) || (_3 === (256005)) || (_3 === (14598)) || (_3 === (73987))) { $s = 29; continue; }
					/* */ if ((_3 === (3077)) || (_3 === (109062)) || (_3 === (66821))) { $s = 30; continue; }
					/* */ if (_3 === (159746)) { $s = 31; continue; }
					/* */ if (_3 === (171013)) { $s = 32; continue; }
					/* */ if (_3 === (174343)) { $s = 33; continue; }
					/* */ if (_3 === (194056)) { $s = 34; continue; }
					/* */ if (_3 === (49411)) { $s = 35; continue; }
					/* */ if (_3 === (169478)) { $s = 36; continue; }
					/* */ if ((_3 === (25351)) || (_3 === (250376))) { $s = 37; continue; }
					/* */ if (_3 === (358918)) { $s = 38; continue; }
					/* */ if ((_3 === (62984)) || (_3 === (393222))) { $s = 39; continue; }
					/* */ if ((_3 === (116226)) || (_3 === (81666))) { $s = 40; continue; }
					/* */ if ((_3 === (184836)) || (_3 === (401411))) { $s = 41; continue; }
					/* */ if ((_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (39429)) || (_3 === (185604)) || (_3 === (11781)) || (_3 === (18178)) || (_3 === (35845)) || (_3 === (142850)) || (_3 === (185349)) || (_3 === (66818))) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (_3 === (152836)) { */ case 12:
						copyAttributes((x = p.oe, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), p.tok);
						$s = 44; continue;
					/* } else if ((_3 === (54788)) || (_3 === (54792)) || (_3 === (71687)) || (_3 === (95495)) || (_3 === (75780)) || (_3 === (285956)) || (_3 === (38920)) || (_3 === (250886)) || (_3 === (397573)) || (_3 === (41221))) { */ case 13:
						_r$1 = inHeadIM(p); /* */ $s = 45; case 45: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_3 === (12036)) { */ case 14:
						if (p.oe.$length >= 2) {
							body = (x$1 = p.oe, (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1]));
							if ((body.Type === 3) && (body.DataAtom === 12036)) {
								p.framesetOK = false;
								copyAttributes(body, p.tok);
							}
						}
						$s = 44; continue;
					/* } else if (_3 === (39432)) { */ case 15:
						if (!p.framesetOK || p.oe.$length < 2 || !(((x$2 = p.oe, (1 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1])).DataAtom === 12036))) {
							$s = -1; return true;
							return true;
						}
						body$1 = (x$3 = p.oe, (1 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1]));
						if (!(body$1.Parent === ptrType.nil)) {
							body$1.Parent.RemoveChild(body$1);
						}
						p.oe = $subslice(p.oe, 0, 1);
						p.addElement();
						p.im = inFramesetIM;
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (324359)) || (_3 === (231431)) || (_3 === (33541)) || (_3 === (76810)) || (_3 === (374022)) || (_3 === (18439)) || (_3 === (26883)) || (_3 === (70403)) || (_3 === (73218)) || (_3 === (110600)) || (_3 === (112650)) || (_3 === (117766)) || (_3 === (36102)) || (_3 === (185606)) || (_3 === (153862)) || (_3 === (210948)) || (_3 === (15875)) || (_3 === (51458)) || (_3 === (3073)) || (_3 === (320007)) || (_3 === (398855)) || (_3 === (35330))) { */ case 16:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						$s = 44; continue;
					/* } else if ((_3 === (159234)) || (_3 === (168962)) || (_3 === (173826)) || (_3 === (190722)) || (_3 === (193282)) || (_3 === (330498))) { */ case 17:
						p.popUntil(2, new sliceType$2([3073]));
						n$1 = p.top();
						_4 = n$1.DataAtom;
						if ((_4 === (159234)) || (_4 === (168962)) || (_4 === (173826)) || (_4 === (190722)) || (_4 === (193282)) || (_4 === (330498))) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						}
						p.addElement();
						$s = 44; continue;
					/* } else if ((_3 === (155139)) || (_3 === (282119))) { */ case 18:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						p.framesetOK = false;
						$s = 44; continue;
					/* } else if (_3 === (127492)) { */ case 19:
						if (p.form === ptrType.nil) {
							p.popUntil(2, new sliceType$2([3073]));
							p.addElement();
							p.form = p.top();
						}
						$s = 44; continue;
					/* } else if (_3 === (4610)) { */ case 20:
						p.framesetOK = false;
						i = p.oe.$length - 1 >> 0;
						/* while (true) { */ case 46:
							/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 47; continue; }
							node = (x$4 = p.oe, ((i < 0 || i >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i]));
							_5 = node.DataAtom;
							if (_5 === (4610)) {
								p.oe = $subslice(p.oe, 0, i);
							} else if ((_5 === (324359)) || (_5 === (70403)) || (_5 === (3073))) {
								i = i - (1) >> 0;
								/* continue; */ $s = 46; continue;
							} else if (!isSpecialElement(node)) {
								i = i - (1) >> 0;
								/* continue; */ $s = 46; continue;
							}
							/* break; */ $s = 47; continue;
						/* } */ $s = 46; continue; case 47:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						$s = 44; continue;
					/* } else if ((_3 === (157442)) || (_3 === (329986))) { */ case 21:
						p.framesetOK = false;
						i$1 = p.oe.$length - 1 >> 0;
						/* while (true) { */ case 48:
							/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 49; continue; }
							node$1 = (x$5 = p.oe, ((i$1 < 0 || i$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$1]));
							_6 = node$1.DataAtom;
							if ((_6 === (157442)) || (_6 === (329986))) {
								p.oe = $subslice(p.oe, 0, i$1);
							} else if ((_6 === (324359)) || (_6 === (70403)) || (_6 === (3073))) {
								i$1 = i$1 - (1) >> 0;
								/* continue; */ $s = 48; continue;
							} else if (!isSpecialElement(node$1)) {
								i$1 = i$1 - (1) >> 0;
								/* continue; */ $s = 48; continue;
							}
							/* break; */ $s = 49; continue;
						/* } */ $s = 48; continue; case 49:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						$s = 44; continue;
					/* } else if (_3 === (64777)) { */ case 22:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						$s = 44; continue;
					/* } else if (_3 === (79366)) { */ case 23:
						p.popUntil(0, new sliceType$2([79366]));
						p.reconstructActiveFormattingElements();
						p.addElement();
						p.framesetOK = false;
						$s = 44; continue;
					/* } else if (_3 === (1)) { */ case 24:
						i$2 = p.afe.$length - 1 >> 0;
						while (true) {
							if (!(i$2 >= 0 && !(((x$6 = p.afe, ((i$2 < 0 || i$2 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i$2])).Type === 6)))) { break; }
							n$2 = (x$7 = p.afe, ((i$2 < 0 || i$2 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i$2]));
							if ((n$2.Type === 3) && (n$2.DataAtom === 1)) {
								p.inBodyEndTagFormatting(1);
								(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).remove(n$2);
								(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).remove(n$2);
								break;
							}
							i$2 = i$2 - (1) >> 0;
						}
						p.reconstructActiveFormattingElements();
						p.addFormattingElement();
						$s = 44; continue;
					/* } else if ((_3 === (257)) || (_3 === (74755)) || (_3 === (84228)) || (_3 === (25858)) || (_3 === (55812)) || (_3 === (1537)) || (_3 === (11265)) || (_3 === (102149)) || (_3 === (340742)) || (_3 === (350470)) || (_3 === (21250)) || (_3 === (2817))) { */ case 25:
						p.reconstructActiveFormattingElements();
						p.addFormattingElement();
						$s = 44; continue;
					/* } else if (_3 === (22276)) { */ case 26:
						p.reconstructActiveFormattingElements();
						if (p.elementInScope(0, new sliceType$2([22276]))) {
							p.inBodyEndTagFormatting(22276);
							p.reconstructActiveFormattingElements();
						}
						p.addFormattingElement();
						$s = 44; continue;
					/* } else if ((_3 === (176902)) || (_3 === (183047)) || (_3 === (125958))) { */ case 27:
						p.reconstructActiveFormattingElements();
						p.addElement();
						p.afe = $append(p.afe, scopeMarker);
						p.framesetOK = false;
						$s = 44; continue;
					/* } else if (_3 === (273669)) { */ case 28:
						if (!p.quirks) {
							p.popUntil(2, new sliceType$2([3073]));
						}
						p.addElement();
						p.framesetOK = false;
						p.im = inTableIM;
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (195076)) || (_3 === (514)) || (_3 === (25861)) || (_3 === (172291)) || (_3 === (256005)) || (_3 === (14598)) || (_3 === (73987))) { */ case 29:
						p.reconstructActiveFormattingElements();
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						/* */ if (p.tok.DataAtom === 256005) { $s = 50; continue; }
						/* */ $s = 51; continue;
						/* if (p.tok.DataAtom === 256005) { */ case 50:
							_ref = p.tok.Attr;
							_i = 0;
							/* while (true) { */ case 52:
								/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 53; continue; }
								t = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
								/* */ if (t.Key === "type") { $s = 54; continue; }
								/* */ $s = 55; continue;
								/* if (t.Key === "type") { */ case 54:
									_r$2 = strings.ToLower(t.Val); /* */ $s = 58; case 58: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
									/* */ if (_r$2 === "hidden") { $s = 56; continue; }
									/* */ $s = 57; continue;
									/* if (_r$2 === "hidden") { */ case 56:
										$s = -1; return true;
										return true;
									/* } */ case 57:
								/* } */ case 55:
								_i++;
							/* } */ $s = 52; continue; case 53:
						/* } */ case 51:
						p.framesetOK = false;
						$s = 44; continue;
					/* } else if ((_3 === (3077)) || (_3 === (109062)) || (_3 === (66821))) { */ case 30:
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						$s = 44; continue;
					/* } else if (_3 === (159746)) { */ case 31:
						p.popUntil(2, new sliceType$2([3073]));
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						p.framesetOK = false;
						$s = 44; continue;
					/* } else if (_3 === (171013)) { */ case 32:
						p.tok.DataAtom = 172291;
						p.tok.Data = new atom.Atom(172291).String();
						$s = -1; return false;
						return false;
					/* } else if (_3 === (174343)) { */ case 33:
						if (!(p.form === ptrType.nil)) {
							$s = -1; return true;
							return true;
						}
						action = "";
						prompt = "This is a searchable index. Enter search keywords: ";
						attr = new sliceType$1([new Attribute.ptr("", "name", "isindex")]);
						_ref$1 = p.tok.Attr;
						_i$1 = 0;
						while (true) {
							if (!(_i$1 < _ref$1.$length)) { break; }
							t$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Attribute);
							_7 = t$1.Key;
							if (_7 === ("action")) {
								action = t$1.Val;
							} else if (_7 === ("name")) {
							} else if (_7 === ("prompt")) {
								prompt = t$1.Val;
							} else {
								attr = $append(attr, t$1);
							}
							_i$1++;
						}
						p.acknowledgeSelfClosingTag();
						p.popUntil(2, new sliceType$2([3073]));
						$r = p.parseImpliedToken(2, 127492, new atom.Atom(127492).String()); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						if (!(action === "")) {
							p.form.Attr = new sliceType$1([new Attribute.ptr("", "action", action)]);
						}
						$r = p.parseImpliedToken(2, 159746, new atom.Atom(159746).String()); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = p.parseImpliedToken(2, 61445, new atom.Atom(61445).String()); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						p.addText(prompt);
						p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 3, 256005, new atom.Atom(256005).String(), "", attr));
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						$r = p.parseImpliedToken(3, 61445, new atom.Atom(61445).String()); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = p.parseImpliedToken(2, 159746, new atom.Atom(159746).String()); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = p.parseImpliedToken(3, 127492, new atom.Atom(127492).String()); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 44; continue;
					/* } else if (_3 === (194056)) { */ case 34:
						p.addElement();
						p.setOriginalIM();
						p.framesetOK = false;
						p.im = textIM;
						$s = 44; continue;
					/* } else if (_3 === (49411)) { */ case 35:
						p.popUntil(2, new sliceType$2([3073]));
						p.reconstructActiveFormattingElements();
						p.framesetOK = false;
						p.addElement();
						p.setOriginalIM();
						p.im = textIM;
						$s = 44; continue;
					/* } else if (_3 === (169478)) { */ case 36:
						p.framesetOK = false;
						p.addElement();
						p.setOriginalIM();
						p.im = textIM;
						$s = 44; continue;
					/* } else if ((_3 === (25351)) || (_3 === (250376))) { */ case 37:
						p.addElement();
						p.setOriginalIM();
						p.im = textIM;
						$s = 44; continue;
					/* } else if (_3 === (358918)) { */ case 38:
						p.reconstructActiveFormattingElements();
						p.addElement();
						p.framesetOK = false;
						p.im = inSelectIM;
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (62984)) || (_3 === (393222))) { */ case 39:
						if (p.top().DataAtom === 393222) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						}
						p.reconstructActiveFormattingElements();
						p.addElement();
						$s = 44; continue;
					/* } else if ((_3 === (116226)) || (_3 === (81666))) { */ case 40:
						if (p.elementInScope(0, new sliceType$2([44804]))) {
							p.generateImpliedEndTags(new sliceType([]));
						}
						p.addElement();
						$s = 44; continue;
					/* } else if ((_3 === (184836)) || (_3 === (401411))) { */ case 41:
						p.reconstructActiveFormattingElements();
						if (p.tok.DataAtom === 184836) {
							adjustAttributeNames(p.tok.Attr, mathMLAttributeAdjustments);
						} else {
							adjustAttributeNames(p.tok.Attr, svgAttributeAdjustments);
						}
						adjustForeignAttributes(p.tok.Attr);
						p.addElement();
						p.top().Namespace = p.tok.Data;
						if (p.hasSelfClosingToken) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
							p.acknowledgeSelfClosingTag();
						}
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (39429)) || (_3 === (185604)) || (_3 === (11781)) || (_3 === (18178)) || (_3 === (35845)) || (_3 === (142850)) || (_3 === (185349)) || (_3 === (66818))) { */ case 42:
						$s = 44; continue;
					/* } else { */ case 43:
						p.reconstructActiveFormattingElements();
						p.addElement();
					/* } */ case 44:
				case 11:
				$s = 6; continue;
			/* } else if (_1 === (3)) { */ case 4:
					_8 = p.tok.DataAtom;
					/* */ if (_8 === (12036)) { $s = 66; continue; }
					/* */ if (_8 === (152836)) { $s = 67; continue; }
					/* */ if ((_8 === (324359)) || (_8 === (231431)) || (_8 === (33541)) || (_8 === (76810)) || (_8 === (79366)) || (_8 === (374022)) || (_8 === (18439)) || (_8 === (26883)) || (_8 === (70403)) || (_8 === (73218)) || (_8 === (110600)) || (_8 === (112650)) || (_8 === (117766)) || (_8 === (36102)) || (_8 === (185606)) || (_8 === (153862)) || (_8 === (282119)) || (_8 === (210948)) || (_8 === (15875)) || (_8 === (51458)) || (_8 === (155139)) || (_8 === (320007)) || (_8 === (398855)) || (_8 === (35330))) { $s = 68; continue; }
					/* */ if (_8 === (127492)) { $s = 69; continue; }
					/* */ if (_8 === (3073)) { $s = 70; continue; }
					/* */ if (_8 === (4610)) { $s = 71; continue; }
					/* */ if ((_8 === (157442)) || (_8 === (329986))) { $s = 72; continue; }
					/* */ if ((_8 === (159234)) || (_8 === (168962)) || (_8 === (173826)) || (_8 === (190722)) || (_8 === (193282)) || (_8 === (330498))) { $s = 73; continue; }
					/* */ if ((_8 === (1)) || (_8 === (257)) || (_8 === (74755)) || (_8 === (84228)) || (_8 === (25858)) || (_8 === (55812)) || (_8 === (1537)) || (_8 === (22276)) || (_8 === (11265)) || (_8 === (102149)) || (_8 === (340742)) || (_8 === (350470)) || (_8 === (21250)) || (_8 === (2817))) { $s = 74; continue; }
					/* */ if ((_8 === (176902)) || (_8 === (183047)) || (_8 === (125958))) { $s = 75; continue; }
					/* */ if (_8 === (514)) { $s = 76; continue; }
					/* */ $s = 77; continue;
					/* if (_8 === (12036)) { */ case 66:
						if (p.elementInScope(0, new sliceType$2([12036]))) {
							p.im = afterBodyIM;
						}
						$s = 78; continue;
					/* } else if (_8 === (152836)) { */ case 67:
						/* */ if (p.elementInScope(0, new sliceType$2([12036]))) { $s = 79; continue; }
						/* */ $s = 80; continue;
						/* if (p.elementInScope(0, new sliceType$2([12036]))) { */ case 79:
							$r = p.parseImpliedToken(3, 12036, new atom.Atom(12036).String()); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return false;
							return false;
						/* } */ case 80:
						$s = -1; return true;
						return true;
					/* } else if ((_8 === (324359)) || (_8 === (231431)) || (_8 === (33541)) || (_8 === (76810)) || (_8 === (79366)) || (_8 === (374022)) || (_8 === (18439)) || (_8 === (26883)) || (_8 === (70403)) || (_8 === (73218)) || (_8 === (110600)) || (_8 === (112650)) || (_8 === (117766)) || (_8 === (36102)) || (_8 === (185606)) || (_8 === (153862)) || (_8 === (282119)) || (_8 === (210948)) || (_8 === (15875)) || (_8 === (51458)) || (_8 === (155139)) || (_8 === (320007)) || (_8 === (398855)) || (_8 === (35330))) { */ case 68:
						p.popUntil(0, new sliceType$2([p.tok.DataAtom]));
						$s = 78; continue;
					/* } else if (_8 === (127492)) { */ case 69:
						node$2 = p.form;
						p.form = ptrType.nil;
						i$3 = p.indexOfElementInScope(0, new sliceType$2([127492]));
						if (node$2 === ptrType.nil || (i$3 === -1) || !((x$8 = p.oe, ((i$3 < 0 || i$3 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i$3])) === node$2)) {
							$s = -1; return true;
							return true;
						}
						p.generateImpliedEndTags(new sliceType([]));
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).remove(node$2);
						$s = 78; continue;
					/* } else if (_8 === (3073)) { */ case 70:
						/* */ if (!p.elementInScope(2, new sliceType$2([3073]))) { $s = 82; continue; }
						/* */ $s = 83; continue;
						/* if (!p.elementInScope(2, new sliceType$2([3073]))) { */ case 82:
							$r = p.parseImpliedToken(2, 3073, new atom.Atom(3073).String()); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 83:
						p.popUntil(2, new sliceType$2([3073]));
						$s = 78; continue;
					/* } else if (_8 === (4610)) { */ case 71:
						p.popUntil(1, new sliceType$2([4610]));
						$s = 78; continue;
					/* } else if ((_8 === (157442)) || (_8 === (329986))) { */ case 72:
						p.popUntil(0, new sliceType$2([p.tok.DataAtom]));
						$s = 78; continue;
					/* } else if ((_8 === (159234)) || (_8 === (168962)) || (_8 === (173826)) || (_8 === (190722)) || (_8 === (193282)) || (_8 === (330498))) { */ case 73:
						p.popUntil(0, new sliceType$2([159234, 168962, 173826, 190722, 193282, 330498]));
						$s = 78; continue;
					/* } else if ((_8 === (1)) || (_8 === (257)) || (_8 === (74755)) || (_8 === (84228)) || (_8 === (25858)) || (_8 === (55812)) || (_8 === (1537)) || (_8 === (22276)) || (_8 === (11265)) || (_8 === (102149)) || (_8 === (340742)) || (_8 === (350470)) || (_8 === (21250)) || (_8 === (2817))) { */ case 74:
						p.inBodyEndTagFormatting(p.tok.DataAtom);
						$s = 78; continue;
					/* } else if ((_8 === (176902)) || (_8 === (183047)) || (_8 === (125958))) { */ case 75:
						if (p.popUntil(0, new sliceType$2([p.tok.DataAtom]))) {
							p.clearActiveFormattingElements();
						}
						$s = 78; continue;
					/* } else if (_8 === (514)) { */ case 76:
						p.tok.Type = 2;
						$s = -1; return false;
						return false;
					/* } else { */ case 77:
						p.inBodyEndTagOther(p.tok.DataAtom);
					/* } */ case 78:
				case 65:
				$s = 6; continue;
			/* } else if (_1 === (5)) { */ case 5:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
			/* } */ case 6:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inBodyIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._8 = _8; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.action = action; $f.attr = attr; $f.body = body; $f.body$1 = body$1; $f.d = d; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.node = node; $f.node$1 = node$1; $f.node$2 = node$2; $f.p = p; $f.prompt = prompt; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.inBodyEndTagFormatting = function(tagAtom) {
		var $ptr, _1, _i, _ref, bookmark, clone, clone$1, commonAncestor, e, e$1, feIndex, formattingElement, furthestBlock, i, j, j$1, lastNode, node, oldLoc, p, tagAtom, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = this;
		i = 0;
		while (true) {
			if (!(i < 8)) { break; }
			formattingElement = ptrType.nil;
			j = p.afe.$length - 1 >> 0;
			while (true) {
				if (!(j >= 0)) { break; }
				if ((x = p.afe, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j])).Type === 6) {
					break;
				}
				if ((x$1 = p.afe, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j])).DataAtom === tagAtom) {
					formattingElement = (x$2 = p.afe, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j]));
					break;
				}
				j = j - (1) >> 0;
			}
			if (formattingElement === ptrType.nil) {
				p.inBodyEndTagOther(tagAtom);
				return;
			}
			feIndex = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(formattingElement);
			if (feIndex === -1) {
				(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).remove(formattingElement);
				return;
			}
			if (!p.elementInScope(0, new sliceType$2([tagAtom]))) {
				return;
			}
			furthestBlock = ptrType.nil;
			_ref = $subslice(p.oe, feIndex);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (isSpecialElement(e)) {
					furthestBlock = e;
					break;
				}
				_i++;
			}
			if (furthestBlock === ptrType.nil) {
				e$1 = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
				while (true) {
					if (!(!(e$1 === formattingElement))) { break; }
					e$1 = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
				}
				(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).remove(e$1);
				return;
			}
			commonAncestor = (x$3 = p.oe, x$4 = feIndex - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4]));
			bookmark = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).index(formattingElement);
			lastNode = furthestBlock;
			node = furthestBlock;
			x$5 = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(node);
			j$1 = 0;
			while (true) {
				if (!(j$1 < 3)) { break; }
				x$5 = x$5 - (1) >> 0;
				node = (x$6 = p.oe, ((x$5 < 0 || x$5 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$5]));
				if ((p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).index(node) === -1) {
					(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).remove(node);
					j$1 = j$1 + (1) >> 0;
					continue;
				}
				if (node === formattingElement) {
					break;
				}
				clone = node.clone();
				(x$7 = p.afe, x$8 = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).index(node), ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8] = clone));
				(x$9 = p.oe, x$10 = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(node), ((x$10 < 0 || x$10 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + x$10] = clone));
				node = clone;
				if (lastNode === furthestBlock) {
					bookmark = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).index(node) + 1 >> 0;
				}
				if (!(lastNode.Parent === ptrType.nil)) {
					lastNode.Parent.RemoveChild(lastNode);
				}
				node.AppendChild(lastNode);
				lastNode = node;
				j$1 = j$1 + (1) >> 0;
			}
			if (!(lastNode.Parent === ptrType.nil)) {
				lastNode.Parent.RemoveChild(lastNode);
			}
			_1 = commonAncestor.DataAtom;
			if ((_1 === (273669)) || (_1 === (11781)) || (_1 === (35845)) || (_1 === (185349)) || (_1 === (66818))) {
				p.fosterParent(lastNode);
			} else {
				commonAncestor.AppendChild(lastNode);
			}
			clone$1 = formattingElement.clone();
			reparentChildren(clone$1, furthestBlock);
			furthestBlock.AppendChild(clone$1);
			oldLoc = (p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).index(formattingElement);
			if (!((oldLoc === -1)) && oldLoc < bookmark) {
				bookmark = bookmark - (1) >> 0;
			}
			(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).remove(formattingElement);
			(p.$ptr_afe || (p.$ptr_afe = new ptrType$1(function() { return this.$target.afe; }, function($v) { this.$target.afe = $v; }, p))).insert(bookmark, clone$1);
			(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).remove(formattingElement);
			(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).insert((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).index(furthestBlock) + 1 >> 0, clone$1);
			i = i + (1) >> 0;
		}
	};
	parser.prototype.inBodyEndTagFormatting = function(tagAtom) { return this.$val.inBodyEndTagFormatting(tagAtom); };
	parser.ptr.prototype.inBodyEndTagOther = function(tagAtom) {
		var $ptr, i, p, tagAtom, x, x$1;
		p = this;
		i = p.oe.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).DataAtom === tagAtom) {
				p.oe = $subslice(p.oe, 0, i);
				break;
			}
			if (isSpecialElement((x$1 = p.oe, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])))) {
				break;
			}
			i = i - (1) >> 0;
		}
	};
	parser.prototype.inBodyEndTagOther = function(tagAtom) { return this.$val.inBodyEndTagOther(tagAtom); };
	textIM = function(p) {
		var $ptr, _1, d, n, p;
		_1 = p.tok.Type;
		if (_1 === (0)) {
			(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
		} else if (_1 === (1)) {
			d = p.tok.Data;
			n = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top();
			if ((n.DataAtom === 194056) && n.FirstChild === ptrType.nil) {
				if (!(d === "") && (d.charCodeAt(0) === 13)) {
					d = $substring(d, 1);
				}
				if (!(d === "") && (d.charCodeAt(0) === 10)) {
					d = $substring(d, 1);
				}
			}
			if (d === "") {
				return true;
			}
			p.addText(d);
			return true;
		} else if (_1 === (3)) {
			(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
		}
		p.im = p.originalIM;
		p.originalIM = $throwNilPointerError;
		return p.tok.Type === 3;
	};
	inTableIM = function(p) {
		var $ptr, _1, _2, _3, _4, _5, _i, _r, _r$1, _r$2, _r$3, _ref, _v, p, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; p = $f.p; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = [p];
			_1 = p[0].tok.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (5)) { $s = 6; continue; }
			/* */ if (_1 === (6)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return true;
				return true;
			/* } else if (_1 === (1)) { */ case 3:
				p[0].tok.Data = strings.Replace(p[0].tok.Data, "\x00", "", -1);
					_2 = (p[0].$ptr_oe || (p[0].$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p[0]))).top().DataAtom;
					/* */ if ((_2 === (273669)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818))) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((_2 === (273669)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818))) { */ case 10:
						_r = strings.Trim(p[0].tok.Data, " \t\r\n\f"); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						/* */ if (_r === "") { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (_r === "") { */ case 12:
							p[0].addText(p[0].tok.Data);
							$s = -1; return true;
							return true;
						/* } */ case 13:
					/* } */ case 11:
				case 9:
				$s = 8; continue;
			/* } else if (_1 === (2)) { */ case 4:
					_3 = p[0].tok.DataAtom;
					/* */ if (_3 === (113415)) { $s = 16; continue; }
					/* */ if (_3 === (86024)) { $s = 17; continue; }
					/* */ if (_3 === (86019)) { $s = 18; continue; }
					/* */ if ((_3 === (11781)) || (_3 === (35845)) || (_3 === (185349))) { $s = 19; continue; }
					/* */ if ((_3 === (18178)) || (_3 === (142850)) || (_3 === (66818))) { $s = 20; continue; }
					/* */ if (_3 === (273669)) { $s = 21; continue; }
					/* */ if ((_3 === (397573)) || (_3 === (250886))) { $s = 22; continue; }
					/* */ if (_3 === (256005)) { $s = 23; continue; }
					/* */ if (_3 === (127492)) { $s = 24; continue; }
					/* */ if (_3 === (358918)) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_3 === (113415)) { */ case 16:
						p[0].clearStackToContext(3);
						p[0].afe = $append(p[0].afe, scopeMarker);
						p[0].addElement();
						p[0].im = inCaptionIM;
						$s = -1; return true;
						return true;
					/* } else if (_3 === (86024)) { */ case 17:
						p[0].clearStackToContext(3);
						p[0].addElement();
						p[0].im = inColumnGroupIM;
						$s = -1; return true;
						return true;
					/* } else if (_3 === (86019)) { */ case 18:
						$r = p[0].parseImpliedToken(2, 86024, new atom.Atom(86024).String()); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return false;
						return false;
					/* } else if ((_3 === (11781)) || (_3 === (35845)) || (_3 === (185349))) { */ case 19:
						p[0].clearStackToContext(3);
						p[0].addElement();
						p[0].im = inTableBodyIM;
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (18178)) || (_3 === (142850)) || (_3 === (66818))) { */ case 20:
						$r = p[0].parseImpliedToken(2, 11781, new atom.Atom(11781).String()); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return false;
						return false;
					/* } else if (_3 === (273669)) { */ case 21:
						if (p[0].popUntil(3, new sliceType$2([273669]))) {
							p[0].resetInsertionMode();
							$s = -1; return false;
							return false;
						}
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (397573)) || (_3 === (250886))) { */ case 22:
						_r$1 = inHeadIM(p[0]); /* */ $s = 29; case 29: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_3 === (256005)) { */ case 23:
						_ref = p[0].tok.Attr;
						_i = 0;
						/* while (true) { */ case 30:
							/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 31; continue; }
							t = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
							if (!(t.Key === "type")) { _v = false; $s = 34; continue s; }
							_r$2 = strings.ToLower(t.Val); /* */ $s = 35; case 35: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_v = _r$2 === "hidden"; case 34:
							/* */ if (_v) { $s = 32; continue; }
							/* */ $s = 33; continue;
							/* if (_v) { */ case 32:
								p[0].addElement();
								(p[0].$ptr_oe || (p[0].$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p[0]))).pop();
								$s = -1; return true;
								return true;
							/* } */ case 33:
							_i++;
						/* } */ $s = 30; continue; case 31:
						$s = 26; continue;
					/* } else if (_3 === (127492)) { */ case 24:
						if (!(p[0].form === ptrType.nil)) {
							$s = -1; return true;
							return true;
						}
						p[0].addElement();
						p[0].form = (p[0].$ptr_oe || (p[0].$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p[0]))).pop();
						$s = 26; continue;
					/* } else if (_3 === (358918)) { */ case 25:
						p[0].reconstructActiveFormattingElements();
						_4 = p[0].top().DataAtom;
						if ((_4 === (273669)) || (_4 === (11781)) || (_4 === (35845)) || (_4 === (185349)) || (_4 === (66818))) {
							p[0].fosterParenting = true;
						}
						p[0].addElement();
						p[0].fosterParenting = false;
						p[0].framesetOK = false;
						p[0].im = inSelectInTableIM;
						$s = -1; return true;
						return true;
					/* } */ case 26:
				case 15:
				$s = 8; continue;
			/* } else if (_1 === (3)) { */ case 5:
				_5 = p[0].tok.DataAtom;
				if (_5 === (273669)) {
					if (p[0].popUntil(3, new sliceType$2([273669]))) {
						p[0].resetInsertionMode();
						$s = -1; return true;
						return true;
					}
					$s = -1; return true;
					return true;
				} else if ((_5 === (12036)) || (_5 === (113415)) || (_5 === (86019)) || (_5 === (86024)) || (_5 === (152836)) || (_5 === (11781)) || (_5 === (18178)) || (_5 === (35845)) || (_5 === (142850)) || (_5 === (185349)) || (_5 === (66818))) {
					$s = -1; return true;
					return true;
				}
				$s = 8; continue;
			/* } else if (_1 === (5)) { */ case 6:
				p[0].addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p[0].tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 7:
				$s = -1; return true;
				return true;
			/* } */ case 8:
		case 1:
		p[0].fosterParenting = true;
		$deferred.push([(function(p) { return function() {
			var $ptr;
			p[0].fosterParenting = false;
		}; })(p), []]);
		_r$3 = inBodyIM(p[0]); /* */ $s = 36; case 36: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		return _r$3;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: inTableIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.p = p; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	inCaptionIM = function(p) {
		var $ptr, _1, _2, _3, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_1 = p.tok.Type;
		if (_1 === (2)) {
			_2 = p.tok.DataAtom;
			if ((_2 === (113415)) || (_2 === (86019)) || (_2 === (86024)) || (_2 === (11781)) || (_2 === (18178)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818))) {
				if (p.popUntil(3, new sliceType$2([113415]))) {
					p.clearActiveFormattingElements();
					p.im = inTableIM;
					$s = -1; return false;
					return false;
				} else {
					$s = -1; return true;
					return true;
				}
			} else if (_2 === (358918)) {
				p.reconstructActiveFormattingElements();
				p.addElement();
				p.framesetOK = false;
				p.im = inSelectInTableIM;
				$s = -1; return true;
				return true;
			}
		} else if (_1 === (3)) {
			_3 = p.tok.DataAtom;
			if (_3 === (113415)) {
				if (p.popUntil(3, new sliceType$2([113415]))) {
					p.clearActiveFormattingElements();
					p.im = inTableIM;
				}
				$s = -1; return true;
				return true;
			} else if (_3 === (273669)) {
				if (p.popUntil(3, new sliceType$2([113415]))) {
					p.clearActiveFormattingElements();
					p.im = inTableIM;
					$s = -1; return false;
					return false;
				} else {
					$s = -1; return true;
					return true;
				}
			} else if ((_3 === (12036)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (152836)) || (_3 === (11781)) || (_3 === (18178)) || (_3 === (35845)) || (_3 === (142850)) || (_3 === (185349)) || (_3 === (66818))) {
				$s = -1; return true;
				return true;
			}
		}
		_r = inBodyIM(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inCaptionIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	inColumnGroupIM = function(p) {
		var $ptr, _1, _2, _3, _r, _r$1, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (5)) { $s = 3; continue; }
			/* */ if (_1 === (6)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ if (_1 === (3)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				if (s.length < p.tok.Data.length) {
					p.addText($substring(p.tok.Data, 0, (p.tok.Data.length - s.length >> 0)));
					if (s === "") {
						$s = -1; return true;
						return true;
					}
					p.tok.Data = s;
				}
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 3:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 4:
				$s = -1; return true;
				return true;
			/* } else if (_1 === (2)) { */ case 5:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (152836)) { $s = 10; continue; }
					/* */ if (_2 === (86019)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_2 === (152836)) { */ case 10:
						_r$1 = inBodyIM(p); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_2 === (86019)) { */ case 11:
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						$s = -1; return true;
						return true;
					/* } */ case 12:
				case 9:
				$s = 7; continue;
			/* } else if (_1 === (3)) { */ case 6:
				_3 = p.tok.DataAtom;
				if (_3 === (86024)) {
					if (!(((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top().DataAtom === 152836))) {
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.im = inTableIM;
					}
					$s = -1; return true;
					return true;
				} else if (_3 === (86019)) {
					$s = -1; return true;
					return true;
				}
			/* } */ case 7:
		case 1:
		if (!(((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top().DataAtom === 152836))) {
			(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
			p.im = inTableIM;
			$s = -1; return false;
			return false;
		}
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inColumnGroupIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	inTableBodyIM = function(p) {
		var $ptr, _1, _2, _3, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (2)) { $s = 2; continue; }
			/* */ if (_1 === (3)) { $s = 3; continue; }
			/* */ if (_1 === (5)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (2)) { */ case 2:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (66818)) { $s = 7; continue; }
					/* */ if ((_2 === (18178)) || (_2 === (142850))) { $s = 8; continue; }
					/* */ if ((_2 === (113415)) || (_2 === (86019)) || (_2 === (86024)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349))) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (_2 === (66818)) { */ case 7:
						p.clearStackToContext(5);
						p.addElement();
						p.im = inRowIM;
						$s = -1; return true;
						return true;
					/* } else if ((_2 === (18178)) || (_2 === (142850))) { */ case 8:
						$r = p.parseImpliedToken(2, 66818, new atom.Atom(66818).String()); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return false;
						return false;
					/* } else if ((_2 === (113415)) || (_2 === (86019)) || (_2 === (86024)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349))) { */ case 9:
						if (p.popUntil(3, new sliceType$2([11781, 185349, 35845]))) {
							p.im = inTableIM;
							$s = -1; return false;
							return false;
						}
						$s = -1; return true;
						return true;
					/* } */ case 10:
				case 6:
				$s = 5; continue;
			/* } else if (_1 === (3)) { */ case 3:
				_3 = p.tok.DataAtom;
				if ((_3 === (11781)) || (_3 === (35845)) || (_3 === (185349))) {
					if (p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) {
						p.clearStackToContext(5);
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.im = inTableIM;
					}
					$s = -1; return true;
					return true;
				} else if (_3 === (273669)) {
					if (p.popUntil(3, new sliceType$2([11781, 185349, 35845]))) {
						p.im = inTableIM;
						$s = -1; return false;
						return false;
					}
					$s = -1; return true;
					return true;
				} else if ((_3 === (12036)) || (_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (152836)) || (_3 === (18178)) || (_3 === (142850)) || (_3 === (66818))) {
					$s = -1; return true;
					return true;
				}
				$s = 5; continue;
			/* } else if (_1 === (5)) { */ case 4:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } */ case 5:
		case 1:
		_r = inTableIM(p); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inTableBodyIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	inRowIM = function(p) {
		var $ptr, _1, _2, _3, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (2)) { $s = 2; continue; }
			/* */ if (_1 === (3)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (2)) { */ case 2:
				_2 = p.tok.DataAtom;
				if ((_2 === (18178)) || (_2 === (142850))) {
					p.clearStackToContext(4);
					p.addElement();
					p.afe = $append(p.afe, scopeMarker);
					p.im = inCellIM;
					$s = -1; return true;
					return true;
				} else if ((_2 === (113415)) || (_2 === (86019)) || (_2 === (86024)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818))) {
					if (p.popUntil(3, new sliceType$2([66818]))) {
						p.im = inTableBodyIM;
						$s = -1; return false;
						return false;
					}
					$s = -1; return true;
					return true;
				}
				$s = 4; continue;
			/* } else if (_1 === (3)) { */ case 3:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (66818)) { $s = 6; continue; }
					/* */ if (_3 === (273669)) { $s = 7; continue; }
					/* */ if ((_3 === (11781)) || (_3 === (35845)) || (_3 === (185349))) { $s = 8; continue; }
					/* */ if ((_3 === (12036)) || (_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (152836)) || (_3 === (18178)) || (_3 === (142850))) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (_3 === (66818)) { */ case 6:
						if (p.popUntil(3, new sliceType$2([66818]))) {
							p.im = inTableBodyIM;
							$s = -1; return true;
							return true;
						}
						$s = -1; return true;
						return true;
					/* } else if (_3 === (273669)) { */ case 7:
						if (p.popUntil(3, new sliceType$2([66818]))) {
							p.im = inTableBodyIM;
							$s = -1; return false;
							return false;
						}
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (11781)) || (_3 === (35845)) || (_3 === (185349))) { */ case 8:
						/* */ if (p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) { */ case 11:
							$r = p.parseImpliedToken(3, 66818, new atom.Atom(66818).String()); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return false;
							return false;
						/* } */ case 12:
						$s = -1; return true;
						return true;
					/* } else if ((_3 === (12036)) || (_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (152836)) || (_3 === (18178)) || (_3 === (142850))) { */ case 9:
						$s = -1; return true;
						return true;
					/* } */ case 10:
				case 5:
			/* } */ case 4:
		case 1:
		_r = inTableIM(p); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inRowIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	inCellIM = function(p) {
		var $ptr, _1, _2, _3, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_1 = p.tok.Type;
		if (_1 === (2)) {
			_2 = p.tok.DataAtom;
			if ((_2 === (113415)) || (_2 === (86019)) || (_2 === (86024)) || (_2 === (11781)) || (_2 === (18178)) || (_2 === (35845)) || (_2 === (142850)) || (_2 === (185349)) || (_2 === (66818))) {
				if (p.popUntil(3, new sliceType$2([18178, 142850]))) {
					p.clearActiveFormattingElements();
					p.im = inRowIM;
					$s = -1; return false;
					return false;
				}
				$s = -1; return true;
				return true;
			} else if (_2 === (358918)) {
				p.reconstructActiveFormattingElements();
				p.addElement();
				p.framesetOK = false;
				p.im = inSelectInTableIM;
				$s = -1; return true;
				return true;
			}
		} else if (_1 === (3)) {
			_3 = p.tok.DataAtom;
			if ((_3 === (18178)) || (_3 === (142850))) {
				if (!p.popUntil(3, new sliceType$2([p.tok.DataAtom]))) {
					$s = -1; return true;
					return true;
				}
				p.clearActiveFormattingElements();
				p.im = inRowIM;
				$s = -1; return true;
				return true;
			} else if ((_3 === (12036)) || (_3 === (113415)) || (_3 === (86019)) || (_3 === (86024)) || (_3 === (152836))) {
				$s = -1; return true;
				return true;
			} else if ((_3 === (273669)) || (_3 === (11781)) || (_3 === (35845)) || (_3 === (185349)) || (_3 === (66818))) {
				if (!p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) {
					$s = -1; return true;
					return true;
				}
				p.popUntil(3, new sliceType$2([18178, 142850]));
				p.clearActiveFormattingElements();
				p.im = inRowIM;
				$s = -1; return false;
				return false;
			}
		}
		_r = inBodyIM(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inCellIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	inSelectIM = function(p) {
		var $ptr, _1, _2, _3, _r, _r$1, i, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (5)) { $s = 6; continue; }
			/* */ if (_1 === (6)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return true;
				return true;
			/* } else if (_1 === (1)) { */ case 3:
				p.addText(strings.Replace(p.tok.Data, "\x00", "", -1));
				$s = 8; continue;
			/* } else if (_1 === (2)) { */ case 4:
					_2 = p.tok.DataAtom;
					/* */ if (_2 === (152836)) { $s = 10; continue; }
					/* */ if (_2 === (393222)) { $s = 11; continue; }
					/* */ if (_2 === (62984)) { $s = 12; continue; }
					/* */ if (_2 === (358918)) { $s = 13; continue; }
					/* */ if ((_2 === (256005)) || (_2 === (14598)) || (_2 === (194056))) { $s = 14; continue; }
					/* */ if (_2 === (250886)) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_2 === (152836)) { */ case 10:
						_r = inBodyIM(p); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$s = -1; return _r;
						return _r;
					/* } else if (_2 === (393222)) { */ case 11:
						if (p.top().DataAtom === 393222) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						}
						p.addElement();
						$s = 16; continue;
					/* } else if (_2 === (62984)) { */ case 12:
						if (p.top().DataAtom === 393222) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						}
						if (p.top().DataAtom === 62984) {
							(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						}
						p.addElement();
						$s = 16; continue;
					/* } else if (_2 === (358918)) { */ case 13:
						p.tok.Type = 3;
						$s = -1; return false;
						return false;
					/* } else if ((_2 === (256005)) || (_2 === (14598)) || (_2 === (194056))) { */ case 14:
						/* */ if (p.elementInScope(6, new sliceType$2([358918]))) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (p.elementInScope(6, new sliceType$2([358918]))) { */ case 18:
							$r = p.parseImpliedToken(3, 358918, new atom.Atom(358918).String()); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return false;
							return false;
						/* } */ case 19:
						p.tokenizer.NextIsNotRawText();
						$s = -1; return true;
						return true;
					/* } else if (_2 === (250886)) { */ case 15:
						_r$1 = inHeadIM(p); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } */ case 16:
				case 9:
				$s = 8; continue;
			/* } else if (_1 === (3)) { */ case 5:
				_3 = p.tok.DataAtom;
				if (_3 === (393222)) {
					if (p.top().DataAtom === 393222) {
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
					}
				} else if (_3 === (62984)) {
					i = p.oe.$length - 1 >> 0;
					if ((x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).DataAtom === 393222) {
						i = i - (1) >> 0;
					}
					if ((x$1 = p.oe, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).DataAtom === 62984) {
						p.oe = $subslice(p.oe, 0, i);
					}
				} else if (_3 === (358918)) {
					if (p.popUntil(6, new sliceType$2([358918]))) {
						p.resetInsertionMode();
					}
				}
				$s = 8; continue;
			/* } else if (_1 === (5)) { */ case 6:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = 8; continue;
			/* } else if (_1 === (6)) { */ case 7:
				$s = -1; return true;
				return true;
			/* } */ case 8:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inSelectIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	inSelectInTableIM = function(p) {
		var $ptr, _1, _2, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if ((_1 === (2)) || (_1 === (3))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (2)) || (_1 === (3))) { */ case 2:
					_2 = p.tok.DataAtom;
					/* */ if ((_2 === (113415)) || (_2 === (273669)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818)) || (_2 === (18178)) || (_2 === (142850))) { $s = 5; continue; }
					/* */ $s = 6; continue;
					/* if ((_2 === (113415)) || (_2 === (273669)) || (_2 === (11781)) || (_2 === (35845)) || (_2 === (185349)) || (_2 === (66818)) || (_2 === (18178)) || (_2 === (142850))) { */ case 5:
						/* */ if ((p.tok.Type === 2) || p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) { $s = 7; continue; }
						/* */ $s = 8; continue;
						/* if ((p.tok.Type === 2) || p.elementInScope(3, new sliceType$2([p.tok.DataAtom]))) { */ case 7:
							$r = p.parseImpliedToken(3, 358918, new atom.Atom(358918).String()); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return false;
							return false;
						/* } else { */ case 8:
							$s = -1; return true;
							return true;
						/* } */ case 9:
					/* } */ case 6:
				case 4:
			/* } */ case 3:
		case 1:
		_r = inSelectIM(p); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inSelectInTableIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	afterBodyIM = function(p) {
		var $ptr, _1, _r, _r$1, _r$2, p, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (5)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return true;
				return true;
			/* } else if (_1 === (1)) { */ case 3:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				/* */ if (s.length === 0) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (s.length === 0) { */ case 9:
					_r$1 = inBodyIM(p); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
					return _r$1;
				/* } */ case 10:
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 4:
				/* */ if (p.tok.DataAtom === 152836) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.tok.DataAtom === 152836) { */ case 12:
					_r$2 = inBodyIM(p); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return _r$2;
					return _r$2;
				/* } */ case 13:
				$s = 7; continue;
			/* } else if (_1 === (3)) { */ case 5:
				if (p.tok.DataAtom === 152836) {
					if (!p.fragment) {
						p.im = afterAfterBodyIM;
					}
					$s = -1; return true;
					return true;
				}
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 6:
				if (p.oe.$length < 1 || !(((x = p.oe, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).DataAtom === 152836))) {
					$panic(new $String("html: bad parser state: <html> element not found, in the after-body insertion mode"));
				}
				(x$1 = p.oe, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).AppendChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } */ case 7:
		case 1:
		p.im = inBodyIM;
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: afterBodyIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	inFramesetIM = function(p) {
		var $ptr, _1, _3, _4, _r, _r$1, _r$2, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (5)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (5)) { */ case 2:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r = strings.Map((function(c) {
					var $ptr, _2, c;
					_2 = c;
					if ((_2 === (32)) || (_2 === (9)) || (_2 === (10)) || (_2 === (12)) || (_2 === (13))) {
						return c;
					}
					return -1;
				}), p.tok.Data); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				if (!(s === "")) {
					p.addText(s);
				}
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 4:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (152836)) { $s = 9; continue; }
					/* */ if (_3 === (39432)) { $s = 10; continue; }
					/* */ if (_3 === (39429)) { $s = 11; continue; }
					/* */ if (_3 === (38920)) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_3 === (152836)) { */ case 9:
						_r$1 = inBodyIM(p); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_3 === (39432)) { */ case 10:
						p.addElement();
						$s = 13; continue;
					/* } else if (_3 === (39429)) { */ case 11:
						p.addElement();
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						p.acknowledgeSelfClosingTag();
						$s = 13; continue;
					/* } else if (_3 === (38920)) { */ case 12:
						_r$2 = inHeadIM(p); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
						return _r$2;
					/* } */ case 13:
				case 8:
				$s = 6; continue;
			/* } else if (_1 === (3)) { */ case 5:
				_4 = p.tok.DataAtom;
				if (_4 === (39432)) {
					if (!(((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top().DataAtom === 152836))) {
						(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
						if (!(((p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top().DataAtom === 39432))) {
							p.im = afterFramesetIM;
							$s = -1; return true;
							return true;
						}
					}
				}
			/* } */ case 6:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inFramesetIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	afterFramesetIM = function(p) {
		var $ptr, _1, _3, _4, _r, _r$1, _r$2, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (5)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (5)) { */ case 2:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r = strings.Map((function(c) {
					var $ptr, _2, c;
					_2 = c;
					if ((_2 === (32)) || (_2 === (9)) || (_2 === (10)) || (_2 === (12)) || (_2 === (13))) {
						return c;
					}
					return -1;
				}), p.tok.Data); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				if (!(s === "")) {
					p.addText(s);
				}
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 4:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (152836)) { $s = 9; continue; }
					/* */ if (_3 === (38920)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_3 === (152836)) { */ case 9:
						_r$1 = inBodyIM(p); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$s = -1; return _r$1;
						return _r$1;
					/* } else if (_3 === (38920)) { */ case 10:
						_r$2 = inHeadIM(p); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
						return _r$2;
					/* } */ case 11:
				case 8:
				$s = 6; continue;
			/* } else if (_1 === (3)) { */ case 5:
				_4 = p.tok.DataAtom;
				if (_4 === (152836)) {
					p.im = afterAfterFramesetIM;
					$s = -1; return true;
					return true;
				}
			/* } */ case 6:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: afterFramesetIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	afterAfterBodyIM = function(p) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (5)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return true;
				return true;
			/* } else if (_1 === (1)) { */ case 3:
				_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f"); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				/* */ if (s.length === 0) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (s.length === 0) { */ case 9:
					_r$1 = inBodyIM(p); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
					return _r$1;
				/* } */ case 10:
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 4:
				/* */ if (p.tok.DataAtom === 152836) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.tok.DataAtom === 152836) { */ case 12:
					_r$2 = inBodyIM(p); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return _r$2;
					return _r$2;
				/* } */ case 13:
				$s = 7; continue;
			/* } else if (_1 === (5)) { */ case 5:
				p.doc.AppendChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = -1; return true;
				return true;
			/* } else if (_1 === (6)) { */ case 6:
				_r$3 = inBodyIM(p); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
				return _r$3;
			/* } */ case 7:
		case 1:
		p.im = inBodyIM;
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: afterAfterBodyIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	afterAfterFramesetIM = function(p) {
		var $ptr, _1, _3, _r, _r$1, _r$2, _r$3, _r$4, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (5)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (6)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (5)) { */ case 2:
				p.doc.AppendChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r = strings.Map((function(c) {
					var $ptr, _2, c;
					_2 = c;
					if ((_2 === (32)) || (_2 === (9)) || (_2 === (10)) || (_2 === (12)) || (_2 === (13))) {
						return c;
					}
					return -1;
				}), p.tok.Data); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				/* */ if (!(s === "")) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!(s === "")) { */ case 8:
					p.tok.Data = s;
					_r$1 = inBodyIM(p); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return _r$1;
					return _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 4:
					_3 = p.tok.DataAtom;
					/* */ if (_3 === (152836)) { $s = 12; continue; }
					/* */ if (_3 === (38920)) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (_3 === (152836)) { */ case 12:
						_r$2 = inBodyIM(p); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
						return _r$2;
					/* } else if (_3 === (38920)) { */ case 13:
						_r$3 = inHeadIM(p); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$s = -1; return _r$3;
						return _r$3;
					/* } */ case 14:
				case 11:
				$s = 6; continue;
			/* } else if (_1 === (6)) { */ case 5:
				_r$4 = inBodyIM(p); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
				return _r$4;
			/* } */ case 6:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: afterAfterFramesetIM }; } $f.$ptr = $ptr; $f._1 = _1; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseForeignContent = function(p) {
		var $ptr, _1, _2, _3, _entry, _entry$1, _i, _r, _r$1, _r$2, _ref, _v, attr, b, i, i$1, n, namespace, p, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _v = $f._v; attr = $f.attr; b = $f.b; i = $f.i; i$1 = $f.i$1; n = $f.n; namespace = $f.namespace; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = p.tok.Type;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (5)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (1)) { */ case 2:
				/* */ if (p.framesetOK) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (p.framesetOK) { */ case 7:
					_r = strings.TrimLeft(p.tok.Data, " \t\r\n\f\x00"); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					p.framesetOK = _r === "";
				/* } */ case 8:
				p.tok.Data = strings.Replace(p.tok.Data, "\x00", "\xEF\xBF\xBD", -1);
				p.addText(p.tok.Data);
				$s = 6; continue;
			/* } else if (_1 === (5)) { */ case 3:
				p.addChild(new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 4, 0, p.tok.Data, "", sliceType$1.nil));
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 4:
				b = (_entry = breakout[$String.keyFor(p.tok.Data)], _entry !== undefined ? _entry.v : false);
				if (p.tok.DataAtom === 55812) {
					_ref = p.tok.Attr;
					_i = 0;
					loop:
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
						_2 = attr.Key;
						if (_2 === ("color") || _2 === ("face") || _2 === ("size")) {
							b = true;
							break loop;
						}
						_i++;
					}
				}
				/* */ if (b) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (b) { */ case 10:
					i = p.oe.$length - 1 >> 0;
					/* while (true) { */ case 12:
						/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 13; continue; }
						n = (x = p.oe, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
						if (n.Namespace === "") { _v = true; $s = 16; continue s; }
						_r$1 = htmlIntegrationPoint(n); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_v = _r$1; case 16:
						/* */ if (_v || mathMLTextIntegrationPoint(n)) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (_v || mathMLTextIntegrationPoint(n)) { */ case 14:
							p.oe = $subslice(p.oe, 0, (i + 1 >> 0));
							/* break; */ $s = 13; continue;
						/* } */ case 15:
						i = i - (1) >> 0;
					/* } */ $s = 12; continue; case 13:
					$s = -1; return false;
					return false;
				/* } */ case 11:
				_3 = p.top().Namespace;
				if (_3 === ("math")) {
					adjustAttributeNames(p.tok.Attr, mathMLAttributeAdjustments);
				} else if (_3 === ("svg")) {
					x$1 = (_entry$1 = svgTagNameAdjustments[$String.keyFor(p.tok.Data)], _entry$1 !== undefined ? _entry$1.v : "");
					if (!(x$1 === "")) {
						p.tok.DataAtom = atom.Lookup(new sliceType$3($stringToBytes(x$1)));
						p.tok.Data = x$1;
					}
					adjustAttributeNames(p.tok.Attr, svgAttributeAdjustments);
				} else {
					$panic(new $String("html: bad parser state: unexpected namespace"));
				}
				adjustForeignAttributes(p.tok.Attr);
				namespace = p.top().Namespace;
				p.addElement();
				p.top().Namespace = namespace;
				if (!(namespace === "")) {
					p.tokenizer.NextIsNotRawText();
				}
				if (p.hasSelfClosingToken) {
					(p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).pop();
					p.acknowledgeSelfClosingTag();
				}
				$s = 6; continue;
			/* } else if (_1 === (3)) { */ case 5:
				i$1 = p.oe.$length - 1 >> 0;
				/* while (true) { */ case 18:
					/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 19; continue; }
					/* */ if ((x$2 = p.oe, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1])).Namespace === "") { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if ((x$2 = p.oe, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1])).Namespace === "") { */ case 20:
						_r$2 = p.im(p); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$s = -1; return _r$2;
						return _r$2;
					/* } */ case 21:
					if (strings.EqualFold((x$3 = p.oe, ((i$1 < 0 || i$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$1])).Data, p.tok.Data)) {
						p.oe = $subslice(p.oe, 0, i$1);
						/* break; */ $s = 19; continue;
					}
					i$1 = i$1 - (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				$s = -1; return true;
				return true;
			/* } */ case 6:
		case 1:
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseForeignContent }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._v = _v; $f.attr = attr; $f.b = b; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.namespace = namespace; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.inForeignContent = function() {
		var $ptr, _r, n, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.oe.$length === 0) {
			$s = -1; return false;
			return false;
		}
		n = (x = p.oe, x$1 = p.oe.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (n.Namespace === "") {
			$s = -1; return false;
			return false;
		}
		if (mathMLTextIntegrationPoint(n)) {
			if ((p.tok.Type === 2) && !((p.tok.DataAtom === 172550)) && !((p.tok.DataAtom === 4106))) {
				$s = -1; return false;
				return false;
			}
			if (p.tok.Type === 1) {
				$s = -1; return false;
				return false;
			}
		}
		if (n.Namespace === "math" && (n.DataAtom === 91918) && (p.tok.Type === 2) && (p.tok.DataAtom === 401411)) {
			$s = -1; return false;
			return false;
		}
		_r = htmlIntegrationPoint(n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r && ((p.tok.Type === 2) || (p.tok.Type === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r && ((p.tok.Type === 2) || (p.tok.Type === 1))) { */ case 1:
			$s = -1; return false;
			return false;
		/* } */ case 2:
		if (p.tok.Type === 0) {
			$s = -1; return false;
			return false;
		}
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.inForeignContent }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.inForeignContent = function() { return this.$val.inForeignContent(); };
	parser.ptr.prototype.parseImpliedToken = function(t, dataAtom, data) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, data, dataAtom, p, realToken, selfClosing, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; data = $f.data; dataAtom = $f.dataAtom; p = $f.p; realToken = $f.realToken; selfClosing = $f.selfClosing; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_tmp = $clone(p.tok, Token);
		_tmp$1 = p.hasSelfClosingToken;
		realToken = $clone(_tmp, Token);
		selfClosing = _tmp$1;
		Token.copy(p.tok, new Token.ptr(t, dataAtom, data, sliceType$1.nil));
		p.hasSelfClosingToken = false;
		$r = p.parseCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = $clone(realToken, Token);
		_tmp$3 = selfClosing;
		Token.copy(p.tok, _tmp$2);
		p.hasSelfClosingToken = _tmp$3;
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseImpliedToken }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.data = data; $f.dataAtom = dataAtom; $f.p = p; $f.realToken = realToken; $f.selfClosing = selfClosing; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseImpliedToken = function(t, dataAtom, data) { return this.$val.parseImpliedToken(t, dataAtom, data); };
	parser.ptr.prototype.parseCurrentToken = function() {
		var $ptr, _r, _r$1, _r$2, consumed, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; consumed = $f.consumed; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.tok.Type === 4) {
			p.hasSelfClosingToken = true;
			p.tok.Type = 2;
		}
		consumed = false;
		/* while (true) { */ case 1:
			/* if (!(!consumed)) { break; } */ if(!(!consumed)) { $s = 2; continue; }
			_r = p.inForeignContent(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				_r$1 = parseForeignContent(p); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				consumed = _r$1;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$2 = p.im(p); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				consumed = _r$2;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		if (p.hasSelfClosingToken) {
			p.hasSelfClosingToken = false;
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCurrentToken }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.consumed = consumed; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseCurrentToken = function() { return this.$val.parseCurrentToken(); };
	parser.ptr.prototype.parse = function() {
		var $ptr, _r, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			/* if (!(!($interfaceIsEqual(err, io.EOF)))) { break; } */ if(!(!($interfaceIsEqual(err, io.EOF)))) { $s = 2; continue; }
			n = (p.$ptr_oe || (p.$ptr_oe = new ptrType$1(function() { return this.$target.oe; }, function($v) { this.$target.oe = $v; }, p))).top();
			p.tokenizer.AllowCDATA(!(n === ptrType.nil) && !(n.Namespace === ""));
			_r = p.tokenizer.Next(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			Token.copy(p.tok, p.tokenizer.Token());
			if (p.tok.Type === 0) {
				err = p.tokenizer.Err();
				if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) {
					$s = -1; return err;
					return err;
				}
			}
			$r = p.parseCurrentToken(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parse = function() { return this.$val.parse(); };
	ParseFragment = function(r, context) {
		var $ptr, _r, _r$1, _r$2, c, context, contextTag, err, n, next, p, parent, r, result, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; context = $f.context; contextTag = $f.contextTag; err = $f.err; n = $f.n; next = $f.next; p = $f.p; parent = $f.parent; r = $f.r; result = $f.result; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		contextTag = "";
		/* */ if (!(context === ptrType.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(context === ptrType.nil)) { */ case 1:
			if (!((context.Type === 3))) {
				$s = -1; return [sliceType$4.nil, errors.New("html: ParseFragment of non-element Node")];
				return [sliceType$4.nil, errors.New("html: ParseFragment of non-element Node")];
			}
			/* */ if (!((context.DataAtom === atom.Lookup(new sliceType$3($stringToBytes(context.Data)))))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((context.DataAtom === atom.Lookup(new sliceType$3($stringToBytes(context.Data)))))) { */ case 3:
				_r = fmt.Errorf("html: inconsistent Node: DataAtom=%q, Data=%q", new sliceType$5([new atom.Atom(context.DataAtom), new $String(context.Data)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return [sliceType$4.nil, _r];
				return [sliceType$4.nil, _r];
			/* } */ case 4:
			contextTag = new atom.Atom(context.DataAtom).String();
		/* } */ case 2:
		_r$1 = NewTokenizerFragment(r, contextTag); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		p = new parser.ptr(_r$1, new Token.ptr(0, 0, "", sliceType$1.nil), false, new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 2, 0, "", "", sliceType$1.nil), nodeStack.nil, nodeStack.nil, ptrType.nil, ptrType.nil, true, false, $throwNilPointerError, $throwNilPointerError, false, false, true, context);
		root = new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 3, 152836, new atom.Atom(152836).String(), "", sliceType$1.nil);
		p.doc.AppendChild(root);
		p.oe = new nodeStack([root]);
		p.resetInsertionMode();
		n = context;
		while (true) {
			if (!(!(n === ptrType.nil))) { break; }
			if ((n.Type === 3) && (n.DataAtom === 127492)) {
				p.form = n;
				break;
			}
			n = n.Parent;
		}
		_r$2 = p.parse(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$4.nil, err];
			return [sliceType$4.nil, err];
		}
		parent = p.doc;
		if (!(context === ptrType.nil)) {
			parent = root;
		}
		result = sliceType$4.nil;
		c = parent.FirstChild;
		while (true) {
			if (!(!(c === ptrType.nil))) { break; }
			next = c.NextSibling;
			parent.RemoveChild(c);
			result = $append(result, c);
			c = next;
		}
		$s = -1; return [result, $ifaceNil];
		return [result, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseFragment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.context = context; $f.contextTag = contextTag; $f.err = err; $f.n = n; $f.next = next; $f.p = p; $f.parent = parent; $f.r = r; $f.result = result; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseFragment = ParseFragment;
	Render = function(w, n) {
		var $ptr, _r, _r$1, _r$2, _tuple, buf, err, n, ok, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; ok = $f.ok; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(w, writer, true);
		x = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = render(x, n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
			return _r;
		/* } */ case 2:
		buf = bufio.NewWriter(w);
		_r$1 = render(buf, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$2 = buf.Flush(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Render }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.ok = ok; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Render = Render;
	render = function(w, n) {
		var $ptr, _r, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = render1(w, n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if ($interfaceIsEqual(err, plaintextAbort)) {
			err = $ifaceNil;
		}
		$s = -1; return err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: render }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	render1 = function(w, n) {
		var $ptr, _1, _2, _3, _4, _entry, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, a$1, c, c$1, c$2, c$3, err, err$1, err$10, err$11, err$12, err$13, err$14, err$15, err$16, err$17, err$18, err$19, err$2, err$20, err$21, err$22, err$23, err$24, err$25, err$26, err$27, err$28, err$3, err$4, err$5, err$6, err$7, err$8, err$9, n, p, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; a = $f.a; a$1 = $f.a$1; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; c$3 = $f.c$3; err = $f.err; err$1 = $f.err$1; err$10 = $f.err$10; err$11 = $f.err$11; err$12 = $f.err$12; err$13 = $f.err$13; err$14 = $f.err$14; err$15 = $f.err$15; err$16 = $f.err$16; err$17 = $f.err$17; err$18 = $f.err$18; err$19 = $f.err$19; err$2 = $f.err$2; err$20 = $f.err$20; err$21 = $f.err$21; err$22 = $f.err$22; err$23 = $f.err$23; err$24 = $f.err$24; err$25 = $f.err$25; err$26 = $f.err$26; err$27 = $f.err$27; err$28 = $f.err$28; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; err$9 = $f.err$9; n = $f.n; p = $f.p; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = n.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return errors.New("html: cannot render an ErrorNode node");
				return errors.New("html: cannot render an ErrorNode node");
			/* } else if (_1 === (1)) { */ case 3:
				_r = escape(w, n.Data); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (2)) { */ case 4:
				c = n.FirstChild;
				/* while (true) { */ case 11:
					/* if (!(!(c === ptrType.nil))) { break; } */ if(!(!(c === ptrType.nil))) { $s = 12; continue; }
					_r$1 = render1(w, c); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err = _r$1;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return err;
						return err;
					}
					c = c.NextSibling;
				/* } */ $s = 11; continue; case 12:
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			/* } else if (_1 === (3)) { */ case 5:
				$s = 9; continue;
			/* } else if (_1 === (4)) { */ case 6:
				_r$2 = w.WriteString("<!--"); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				err$1 = _tuple[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
					return err$1;
				}
				_r$3 = w.WriteString(n.Data); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				err$2 = _tuple$1[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
					return err$2;
				}
				_r$4 = w.WriteString("-->"); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$2 = _r$4;
				err$3 = _tuple$2[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
					return err$3;
				}
				$s = -1; return $ifaceNil;
				return $ifaceNil;
			/* } else if (_1 === (5)) { */ case 7:
				_r$5 = w.WriteString("<!DOCTYPE "); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$3 = _r$5;
				err$4 = _tuple$3[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return err$4;
					return err$4;
				}
				_r$6 = w.WriteString(n.Data); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$4 = _r$6;
				err$5 = _tuple$4[1];
				if (!($interfaceIsEqual(err$5, $ifaceNil))) {
					$s = -1; return err$5;
					return err$5;
				}
				/* */ if (!(n.Attr === sliceType$1.nil)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!(n.Attr === sliceType$1.nil)) { */ case 19:
					_tmp = "";
					_tmp$1 = "";
					p = _tmp;
					s = _tmp$1;
					_ref = n.Attr;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						a = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
						_2 = a.Key;
						if (_2 === ("public")) {
							p = a.Val;
						} else if (_2 === ("system")) {
							s = a.Val;
						}
						_i++;
					}
					/* */ if (!(p === "")) { $s = 21; continue; }
					/* */ if (!(s === "")) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!(p === "")) { */ case 21:
						_r$7 = w.WriteString(" PUBLIC "); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_tuple$5 = _r$7;
						err$6 = _tuple$5[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil))) {
							$s = -1; return err$6;
							return err$6;
						}
						_r$8 = writeQuoted(w, p); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						err$7 = _r$8;
						if (!($interfaceIsEqual(err$7, $ifaceNil))) {
							$s = -1; return err$7;
							return err$7;
						}
						/* */ if (!(s === "")) { $s = 26; continue; }
						/* */ $s = 27; continue;
						/* if (!(s === "")) { */ case 26:
							_r$9 = w.WriteByte(32); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							err$8 = _r$9;
							if (!($interfaceIsEqual(err$8, $ifaceNil))) {
								$s = -1; return err$8;
								return err$8;
							}
							_r$10 = writeQuoted(w, s); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							err$9 = _r$10;
							if (!($interfaceIsEqual(err$9, $ifaceNil))) {
								$s = -1; return err$9;
								return err$9;
							}
						/* } */ case 27:
						$s = 23; continue;
					/* } else if (!(s === "")) { */ case 22:
						_r$11 = w.WriteString(" SYSTEM "); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_tuple$6 = _r$11;
						err$10 = _tuple$6[1];
						if (!($interfaceIsEqual(err$10, $ifaceNil))) {
							$s = -1; return err$10;
							return err$10;
						}
						_r$12 = writeQuoted(w, s); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						err$11 = _r$12;
						if (!($interfaceIsEqual(err$11, $ifaceNil))) {
							$s = -1; return err$11;
							return err$11;
						}
					/* } */ case 23:
				/* } */ case 20:
				_r$13 = w.WriteByte(62); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$s = -1; return _r$13;
				return _r$13;
			/* } else { */ case 8:
				$s = -1; return errors.New("html: unknown node type");
				return errors.New("html: unknown node type");
			/* } */ case 9:
		case 1:
		_r$14 = w.WriteByte(60); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		err$12 = _r$14;
		if (!($interfaceIsEqual(err$12, $ifaceNil))) {
			$s = -1; return err$12;
			return err$12;
		}
		_r$15 = w.WriteString(n.Data); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_tuple$7 = _r$15;
		err$13 = _tuple$7[1];
		if (!($interfaceIsEqual(err$13, $ifaceNil))) {
			$s = -1; return err$13;
			return err$13;
		}
		_ref$1 = n.Attr;
		_i$1 = 0;
		/* while (true) { */ case 35:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 36; continue; }
			a$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Attribute);
			_r$16 = w.WriteByte(32); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			err$14 = _r$16;
			if (!($interfaceIsEqual(err$14, $ifaceNil))) {
				$s = -1; return err$14;
				return err$14;
			}
			/* */ if (!(a$1.Namespace === "")) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (!(a$1.Namespace === "")) { */ case 38:
				_r$17 = w.WriteString(a$1.Namespace); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_tuple$8 = _r$17;
				err$15 = _tuple$8[1];
				if (!($interfaceIsEqual(err$15, $ifaceNil))) {
					$s = -1; return err$15;
					return err$15;
				}
				_r$18 = w.WriteByte(58); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				err$16 = _r$18;
				if (!($interfaceIsEqual(err$16, $ifaceNil))) {
					$s = -1; return err$16;
					return err$16;
				}
			/* } */ case 39:
			_r$19 = w.WriteString(a$1.Key); /* */ $s = 42; case 42: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_tuple$9 = _r$19;
			err$17 = _tuple$9[1];
			if (!($interfaceIsEqual(err$17, $ifaceNil))) {
				$s = -1; return err$17;
				return err$17;
			}
			_r$20 = w.WriteString("=\""); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_tuple$10 = _r$20;
			err$18 = _tuple$10[1];
			if (!($interfaceIsEqual(err$18, $ifaceNil))) {
				$s = -1; return err$18;
				return err$18;
			}
			_r$21 = escape(w, a$1.Val); /* */ $s = 44; case 44: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			err$19 = _r$21;
			if (!($interfaceIsEqual(err$19, $ifaceNil))) {
				$s = -1; return err$19;
				return err$19;
			}
			_r$22 = w.WriteByte(34); /* */ $s = 45; case 45: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			err$20 = _r$22;
			if (!($interfaceIsEqual(err$20, $ifaceNil))) {
				$s = -1; return err$20;
				return err$20;
			}
			_i$1++;
		/* } */ $s = 35; continue; case 36:
		/* */ if ((_entry = voidElements[$String.keyFor(n.Data)], _entry !== undefined ? _entry.v : false)) { $s = 46; continue; }
		/* */ $s = 47; continue;
		/* if ((_entry = voidElements[$String.keyFor(n.Data)], _entry !== undefined ? _entry.v : false)) { */ case 46:
			/* */ if (!(n.FirstChild === ptrType.nil)) { $s = 48; continue; }
			/* */ $s = 49; continue;
			/* if (!(n.FirstChild === ptrType.nil)) { */ case 48:
				_r$23 = fmt.Errorf("html: void element <%s> has child nodes", new sliceType$5([new $String(n.Data)])); /* */ $s = 50; case 50: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$s = -1; return _r$23;
				return _r$23;
			/* } */ case 49:
			_r$24 = w.WriteString("/>"); /* */ $s = 51; case 51: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_tuple$11 = _r$24;
			err$21 = _tuple$11[1];
			$s = -1; return err$21;
			return err$21;
		/* } */ case 47:
		_r$25 = w.WriteByte(62); /* */ $s = 52; case 52: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		err$22 = _r$25;
		if (!($interfaceIsEqual(err$22, $ifaceNil))) {
			$s = -1; return err$22;
			return err$22;
		}
		c$1 = n.FirstChild;
		/* */ if (!(c$1 === ptrType.nil) && (c$1.Type === 1) && strings.HasPrefix(c$1.Data, "\n")) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (!(c$1 === ptrType.nil) && (c$1.Type === 1) && strings.HasPrefix(c$1.Data, "\n")) { */ case 53:
				_3 = n.Data;
				/* */ if (_3 === ("pre") || _3 === ("listing") || _3 === ("textarea")) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (_3 === ("pre") || _3 === ("listing") || _3 === ("textarea")) { */ case 56:
					_r$26 = w.WriteByte(10); /* */ $s = 58; case 58: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					err$23 = _r$26;
					if (!($interfaceIsEqual(err$23, $ifaceNil))) {
						$s = -1; return err$23;
						return err$23;
					}
				/* } */ case 57:
			case 55:
		/* } */ case 54:
			_4 = n.Data;
			/* */ if (_4 === ("iframe") || _4 === ("noembed") || _4 === ("noframes") || _4 === ("noscript") || _4 === ("plaintext") || _4 === ("script") || _4 === ("style") || _4 === ("xmp")) { $s = 60; continue; }
			/* */ $s = 61; continue;
			/* if (_4 === ("iframe") || _4 === ("noembed") || _4 === ("noframes") || _4 === ("noscript") || _4 === ("plaintext") || _4 === ("script") || _4 === ("style") || _4 === ("xmp")) { */ case 60:
				c$2 = n.FirstChild;
				/* while (true) { */ case 63:
					/* if (!(!(c$2 === ptrType.nil))) { break; } */ if(!(!(c$2 === ptrType.nil))) { $s = 64; continue; }
					/* */ if (c$2.Type === 1) { $s = 65; continue; }
					/* */ $s = 66; continue;
					/* if (c$2.Type === 1) { */ case 65:
						_r$27 = w.WriteString(c$2.Data); /* */ $s = 68; case 68: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						_tuple$12 = _r$27;
						err$24 = _tuple$12[1];
						if (!($interfaceIsEqual(err$24, $ifaceNil))) {
							$s = -1; return err$24;
							return err$24;
						}
						$s = 67; continue;
					/* } else { */ case 66:
						_r$28 = render1(w, c$2); /* */ $s = 69; case 69: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						err$25 = _r$28;
						if (!($interfaceIsEqual(err$25, $ifaceNil))) {
							$s = -1; return err$25;
							return err$25;
						}
					/* } */ case 67:
					c$2 = c$2.NextSibling;
				/* } */ $s = 63; continue; case 64:
				if (n.Data === "plaintext") {
					$s = -1; return plaintextAbort;
					return plaintextAbort;
				}
				$s = 62; continue;
			/* } else { */ case 61:
				c$3 = n.FirstChild;
				/* while (true) { */ case 70:
					/* if (!(!(c$3 === ptrType.nil))) { break; } */ if(!(!(c$3 === ptrType.nil))) { $s = 71; continue; }
					_r$29 = render1(w, c$3); /* */ $s = 72; case 72: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					err$26 = _r$29;
					if (!($interfaceIsEqual(err$26, $ifaceNil))) {
						$s = -1; return err$26;
						return err$26;
					}
					c$3 = c$3.NextSibling;
				/* } */ $s = 70; continue; case 71:
			/* } */ case 62:
		case 59:
		_r$30 = w.WriteString("</"); /* */ $s = 73; case 73: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_tuple$13 = _r$30;
		err$27 = _tuple$13[1];
		if (!($interfaceIsEqual(err$27, $ifaceNil))) {
			$s = -1; return err$27;
			return err$27;
		}
		_r$31 = w.WriteString(n.Data); /* */ $s = 74; case 74: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple$14 = _r$31;
		err$28 = _tuple$14[1];
		if (!($interfaceIsEqual(err$28, $ifaceNil))) {
			$s = -1; return err$28;
			return err$28;
		}
		_r$32 = w.WriteByte(62); /* */ $s = 75; case 75: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		$s = -1; return _r$32;
		return _r$32;
		/* */ } return; } if ($f === undefined) { $f = { $blk: render1 }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.c$3 = c$3; $f.err = err; $f.err$1 = err$1; $f.err$10 = err$10; $f.err$11 = err$11; $f.err$12 = err$12; $f.err$13 = err$13; $f.err$14 = err$14; $f.err$15 = err$15; $f.err$16 = err$16; $f.err$17 = err$17; $f.err$18 = err$18; $f.err$19 = err$19; $f.err$2 = err$2; $f.err$20 = err$20; $f.err$21 = err$21; $f.err$22 = err$22; $f.err$23 = err$23; $f.err$24 = err$24; $f.err$25 = err$25; $f.err$26 = err$26; $f.err$27 = err$27; $f.err$28 = err$28; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.err$9 = err$9; $f.n = n; $f.p = p; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeQuoted = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tuple, err, err$1, err$2, q, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; q = $f.q; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = 34;
		if (strings.Contains(s, "\"")) {
			q = 39;
		}
		_r = w.WriteByte(q); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
			return err;
		}
		_r$1 = w.WriteString(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
			return err$1;
		}
		_r$2 = w.WriteByte(q); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err$2 = _r$2;
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			$s = -1; return err$2;
			return err$2;
		}
		$s = -1; return $ifaceNil;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeQuoted }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.q = q; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	TokenType.prototype.String = function() {
		var $ptr, _1, t;
		t = this.$val;
		_1 = t;
		if (_1 === (0)) {
			return "Error";
		} else if (_1 === (1)) {
			return "Text";
		} else if (_1 === (2)) {
			return "StartTag";
		} else if (_1 === (3)) {
			return "EndTag";
		} else if (_1 === (4)) {
			return "SelfClosingTag";
		} else if (_1 === (5)) {
			return "Comment";
		} else if (_1 === (6)) {
			return "Doctype";
		}
		return "Invalid(" + strconv.Itoa((t >> 0)) + ")";
	};
	$ptrType(TokenType).prototype.String = function() { return new TokenType(this.$get()).String(); };
	Token.ptr.prototype.tagString = function() {
		var $ptr, _i, _r, _ref, a, buf, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; buf = $f.buf; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Token);
		if (t.Attr.$length === 0) {
			$s = -1; return t.Data;
			return t.Data;
		}
		buf = bytes.NewBufferString(t.Data);
		_ref = t.Attr;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attribute);
			buf.WriteByte(32);
			buf.WriteString(a.Key);
			buf.WriteString("=\"");
			_r = escape(buf, a.Val); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			buf.WriteByte(34);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return buf.String();
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Token.ptr.prototype.tagString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.buf = buf; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Token.prototype.tagString = function() { return this.$val.tagString(); };
	Token.ptr.prototype.String = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Token);
			_1 = t.Type;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "";
				return "";
			/* } else if (_1 === (1)) { */ case 3:
				_r = EscapeString(t.Data); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
				return _r;
			/* } else if (_1 === (2)) { */ case 4:
				_r$1 = t.tagString(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return "<" + _r$1 + ">";
				return "<" + _r$1 + ">";
			/* } else if (_1 === (3)) { */ case 5:
				_r$2 = t.tagString(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return "</" + _r$2 + ">";
				return "</" + _r$2 + ">";
			/* } else if (_1 === (4)) { */ case 6:
				_r$3 = t.tagString(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return "<" + _r$3 + "/>";
				return "<" + _r$3 + "/>";
			/* } else if (_1 === (5)) { */ case 7:
				$s = -1; return "<!--" + t.Data + "-->";
				return "<!--" + t.Data + "-->";
			/* } else if (_1 === (6)) { */ case 8:
				$s = -1; return "<!DOCTYPE " + t.Data + ">";
				return "<!DOCTYPE " + t.Data + ">";
			/* } */ case 9:
		case 1:
		$s = -1; return "Invalid(" + strconv.Itoa((t.Type >> 0)) + ")";
		return "Invalid(" + strconv.Itoa((t.Type >> 0)) + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Token.ptr.prototype.String }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Token.prototype.String = function() { return this.$val.String(); };
	Tokenizer.ptr.prototype.AllowCDATA = function(allowCDATA) {
		var $ptr, allowCDATA, z;
		z = this;
		z.allowCDATA = allowCDATA;
	};
	Tokenizer.prototype.AllowCDATA = function(allowCDATA) { return this.$val.AllowCDATA(allowCDATA); };
	Tokenizer.ptr.prototype.NextIsNotRawText = function() {
		var $ptr, z;
		z = this;
		z.rawTag = "";
	};
	Tokenizer.prototype.NextIsNotRawText = function() { return this.$val.NextIsNotRawText(); };
	Tokenizer.ptr.prototype.Err = function() {
		var $ptr, z;
		z = this;
		if (!((z.tt === 0))) {
			return $ifaceNil;
		}
		return z.err;
	};
	Tokenizer.prototype.Err = function() { return this.$val.Err(); };
	Tokenizer.ptr.prototype.readByte = function() {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tuple, buf1, c, d, i, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; buf1 = $f.buf1; c = $f.c; d = $f.d; i = $f.i; n = $f.n; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (z.raw.end >= z.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.raw.end >= z.buf.$length) { */ case 1:
			if (!($interfaceIsEqual(z.readErr, $ifaceNil))) {
				z.err = z.readErr;
				$s = -1; return 0;
				return 0;
			}
			c = z.buf.$capacity;
			d = z.raw.end - z.raw.start >> 0;
			buf1 = sliceType$3.nil;
			if (($imul(2, d)) > c) {
				buf1 = $makeSlice(sliceType$3, d, ($imul(2, c)));
			} else {
				buf1 = $subslice(z.buf, 0, d);
			}
			$copySlice(buf1, $subslice(z.buf, z.raw.start, z.raw.end));
			x = z.raw.start;
			if (!((x === 0))) {
				z.data.start = z.data.start - (x) >> 0;
				z.data.end = z.data.end - (x) >> 0;
				z.pendingAttr[0].start = z.pendingAttr[0].start - (x) >> 0;
				z.pendingAttr[0].end = z.pendingAttr[0].end - (x) >> 0;
				z.pendingAttr[1].start = z.pendingAttr[1].start - (x) >> 0;
				z.pendingAttr[1].end = z.pendingAttr[1].end - (x) >> 0;
				_ref = z.attr;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					(x$2 = z.attr, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i]))[0].start = (x$1 = z.attr, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]))[0].start - (x) >> 0;
					(x$4 = z.attr, ((i < 0 || i >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i]))[0].end = (x$3 = z.attr, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i]))[0].end - (x) >> 0;
					(x$6 = z.attr, ((i < 0 || i >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i]))[1].start = (x$5 = z.attr, ((i < 0 || i >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i]))[1].start - (x) >> 0;
					(x$8 = z.attr, ((i < 0 || i >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i]))[1].end = (x$7 = z.attr, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i]))[1].end - (x) >> 0;
					_i++;
				}
			}
			_tmp = 0;
			_tmp$1 = d;
			_tmp$2 = $subslice(buf1, 0, d);
			z.raw.start = _tmp;
			z.raw.end = _tmp$1;
			z.buf = _tmp$2;
			n = 0;
			_r = readAtLeastOneByte(z.r, $subslice(buf1, d, buf1.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			z.readErr = _tuple[1];
			if (n === 0) {
				z.err = z.readErr;
				$s = -1; return 0;
				return 0;
			}
			z.buf = $subslice(buf1, 0, (d + n >> 0));
		/* } */ case 2:
		x$11 = (x$9 = z.buf, x$10 = z.raw.end, ((x$10 < 0 || x$10 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + x$10]));
		z.raw.end = z.raw.end + (1) >> 0;
		if (z.maxBuf > 0 && (z.raw.end - z.raw.start >> 0) >= z.maxBuf) {
			z.err = $pkg.ErrBufferExceeded;
			$s = -1; return 0;
			return 0;
		}
		$s = -1; return x$11;
		return x$11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readByte }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.buf1 = buf1; $f.c = c; $f.d = d; $f.i = i; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readByte = function() { return this.$val.readByte(); };
	Tokenizer.ptr.prototype.Buffered = function() {
		var $ptr, z;
		z = this;
		return $subslice(z.buf, z.raw.end);
	};
	Tokenizer.prototype.Buffered = function() { return this.$val.Buffered(); };
	readAtLeastOneByte = function(r, b) {
		var $ptr, _r, _tuple, b, err, i, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 100)) { break; } */ if(!(i < 100)) { $s = 2; continue; }
			_r = r.Read(b); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (!((n === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
				return [n, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, io.ErrNoProgress];
		return [0, io.ErrNoProgress];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readAtLeastOneByte }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.ptr.prototype.skipWhiteSpace = function() {
		var $ptr, _1, _r, c, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; c = $f.c; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* while (true) { */ case 1:
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				$s = -1; return;
				return;
			}
			_1 = c;
			if ((_1 === (32)) || (_1 === (10)) || (_1 === (13)) || (_1 === (9)) || (_1 === (12))) {
			} else {
				z.raw.end = z.raw.end - (1) >> 0;
				$s = -1; return;
				return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.skipWhiteSpace }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.c = c; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.skipWhiteSpace = function() { return this.$val.skipWhiteSpace(); };
	Tokenizer.ptr.prototype.readRawOrRCDATA = function() {
		var $ptr, _r, _r$1, _r$2, c, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; c = $f.c; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (z.rawTag === "script") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.rawTag === "script") { */ case 1:
			$r = z.readScript(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			z.textIsRaw = true;
			z.rawTag = "";
			$s = -1; return;
			return;
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = z.readByte(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				/* break loop; */ $s = 5; continue s;
			}
			/* */ if (!((c === 60))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((c === 60))) { */ case 7:
				/* continue loop; */ $s = 4; continue s;
			/* } */ case 8:
			_r$1 = z.readByte(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			c = _r$1;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				/* break loop; */ $s = 5; continue s;
			}
			/* */ if (!((c === 47))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!((c === 47))) { */ case 10:
				/* continue loop; */ $s = 4; continue s;
			/* } */ case 11:
			_r$2 = z.readRawEndTag(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 || !($interfaceIsEqual(z.err, $ifaceNil))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$2 || !($interfaceIsEqual(z.err, $ifaceNil))) { */ case 12:
				/* break loop; */ $s = 5; continue s;
			/* } */ case 13:
		/* } */ $s = 4; continue; case 5:
		z.data.end = z.raw.end;
		z.textIsRaw = !(z.rawTag === "textarea") && !(z.rawTag === "title");
		z.rawTag = "";
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readRawOrRCDATA }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.c = c; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readRawOrRCDATA = function() { return this.$val.readRawOrRCDATA(); };
	Tokenizer.ptr.prototype.readRawEndTag = function() {
		var $ptr, _1, _r, _r$1, c, c$1, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; c = $f.c; c$1 = $f.c$1; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < z.rawTag.length)) { break; } */ if(!(i < z.rawTag.length)) { $s = 2; continue; }
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				$s = -1; return false;
				return false;
			}
			if (!((c === z.rawTag.charCodeAt(i))) && !((c === (z.rawTag.charCodeAt(i) - 32 << 24 >>> 24)))) {
				z.raw.end = z.raw.end - (1) >> 0;
				$s = -1; return false;
				return false;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$1 = z.readByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		c$1 = _r$1;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return false;
			return false;
		}
		_1 = c$1;
		if ((_1 === (32)) || (_1 === (10)) || (_1 === (13)) || (_1 === (9)) || (_1 === (12)) || (_1 === (47)) || (_1 === (62))) {
			z.raw.end = z.raw.end - ((3 + z.rawTag.length >> 0)) >> 0;
			$s = -1; return true;
			return true;
		}
		z.raw.end = z.raw.end - (1) >> 0;
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readRawEndTag }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readRawEndTag = function() { return this.$val.readRawEndTag(); };
	Tokenizer.ptr.prototype.readScript = function() {
		var $ptr, _1, _2, _3, _4, _5, _6, _7, _8, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, c, i, z, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _8 = $f._8; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; c = $f.c; i = $f.i; z = $f.z; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		z = [z];
		z[0] = this;
		$deferred.push([(function(z) { return function() {
			var $ptr;
			z[0].data.end = z[0].raw.end;
		}; })(z), []]);
		c = 0;
		/* scriptData: */ case 1:
		_r = z[0].readByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* */ if (c === 60) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (c === 60) { */ case 3:
			/* goto scriptDataLessThanSign */ $s = 5; continue;
		/* } */ case 4:
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataLessThanSign: */ case 5:
		_r$1 = z[0].readByte(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		c = _r$1;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_1 = c;
			/* */ if (_1 === (47)) { $s = 8; continue; }
			/* */ if (_1 === (33)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (47)) { */ case 8:
				/* goto scriptDataEndTagOpen */ $s = 11; continue;
				$s = 10; continue;
			/* } else if (_1 === (33)) { */ case 9:
				/* goto scriptDataEscapeStart */ $s = 12; continue;
			/* } */ case 10:
		case 7:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataEndTagOpen: */ case 11:
		_r$2 = z[0].readRawEndTag(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 || !($interfaceIsEqual(z[0].err, $ifaceNil))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (_r$2 || !($interfaceIsEqual(z[0].err, $ifaceNil))) { */ case 13:
			$s = -1; return;
			return;
		/* } */ case 14:
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataEscapeStart: */ case 12:
		_r$3 = z[0].readByte(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		c = _r$3;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* */ if (c === 45) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (c === 45) { */ case 17:
			/* goto scriptDataEscapeStartDash */ $s = 19; continue;
		/* } */ case 18:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataEscapeStartDash: */ case 19:
		_r$4 = z[0].readByte(); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		c = _r$4;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* */ if (c === 45) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (c === 45) { */ case 21:
			/* goto scriptDataEscapedDashDash */ $s = 23; continue;
		/* } */ case 22:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataEscaped: */ case 24:
		_r$5 = z[0].readByte(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		c = _r$5;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_2 = c;
			/* */ if (_2 === (45)) { $s = 27; continue; }
			/* */ if (_2 === (60)) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (_2 === (45)) { */ case 27:
				/* goto scriptDataEscapedDash */ $s = 30; continue;
				$s = 29; continue;
			/* } else if (_2 === (60)) { */ case 28:
				/* goto scriptDataEscapedLessThanSign */ $s = 31; continue;
			/* } */ case 29:
		case 26:
		/* goto scriptDataEscaped */ $s = 24; continue;
		/* scriptDataEscapedDash: */ case 30:
		_r$6 = z[0].readByte(); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		c = _r$6;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_3 = c;
			/* */ if (_3 === (45)) { $s = 34; continue; }
			/* */ if (_3 === (60)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (_3 === (45)) { */ case 34:
				/* goto scriptDataEscapedDashDash */ $s = 23; continue;
				$s = 36; continue;
			/* } else if (_3 === (60)) { */ case 35:
				/* goto scriptDataEscapedLessThanSign */ $s = 31; continue;
			/* } */ case 36:
		case 33:
		/* goto scriptDataEscaped */ $s = 24; continue;
		/* scriptDataEscapedDashDash: */ case 23:
		_r$7 = z[0].readByte(); /* */ $s = 37; case 37: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		c = _r$7;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_4 = c;
			/* */ if (_4 === (45)) { $s = 39; continue; }
			/* */ if (_4 === (60)) { $s = 40; continue; }
			/* */ if (_4 === (62)) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (_4 === (45)) { */ case 39:
				/* goto scriptDataEscapedDashDash */ $s = 23; continue;
				$s = 42; continue;
			/* } else if (_4 === (60)) { */ case 40:
				/* goto scriptDataEscapedLessThanSign */ $s = 31; continue;
				$s = 42; continue;
			/* } else if (_4 === (62)) { */ case 41:
				/* goto scriptData */ $s = 1; continue;
			/* } */ case 42:
		case 38:
		/* goto scriptDataEscaped */ $s = 24; continue;
		/* scriptDataEscapedLessThanSign: */ case 31:
		_r$8 = z[0].readByte(); /* */ $s = 43; case 43: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		c = _r$8;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* */ if (c === 47) { $s = 44; continue; }
		/* */ $s = 45; continue;
		/* if (c === 47) { */ case 44:
			/* goto scriptDataEscapedEndTagOpen */ $s = 46; continue;
		/* } */ case 45:
		/* */ if (97 <= c && c <= 122 || 65 <= c && c <= 90) { $s = 47; continue; }
		/* */ $s = 48; continue;
		/* if (97 <= c && c <= 122 || 65 <= c && c <= 90) { */ case 47:
			/* goto scriptDataDoubleEscapeStart */ $s = 49; continue;
		/* } */ case 48:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptData */ $s = 1; continue;
		/* scriptDataEscapedEndTagOpen: */ case 46:
		_r$9 = z[0].readRawEndTag(); /* */ $s = 52; case 52: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		/* */ if (_r$9 || !($interfaceIsEqual(z[0].err, $ifaceNil))) { $s = 50; continue; }
		/* */ $s = 51; continue;
		/* if (_r$9 || !($interfaceIsEqual(z[0].err, $ifaceNil))) { */ case 50:
			$s = -1; return;
			return;
		/* } */ case 51:
		/* goto scriptDataEscaped */ $s = 24; continue;
		/* scriptDataDoubleEscapeStart: */ case 49:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		i = 0;
		/* while (true) { */ case 53:
			/* if (!(i < 6)) { break; } */ if(!(i < 6)) { $s = 54; continue; }
			_r$10 = z[0].readByte(); /* */ $s = 55; case 55: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			c = _r$10;
			if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
				$s = -1; return;
				return;
			}
			/* */ if (!((c === "script".charCodeAt(i))) && !((c === "SCRIPT".charCodeAt(i)))) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (!((c === "script".charCodeAt(i))) && !((c === "SCRIPT".charCodeAt(i)))) { */ case 56:
				z[0].raw.end = z[0].raw.end - (1) >> 0;
				/* goto scriptDataEscaped */ $s = 24; continue;
			/* } */ case 57:
			i = i + (1) >> 0;
		/* } */ $s = 53; continue; case 54:
		_r$11 = z[0].readByte(); /* */ $s = 58; case 58: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		c = _r$11;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_5 = c;
			/* */ if ((_5 === (32)) || (_5 === (10)) || (_5 === (13)) || (_5 === (9)) || (_5 === (12)) || (_5 === (47)) || (_5 === (62))) { $s = 60; continue; }
			/* */ $s = 61; continue;
			/* if ((_5 === (32)) || (_5 === (10)) || (_5 === (13)) || (_5 === (9)) || (_5 === (12)) || (_5 === (47)) || (_5 === (62))) { */ case 60:
				/* goto scriptDataDoubleEscaped */ $s = 62; continue;
			/* } */ case 61:
		case 59:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptDataEscaped */ $s = 24; continue;
		/* scriptDataDoubleEscaped: */ case 62:
		_r$12 = z[0].readByte(); /* */ $s = 63; case 63: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		c = _r$12;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_6 = c;
			/* */ if (_6 === (45)) { $s = 65; continue; }
			/* */ if (_6 === (60)) { $s = 66; continue; }
			/* */ $s = 67; continue;
			/* if (_6 === (45)) { */ case 65:
				/* goto scriptDataDoubleEscapedDash */ $s = 68; continue;
				$s = 67; continue;
			/* } else if (_6 === (60)) { */ case 66:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 69; continue;
			/* } */ case 67:
		case 64:
		/* goto scriptDataDoubleEscaped */ $s = 62; continue;
		/* scriptDataDoubleEscapedDash: */ case 68:
		_r$13 = z[0].readByte(); /* */ $s = 70; case 70: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		c = _r$13;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_7 = c;
			/* */ if (_7 === (45)) { $s = 72; continue; }
			/* */ if (_7 === (60)) { $s = 73; continue; }
			/* */ $s = 74; continue;
			/* if (_7 === (45)) { */ case 72:
				/* goto scriptDataDoubleEscapedDashDash */ $s = 75; continue;
				$s = 74; continue;
			/* } else if (_7 === (60)) { */ case 73:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 69; continue;
			/* } */ case 74:
		case 71:
		/* goto scriptDataDoubleEscaped */ $s = 62; continue;
		/* scriptDataDoubleEscapedDashDash: */ case 75:
		_r$14 = z[0].readByte(); /* */ $s = 76; case 76: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		c = _r$14;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_8 = c;
			/* */ if (_8 === (45)) { $s = 78; continue; }
			/* */ if (_8 === (60)) { $s = 79; continue; }
			/* */ if (_8 === (62)) { $s = 80; continue; }
			/* */ $s = 81; continue;
			/* if (_8 === (45)) { */ case 78:
				/* goto scriptDataDoubleEscapedDashDash */ $s = 75; continue;
				$s = 81; continue;
			/* } else if (_8 === (60)) { */ case 79:
				/* goto scriptDataDoubleEscapedLessThanSign */ $s = 69; continue;
				$s = 81; continue;
			/* } else if (_8 === (62)) { */ case 80:
				/* goto scriptData */ $s = 1; continue;
			/* } */ case 81:
		case 77:
		/* goto scriptDataDoubleEscaped */ $s = 62; continue;
		/* scriptDataDoubleEscapedLessThanSign: */ case 69:
		_r$15 = z[0].readByte(); /* */ $s = 82; case 82: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		c = _r$15;
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* */ if (c === 47) { $s = 83; continue; }
		/* */ $s = 84; continue;
		/* if (c === 47) { */ case 83:
			/* goto scriptDataDoubleEscapeEnd */ $s = 85; continue;
		/* } */ case 84:
		z[0].raw.end = z[0].raw.end - (1) >> 0;
		/* goto scriptDataDoubleEscaped */ $s = 62; continue;
		/* scriptDataDoubleEscapeEnd: */ case 85:
		_r$16 = z[0].readRawEndTag(); /* */ $s = 88; case 88: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ if (_r$16) { $s = 86; continue; }
		/* */ $s = 87; continue;
		/* if (_r$16) { */ case 86:
			z[0].raw.end = z[0].raw.end + (9) >> 0;
			/* goto scriptDataEscaped */ $s = 24; continue;
		/* } */ case 87:
		if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* goto scriptDataDoubleEscaped */ $s = 62; continue;
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readScript }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._8 = _8; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.c = c; $f.i = i; $f.z = z; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tokenizer.prototype.readScript = function() { return this.$val.readScript(); };
	Tokenizer.ptr.prototype.readComment = function() {
		var $ptr, _1, _r, _r$1, c, dashCount, z, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; c = $f.c; dashCount = $f.dashCount; z = $f.z; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		z = [z];
		z[0] = this;
		z[0].data.start = z[0].raw.end;
		$deferred.push([(function(z) { return function() {
			var $ptr;
			if (z[0].data.end < z[0].data.start) {
				z[0].data.end = z[0].data.start;
			}
		}; })(z), []]);
		dashCount = 2;
		/* while (true) { */ case 1:
			_r = z[0].readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
				if (dashCount > 2) {
					dashCount = 2;
				}
				z[0].data.end = z[0].raw.end - dashCount >> 0;
				$s = -1; return;
				return;
			}
				_1 = c;
				/* */ if (_1 === (45)) { $s = 5; continue; }
				/* */ if (_1 === (62)) { $s = 6; continue; }
				/* */ if (_1 === (33)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (45)) { */ case 5:
					dashCount = dashCount + (1) >> 0;
					/* continue; */ $s = 1; continue;
					$s = 8; continue;
				/* } else if (_1 === (62)) { */ case 6:
					if (dashCount >= 2) {
						z[0].data.end = z[0].raw.end - 3 >> 0;
						$s = -1; return;
						return;
					}
					$s = 8; continue;
				/* } else if (_1 === (33)) { */ case 7:
					/* */ if (dashCount >= 2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (dashCount >= 2) { */ case 9:
						_r$1 = z[0].readByte(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						c = _r$1;
						if (!($interfaceIsEqual(z[0].err, $ifaceNil))) {
							z[0].data.end = z[0].raw.end;
							$s = -1; return;
							return;
						}
						if (c === 62) {
							z[0].data.end = z[0].raw.end - 4 >> 0;
							$s = -1; return;
							return;
						}
					/* } */ case 10:
				/* } */ case 8:
			case 4:
			dashCount = 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readComment }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.dashCount = dashCount; $f.z = z; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tokenizer.prototype.readComment = function() { return this.$val.readComment(); };
	Tokenizer.ptr.prototype.readUntilCloseAngle = function() {
		var $ptr, _r, c, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.data.start = z.raw.end;
		/* while (true) { */ case 1:
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return;
				return;
			}
			if (c === 62) {
				z.data.end = z.raw.end - 1 >> 0;
				$s = -1; return;
				return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readUntilCloseAngle }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readUntilCloseAngle = function() { return this.$val.readUntilCloseAngle(); };
	Tokenizer.ptr.prototype.readMarkupDeclaration = function() {
		var $ptr, _r, _r$1, _r$2, _v, c, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; c = $f.c; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.data.start = z.raw.end;
		c = arrayType$3.zero();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= c.length) ? $throwRuntimeError("index out of range") : c[i] = _r);
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return 5;
				return 5;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if ((c[0] === 45) && (c[1] === 45)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((c[0] === 45) && (c[1] === 45)) { */ case 4:
			$r = z.readComment(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return 5;
			return 5;
		/* } */ case 5:
		z.raw.end = z.raw.end - (2) >> 0;
		_r$1 = z.readDoctype(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_r$1) { */ case 7:
			$s = -1; return 6;
			return 6;
		/* } */ case 8:
		if (!(z.allowCDATA)) { _v = false; $s = 12; continue s; }
		_r$2 = z.readCDATA(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			z.convertNUL = true;
			$s = -1; return 1;
			return 1;
		/* } */ case 11:
		$r = z.readUntilCloseAngle(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return 5;
		return 5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readMarkupDeclaration }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.c = c; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readMarkupDeclaration = function() { return this.$val.readMarkupDeclaration(); };
	Tokenizer.ptr.prototype.readDoctype = function() {
		var $ptr, _r, c, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 7)) { break; } */ if(!(i < 7)) { $s = 2; continue; }
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return false;
				return false;
			}
			if (!((c === "DOCTYPE".charCodeAt(i))) && !((c === ("DOCTYPE".charCodeAt(i) + 32 << 24 >>> 24)))) {
				z.raw.end = z.data.start;
				$s = -1; return false;
				return false;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = z.skipWhiteSpace(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			z.data.start = z.raw.end;
			z.data.end = z.raw.end;
			$s = -1; return true;
			return true;
		}
		$r = z.readUntilCloseAngle(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readDoctype }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readDoctype = function() { return this.$val.readDoctype(); };
	Tokenizer.ptr.prototype.readCDATA = function() {
		var $ptr, _1, _r, _r$1, brackets, c, c$1, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; brackets = $f.brackets; c = $f.c; c$1 = $f.c$1; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 7)) { break; } */ if(!(i < 7)) { $s = 2; continue; }
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return false;
				return false;
			}
			if (!((c === "[CDATA[".charCodeAt(i)))) {
				z.raw.end = z.data.start;
				$s = -1; return false;
				return false;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		z.data.start = z.raw.end;
		brackets = 0;
		/* while (true) { */ case 4:
			_r$1 = z.readByte(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			c$1 = _r$1;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return true;
				return true;
			}
			_1 = c$1;
			if (_1 === (93)) {
				brackets = brackets + (1) >> 0;
			} else if (_1 === (62)) {
				if (brackets >= 2) {
					z.data.end = z.raw.end - 3 >> 0;
					$s = -1; return true;
					return true;
				}
				brackets = 0;
			} else {
				brackets = 0;
			}
		/* } */ $s = 4; continue; case 5:
		$s = -1; return false;
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readCDATA }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.brackets = brackets; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readCDATA = function() { return this.$val.readCDATA(); };
	Tokenizer.ptr.prototype.startTagIn = function(ss) {
		var $ptr, _i, _ref, c, i, s, ss, x, x$1, z;
		z = this;
		_ref = ss;
		_i = 0;
		loop:
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(((z.data.end - z.data.start >> 0) === s.length))) {
				_i++;
				continue loop;
			}
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c = (x = z.buf, x$1 = z.data.start + i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
				if (65 <= c && c <= 90) {
					c = c + (32) << 24 >>> 24;
				}
				if (!((c === s.charCodeAt(i)))) {
					_i++;
					continue loop;
				}
				i = i + (1) >> 0;
			}
			return true;
		}
		return false;
	};
	Tokenizer.prototype.startTagIn = function(ss) { return this.$val.startTagIn(ss); };
	Tokenizer.ptr.prototype.readStartTag = function() {
		var $ptr, _1, _r, _tmp, _tmp$1, c, raw, x, x$1, x$2, x$3, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; c = $f.c; raw = $f.raw; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = z.readTag(true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return 0;
			return 0;
		}
		_tmp = (x = z.buf, x$1 = z.data.start, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_tmp$1 = false;
		c = _tmp;
		raw = _tmp$1;
		if (65 <= c && c <= 90) {
			c = c + (32) << 24 >>> 24;
		}
		_1 = c;
		if (_1 === (105)) {
			raw = z.startTagIn(new sliceType(["iframe"]));
		} else if (_1 === (110)) {
			raw = z.startTagIn(new sliceType(["noembed", "noframes", "noscript"]));
		} else if (_1 === (112)) {
			raw = z.startTagIn(new sliceType(["plaintext"]));
		} else if (_1 === (115)) {
			raw = z.startTagIn(new sliceType(["script", "style"]));
		} else if (_1 === (116)) {
			raw = z.startTagIn(new sliceType(["textarea", "title"]));
		} else if (_1 === (120)) {
			raw = z.startTagIn(new sliceType(["xmp"]));
		}
		/* */ if (raw) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (raw) { */ case 2:
			_r = strings.ToLower($bytesToString($subslice(z.buf, z.data.start, z.data.end))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			z.rawTag = _r;
		/* } */ case 3:
		if ($interfaceIsEqual(z.err, $ifaceNil) && ((x$2 = z.buf, x$3 = z.raw.end - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) === 47)) {
			$s = -1; return 4;
			return 4;
		}
		$s = -1; return 2;
		return 2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readStartTag }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.c = c; $f.raw = raw; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readStartTag = function() { return this.$val.readStartTag(); };
	Tokenizer.ptr.prototype.readTag = function(saveAttr) {
		var $ptr, _r, c, saveAttr, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; saveAttr = $f.saveAttr; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.attr = $subslice(z.attr, 0, 0);
		z.nAttrReturned = 0;
		$r = z.readTagName(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = z.skipWhiteSpace(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		/* while (true) { */ case 3:
			_r = z.readByte(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil)) || (c === 62)) {
				/* break; */ $s = 4; continue;
			}
			z.raw.end = z.raw.end - (1) >> 0;
			$r = z.readTagAttrKey(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = z.readTagAttrVal(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (saveAttr && !((z.pendingAttr[0].start === z.pendingAttr[0].end))) {
				z.attr = $append(z.attr, z.pendingAttr);
			}
			$r = z.skipWhiteSpace(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				/* break; */ $s = 4; continue;
			}
		/* } */ $s = 3; continue; case 4:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readTag }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.saveAttr = saveAttr; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readTag = function(saveAttr) { return this.$val.readTag(saveAttr); };
	Tokenizer.ptr.prototype.readTagName = function() {
		var $ptr, _1, _r, c, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; c = $f.c; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.data.start = z.raw.end - 1 >> 0;
		/* while (true) { */ case 1:
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.data.end = z.raw.end;
				$s = -1; return;
				return;
			}
			_1 = c;
			if ((_1 === (32)) || (_1 === (10)) || (_1 === (13)) || (_1 === (9)) || (_1 === (12))) {
				z.data.end = z.raw.end - 1 >> 0;
				$s = -1; return;
				return;
			} else if ((_1 === (47)) || (_1 === (62))) {
				z.raw.end = z.raw.end - (1) >> 0;
				z.data.end = z.raw.end;
				$s = -1; return;
				return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readTagName }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.c = c; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readTagName = function() { return this.$val.readTagName(); };
	Tokenizer.ptr.prototype.readTagAttrKey = function() {
		var $ptr, _1, _r, c, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; c = $f.c; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.pendingAttr[0].start = z.raw.end;
		/* while (true) { */ case 1:
			_r = z.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			c = _r;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				z.pendingAttr[0].end = z.raw.end;
				$s = -1; return;
				return;
			}
			_1 = c;
			if ((_1 === (32)) || (_1 === (10)) || (_1 === (13)) || (_1 === (9)) || (_1 === (12)) || (_1 === (47))) {
				z.pendingAttr[0].end = z.raw.end - 1 >> 0;
				$s = -1; return;
				return;
			} else if ((_1 === (61)) || (_1 === (62))) {
				z.raw.end = z.raw.end - (1) >> 0;
				z.pendingAttr[0].end = z.raw.end;
				$s = -1; return;
				return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readTagAttrKey }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.c = c; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readTagAttrKey = function() { return this.$val.readTagAttrKey(); };
	Tokenizer.ptr.prototype.readTagAttrVal = function() {
		var $ptr, _1, _2, _r, _r$1, _r$2, _r$3, c, c$1, c$2, quote, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; quote = $f.quote; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.pendingAttr[1].start = z.raw.end;
		z.pendingAttr[1].end = z.raw.end;
		$r = z.skipWhiteSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		_r = z.readByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		if (!((c === 61))) {
			z.raw.end = z.raw.end - (1) >> 0;
			$s = -1; return;
			return;
		}
		$r = z.skipWhiteSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
		_r$1 = z.readByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		quote = _r$1;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return;
			return;
		}
			_1 = quote;
			/* */ if (_1 === (62)) { $s = 6; continue; }
			/* */ if ((_1 === (39)) || (_1 === (34))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (62)) { */ case 6:
				z.raw.end = z.raw.end - (1) >> 0;
				$s = -1; return;
				return;
			/* } else if ((_1 === (39)) || (_1 === (34))) { */ case 7:
				z.pendingAttr[1].start = z.raw.end;
				/* while (true) { */ case 10:
					_r$2 = z.readByte(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					c$1 = _r$2;
					if (!($interfaceIsEqual(z.err, $ifaceNil))) {
						z.pendingAttr[1].end = z.raw.end;
						$s = -1; return;
						return;
					}
					if (c$1 === quote) {
						z.pendingAttr[1].end = z.raw.end - 1 >> 0;
						$s = -1; return;
						return;
					}
				/* } */ $s = 10; continue; case 11:
				$s = 9; continue;
			/* } else { */ case 8:
				z.pendingAttr[1].start = z.raw.end - 1 >> 0;
				/* while (true) { */ case 13:
					_r$3 = z.readByte(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					c$2 = _r$3;
					if (!($interfaceIsEqual(z.err, $ifaceNil))) {
						z.pendingAttr[1].end = z.raw.end;
						$s = -1; return;
						return;
					}
					_2 = c$2;
					if ((_2 === (32)) || (_2 === (10)) || (_2 === (13)) || (_2 === (9)) || (_2 === (12))) {
						z.pendingAttr[1].end = z.raw.end - 1 >> 0;
						$s = -1; return;
						return;
					} else if (_2 === (62)) {
						z.raw.end = z.raw.end - (1) >> 0;
						z.pendingAttr[1].end = z.raw.end;
						$s = -1; return;
						return;
					}
				/* } */ $s = 13; continue; case 14:
			/* } */ case 9:
		case 5:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.readTagAttrVal }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.quote = quote; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.readTagAttrVal = function() { return this.$val.readTagAttrVal(); };
	Tokenizer.ptr.prototype.Next = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, c, tokenType, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; c = $f.c; tokenType = $f.tokenType; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.raw.start = z.raw.end;
		z.data.start = z.raw.end;
		z.data.end = z.raw.end;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			z.tt = 0;
			$s = -1; return z.tt;
			return z.tt;
		}
		/* */ if (!(z.rawTag === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z.rawTag === "")) { */ case 1:
			/* */ if (z.rawTag === "plaintext") { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (z.rawTag === "plaintext") { */ case 3:
				/* while (true) { */ case 6:
					/* if (!($interfaceIsEqual(z.err, $ifaceNil))) { break; } */ if(!($interfaceIsEqual(z.err, $ifaceNil))) { $s = 7; continue; }
					_r = z.readByte(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
				/* } */ $s = 6; continue; case 7:
				z.data.end = z.raw.end;
				z.textIsRaw = true;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = z.readRawOrRCDATA(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			if (z.data.end > z.data.start) {
				z.tt = 1;
				z.convertNUL = true;
				$s = -1; return z.tt;
				return z.tt;
			}
		/* } */ case 2:
		z.textIsRaw = false;
		z.convertNUL = false;
		/* while (true) { */ case 10:
			_r$1 = z.readByte(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			c = _r$1;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				/* break loop; */ $s = 11; continue s;
			}
			/* */ if (!((c === 60))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!((c === 60))) { */ case 13:
				/* continue loop; */ $s = 10; continue s;
			/* } */ case 14:
			_r$2 = z.readByte(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			c = _r$2;
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				/* break loop; */ $s = 11; continue s;
			}
			tokenType = 0;
				if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
					tokenType = 2;
				} else if ((c === 47)) {
					tokenType = 3;
				} else if ((c === 33) || (c === 63)) {
					tokenType = 5;
				} else {
					z.raw.end = z.raw.end - (1) >> 0;
					/* continue; */ $s = 10; continue;
				}
			case 16:
			x = z.raw.end - 2 >> 0;
			if (z.raw.start < x) {
				z.raw.end = x;
				z.data.end = x;
				z.tt = 1;
				$s = -1; return z.tt;
				return z.tt;
			}
				_1 = tokenType;
				/* */ if (_1 === (2)) { $s = 18; continue; }
				/* */ if (_1 === (3)) { $s = 19; continue; }
				/* */ if (_1 === (5)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_1 === (2)) { */ case 18:
					_r$3 = z.readStartTag(); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					z.tt = _r$3;
					$s = -1; return z.tt;
					return z.tt;
				/* } else if (_1 === (3)) { */ case 19:
					_r$4 = z.readByte(); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					c = _r$4;
					if (!($interfaceIsEqual(z.err, $ifaceNil))) {
						/* break loop; */ $s = 11; continue s;
					}
					if (c === 62) {
						z.tt = 5;
						$s = -1; return z.tt;
						return z.tt;
					}
					/* */ if (97 <= c && c <= 122 || 65 <= c && c <= 90) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (97 <= c && c <= 122 || 65 <= c && c <= 90) { */ case 24:
						$r = z.readTag(false); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						if (!($interfaceIsEqual(z.err, $ifaceNil))) {
							z.tt = 0;
						} else {
							z.tt = 3;
						}
						$s = -1; return z.tt;
						return z.tt;
					/* } */ case 25:
					z.raw.end = z.raw.end - (1) >> 0;
					$r = z.readUntilCloseAngle(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					z.tt = 5;
					$s = -1; return z.tt;
					return z.tt;
				/* } else if (_1 === (5)) { */ case 20:
					/* */ if (c === 33) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (c === 33) { */ case 28:
						_r$5 = z.readMarkupDeclaration(); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						z.tt = _r$5;
						$s = -1; return z.tt;
						return z.tt;
					/* } */ case 29:
					z.raw.end = z.raw.end - (1) >> 0;
					$r = z.readUntilCloseAngle(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					z.tt = 5;
					$s = -1; return z.tt;
					return z.tt;
				/* } */ case 21:
			case 17:
		/* } */ $s = 10; continue; case 11:
		if (z.raw.start < z.raw.end) {
			z.data.end = z.raw.end;
			z.tt = 1;
			$s = -1; return z.tt;
			return z.tt;
		}
		z.tt = 0;
		$s = -1; return z.tt;
		return z.tt;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tokenizer.ptr.prototype.Next }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.c = c; $f.tokenType = tokenType; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tokenizer.prototype.Next = function() { return this.$val.Next(); };
	Tokenizer.ptr.prototype.Raw = function() {
		var $ptr, z;
		z = this;
		return $subslice(z.buf, z.raw.start, z.raw.end);
	};
	Tokenizer.prototype.Raw = function() { return this.$val.Raw(); };
	convertNewlines = function(s) {
		var $ptr, _i, _ref, c, dst, i, s, src, x;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === 13))) {
				_i++;
				continue;
			}
			src = i + 1 >> 0;
			if (src >= s.$length || !((((src < 0 || src >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + src]) === 10))) {
				((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = 10);
				_i++;
				continue;
			}
			dst = i;
			while (true) {
				if (!(src < s.$length)) { break; }
				if (((src < 0 || src >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + src]) === 13) {
					if ((src + 1 >> 0) < s.$length && ((x = src + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 10)) {
						src = src + (1) >> 0;
					}
					((dst < 0 || dst >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + dst] = 10);
				} else {
					((dst < 0 || dst >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + dst] = ((src < 0 || src >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + src]));
				}
				src = src + (1) >> 0;
				dst = dst + (1) >> 0;
			}
			return $subslice(s, 0, dst);
		}
		return s;
	};
	Tokenizer.ptr.prototype.Text = function() {
		var $ptr, _1, s, z;
		z = this;
		_1 = z.tt;
		if ((_1 === (1)) || (_1 === (5)) || (_1 === (6))) {
			s = $subslice(z.buf, z.data.start, z.data.end);
			z.data.start = z.raw.end;
			z.data.end = z.raw.end;
			s = convertNewlines(s);
			if ((z.convertNUL || (z.tt === 5)) && bytes.Contains(s, nul)) {
				s = bytes.Replace(s, nul, replacement, -1);
			}
			if (!z.textIsRaw) {
				s = unescape(s, false);
			}
			return s;
		}
		return sliceType$3.nil;
	};
	Tokenizer.prototype.Text = function() { return this.$val.Text(); };
	Tokenizer.ptr.prototype.TagName = function() {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, hasAttr, name, s, z;
		name = sliceType$3.nil;
		hasAttr = false;
		z = this;
		if (z.data.start < z.data.end) {
			_1 = z.tt;
			if ((_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
				s = $subslice(z.buf, z.data.start, z.data.end);
				z.data.start = z.raw.end;
				z.data.end = z.raw.end;
				_tmp = lower(s);
				_tmp$1 = z.nAttrReturned < z.attr.$length;
				name = _tmp;
				hasAttr = _tmp$1;
				return [name, hasAttr];
			}
		}
		_tmp$2 = sliceType$3.nil;
		_tmp$3 = false;
		name = _tmp$2;
		hasAttr = _tmp$3;
		return [name, hasAttr];
	};
	Tokenizer.prototype.TagName = function() { return this.$val.TagName(); };
	Tokenizer.ptr.prototype.TagAttr = function() {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, key, moreAttr, val, x, x$1, x$2, z;
		key = sliceType$3.nil;
		val = sliceType$3.nil;
		moreAttr = false;
		z = this;
		if (z.nAttrReturned < z.attr.$length) {
			_1 = z.tt;
			if ((_1 === (2)) || (_1 === (4))) {
				x$2 = $clone((x = z.attr, x$1 = z.nAttrReturned, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])), arrayType$4);
				z.nAttrReturned = z.nAttrReturned + (1) >> 0;
				key = $subslice(z.buf, x$2[0].start, x$2[0].end);
				val = $subslice(z.buf, x$2[1].start, x$2[1].end);
				_tmp = lower(key);
				_tmp$1 = unescape(convertNewlines(val), true);
				_tmp$2 = z.nAttrReturned < z.attr.$length;
				key = _tmp;
				val = _tmp$1;
				moreAttr = _tmp$2;
				return [key, val, moreAttr];
			}
		}
		_tmp$3 = sliceType$3.nil;
		_tmp$4 = sliceType$3.nil;
		_tmp$5 = false;
		key = _tmp$3;
		val = _tmp$4;
		moreAttr = _tmp$5;
		return [key, val, moreAttr];
	};
	Tokenizer.prototype.TagAttr = function() { return this.$val.TagAttr(); };
	Tokenizer.ptr.prototype.Token = function() {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, a, key, moreAttr, name, t, val, z;
		z = this;
		t = new Token.ptr(z.tt, 0, "", sliceType$1.nil);
		_1 = z.tt;
		if ((_1 === (1)) || (_1 === (5)) || (_1 === (6))) {
			t.Data = $bytesToString(z.Text());
		} else if ((_1 === (2)) || (_1 === (4)) || (_1 === (3))) {
			_tuple = z.TagName();
			name = _tuple[0];
			moreAttr = _tuple[1];
			while (true) {
				if (!(moreAttr)) { break; }
				_tmp = sliceType$3.nil;
				_tmp$1 = sliceType$3.nil;
				key = _tmp;
				val = _tmp$1;
				_tuple$1 = z.TagAttr();
				key = _tuple$1[0];
				val = _tuple$1[1];
				moreAttr = _tuple$1[2];
				t.Attr = $append(t.Attr, new Attribute.ptr("", atom.String(key), $bytesToString(val)));
			}
			a = atom.Lookup(name);
			if (!((a === 0))) {
				_tmp$2 = a;
				_tmp$3 = new atom.Atom(a).String();
				t.DataAtom = _tmp$2;
				t.Data = _tmp$3;
			} else {
				_tmp$4 = 0;
				_tmp$5 = $bytesToString(name);
				t.DataAtom = _tmp$4;
				t.Data = _tmp$5;
			}
		}
		return t;
	};
	Tokenizer.prototype.Token = function() { return this.$val.Token(); };
	Tokenizer.ptr.prototype.SetMaxBuf = function(n) {
		var $ptr, n, z;
		z = this;
		z.maxBuf = n;
	};
	Tokenizer.prototype.SetMaxBuf = function(n) { return this.$val.SetMaxBuf(n); };
	NewTokenizerFragment = function(r, contextTag) {
		var $ptr, _1, _r, contextTag, r, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; contextTag = $f.contextTag; r = $f.r; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new Tokenizer.ptr(r, 0, $ifaceNil, $ifaceNil, new span.ptr(0, 0), $makeSlice(sliceType$3, 0, 4096), 0, new span.ptr(0, 0), arrayType$4.zero(), sliceType$6.nil, 0, "", false, false, false);
		/* */ if (!(contextTag === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(contextTag === "")) { */ case 1:
				_r = strings.ToLower(contextTag); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				_1 = s;
				if (_1 === ("iframe") || _1 === ("noembed") || _1 === ("noframes") || _1 === ("noscript") || _1 === ("plaintext") || _1 === ("script") || _1 === ("style") || _1 === ("title") || _1 === ("textarea") || _1 === ("xmp")) {
					z.rawTag = s;
				}
			case 3:
		/* } */ case 2:
		$s = -1; return z;
		return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewTokenizerFragment }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.contextTag = contextTag; $f.r = r; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewTokenizerFragment = NewTokenizerFragment;
	ptrType.methods = [{prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "clone", name: "clone", pkg: "golang.org/x/net/html", typ: $funcType([], [ptrType], false)}];
	ptrType$1.methods = [{prop: "pop", name: "pop", pkg: "golang.org/x/net/html", typ: $funcType([], [ptrType], false)}, {prop: "top", name: "top", pkg: "golang.org/x/net/html", typ: $funcType([], [ptrType], false)}, {prop: "index", name: "index", pkg: "golang.org/x/net/html", typ: $funcType([ptrType], [$Int], false)}, {prop: "insert", name: "insert", pkg: "golang.org/x/net/html", typ: $funcType([$Int, ptrType], [], false)}, {prop: "remove", name: "remove", pkg: "golang.org/x/net/html", typ: $funcType([ptrType], [], false)}];
	ptrType$3.methods = [{prop: "top", name: "top", pkg: "golang.org/x/net/html", typ: $funcType([], [ptrType], false)}, {prop: "popUntil", name: "popUntil", pkg: "golang.org/x/net/html", typ: $funcType([scope, sliceType$2], [$Bool], true)}, {prop: "indexOfElementInScope", name: "indexOfElementInScope", pkg: "golang.org/x/net/html", typ: $funcType([scope, sliceType$2], [$Int], true)}, {prop: "elementInScope", name: "elementInScope", pkg: "golang.org/x/net/html", typ: $funcType([scope, sliceType$2], [$Bool], true)}, {prop: "clearStackToContext", name: "clearStackToContext", pkg: "golang.org/x/net/html", typ: $funcType([scope], [], false)}, {prop: "generateImpliedEndTags", name: "generateImpliedEndTags", pkg: "golang.org/x/net/html", typ: $funcType([sliceType], [], true)}, {prop: "addChild", name: "addChild", pkg: "golang.org/x/net/html", typ: $funcType([ptrType], [], false)}, {prop: "shouldFosterParent", name: "shouldFosterParent", pkg: "golang.org/x/net/html", typ: $funcType([], [$Bool], false)}, {prop: "fosterParent", name: "fosterParent", pkg: "golang.org/x/net/html", typ: $funcType([ptrType], [], false)}, {prop: "addText", name: "addText", pkg: "golang.org/x/net/html", typ: $funcType([$String], [], false)}, {prop: "addElement", name: "addElement", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "addFormattingElement", name: "addFormattingElement", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "clearActiveFormattingElements", name: "clearActiveFormattingElements", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "reconstructActiveFormattingElements", name: "reconstructActiveFormattingElements", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "acknowledgeSelfClosingTag", name: "acknowledgeSelfClosingTag", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "setOriginalIM", name: "setOriginalIM", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "resetInsertionMode", name: "resetInsertionMode", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "inBodyEndTagFormatting", name: "inBodyEndTagFormatting", pkg: "golang.org/x/net/html", typ: $funcType([atom.Atom], [], false)}, {prop: "inBodyEndTagOther", name: "inBodyEndTagOther", pkg: "golang.org/x/net/html", typ: $funcType([atom.Atom], [], false)}, {prop: "inForeignContent", name: "inForeignContent", pkg: "golang.org/x/net/html", typ: $funcType([], [$Bool], false)}, {prop: "parseImpliedToken", name: "parseImpliedToken", pkg: "golang.org/x/net/html", typ: $funcType([TokenType, atom.Atom, $String], [], false)}, {prop: "parseCurrentToken", name: "parseCurrentToken", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "parse", name: "parse", pkg: "golang.org/x/net/html", typ: $funcType([], [$error], false)}];
	TokenType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Token.methods = [{prop: "tagString", name: "tagString", pkg: "golang.org/x/net/html", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AllowCDATA", name: "AllowCDATA", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "NextIsNotRawText", name: "NextIsNotRawText", pkg: "", typ: $funcType([], [], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readByte", name: "readByte", pkg: "golang.org/x/net/html", typ: $funcType([], [$Uint8], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "skipWhiteSpace", name: "skipWhiteSpace", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readRawOrRCDATA", name: "readRawOrRCDATA", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readRawEndTag", name: "readRawEndTag", pkg: "golang.org/x/net/html", typ: $funcType([], [$Bool], false)}, {prop: "readScript", name: "readScript", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readComment", name: "readComment", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readUntilCloseAngle", name: "readUntilCloseAngle", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readMarkupDeclaration", name: "readMarkupDeclaration", pkg: "golang.org/x/net/html", typ: $funcType([], [TokenType], false)}, {prop: "readDoctype", name: "readDoctype", pkg: "golang.org/x/net/html", typ: $funcType([], [$Bool], false)}, {prop: "readCDATA", name: "readCDATA", pkg: "golang.org/x/net/html", typ: $funcType([], [$Bool], false)}, {prop: "startTagIn", name: "startTagIn", pkg: "golang.org/x/net/html", typ: $funcType([sliceType], [$Bool], true)}, {prop: "readStartTag", name: "readStartTag", pkg: "golang.org/x/net/html", typ: $funcType([], [TokenType], false)}, {prop: "readTag", name: "readTag", pkg: "golang.org/x/net/html", typ: $funcType([$Bool], [], false)}, {prop: "readTagName", name: "readTagName", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readTagAttrKey", name: "readTagAttrKey", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "readTagAttrVal", name: "readTagAttrVal", pkg: "golang.org/x/net/html", typ: $funcType([], [], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [TokenType], false)}, {prop: "Raw", name: "Raw", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "TagName", name: "TagName", pkg: "", typ: $funcType([], [sliceType$3, $Bool], false)}, {prop: "TagAttr", name: "TagAttr", pkg: "", typ: $funcType([], [sliceType$3, sliceType$3, $Bool], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([], [Token], false)}, {prop: "SetMaxBuf", name: "SetMaxBuf", pkg: "", typ: $funcType([$Int], [], false)}];
	Node.init("", [{prop: "Parent", name: "Parent", exported: true, typ: ptrType, tag: ""}, {prop: "FirstChild", name: "FirstChild", exported: true, typ: ptrType, tag: ""}, {prop: "LastChild", name: "LastChild", exported: true, typ: ptrType, tag: ""}, {prop: "PrevSibling", name: "PrevSibling", exported: true, typ: ptrType, tag: ""}, {prop: "NextSibling", name: "NextSibling", exported: true, typ: ptrType, tag: ""}, {prop: "Type", name: "Type", exported: true, typ: NodeType, tag: ""}, {prop: "DataAtom", name: "DataAtom", exported: true, typ: atom.Atom, tag: ""}, {prop: "Data", name: "Data", exported: true, typ: $String, tag: ""}, {prop: "Namespace", name: "Namespace", exported: true, typ: $String, tag: ""}, {prop: "Attr", name: "Attr", exported: true, typ: sliceType$1, tag: ""}]);
	nodeStack.init(ptrType);
	parser.init("golang.org/x/net/html", [{prop: "tokenizer", name: "tokenizer", exported: false, typ: ptrType$2, tag: ""}, {prop: "tok", name: "tok", exported: false, typ: Token, tag: ""}, {prop: "hasSelfClosingToken", name: "hasSelfClosingToken", exported: false, typ: $Bool, tag: ""}, {prop: "doc", name: "doc", exported: false, typ: ptrType, tag: ""}, {prop: "oe", name: "oe", exported: false, typ: nodeStack, tag: ""}, {prop: "afe", name: "afe", exported: false, typ: nodeStack, tag: ""}, {prop: "head", name: "head", exported: false, typ: ptrType, tag: ""}, {prop: "form", name: "form", exported: false, typ: ptrType, tag: ""}, {prop: "scripting", name: "scripting", exported: false, typ: $Bool, tag: ""}, {prop: "framesetOK", name: "framesetOK", exported: false, typ: $Bool, tag: ""}, {prop: "im", name: "im", exported: false, typ: insertionMode, tag: ""}, {prop: "originalIM", name: "originalIM", exported: false, typ: insertionMode, tag: ""}, {prop: "fosterParenting", name: "fosterParenting", exported: false, typ: $Bool, tag: ""}, {prop: "quirks", name: "quirks", exported: false, typ: $Bool, tag: ""}, {prop: "fragment", name: "fragment", exported: false, typ: $Bool, tag: ""}, {prop: "context", name: "context", exported: false, typ: ptrType, tag: ""}]);
	insertionMode.init([ptrType$3], [$Bool], false);
	writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$3], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	Attribute.init("", [{prop: "Namespace", name: "Namespace", exported: true, typ: $String, tag: ""}, {prop: "Key", name: "Key", exported: true, typ: $String, tag: ""}, {prop: "Val", name: "Val", exported: true, typ: $String, tag: ""}]);
	Token.init("", [{prop: "Type", name: "Type", exported: true, typ: TokenType, tag: ""}, {prop: "DataAtom", name: "DataAtom", exported: true, typ: atom.Atom, tag: ""}, {prop: "Data", name: "Data", exported: true, typ: $String, tag: ""}, {prop: "Attr", name: "Attr", exported: true, typ: sliceType$1, tag: ""}]);
	span.init("golang.org/x/net/html", [{prop: "start", name: "start", exported: false, typ: $Int, tag: ""}, {prop: "end", name: "end", exported: false, typ: $Int, tag: ""}]);
	Tokenizer.init("golang.org/x/net/html", [{prop: "r", name: "r", exported: false, typ: io.Reader, tag: ""}, {prop: "tt", name: "tt", exported: false, typ: TokenType, tag: ""}, {prop: "err", name: "err", exported: false, typ: $error, tag: ""}, {prop: "readErr", name: "readErr", exported: false, typ: $error, tag: ""}, {prop: "raw", name: "raw", exported: false, typ: span, tag: ""}, {prop: "buf", name: "buf", exported: false, typ: sliceType$3, tag: ""}, {prop: "maxBuf", name: "maxBuf", exported: false, typ: $Int, tag: ""}, {prop: "data", name: "data", exported: false, typ: span, tag: ""}, {prop: "pendingAttr", name: "pendingAttr", exported: false, typ: arrayType$4, tag: ""}, {prop: "attr", name: "attr", exported: false, typ: sliceType$6, tag: ""}, {prop: "nAttrReturned", name: "nAttrReturned", exported: false, typ: $Int, tag: ""}, {prop: "rawTag", name: "rawTag", exported: false, typ: $String, tag: ""}, {prop: "textIsRaw", name: "textIsRaw", exported: false, typ: $Bool, tag: ""}, {prop: "convertNUL", name: "convertNUL", exported: false, typ: $Bool, tag: ""}, {prop: "allowCDATA", name: "allowCDATA", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atom.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		isSpecialElementMap = $makeMap($String.keyFor, [{ k: "address", v: true }, { k: "applet", v: true }, { k: "area", v: true }, { k: "article", v: true }, { k: "aside", v: true }, { k: "base", v: true }, { k: "basefont", v: true }, { k: "bgsound", v: true }, { k: "blockquote", v: true }, { k: "body", v: true }, { k: "br", v: true }, { k: "button", v: true }, { k: "caption", v: true }, { k: "center", v: true }, { k: "col", v: true }, { k: "colgroup", v: true }, { k: "dd", v: true }, { k: "details", v: true }, { k: "dir", v: true }, { k: "div", v: true }, { k: "dl", v: true }, { k: "dt", v: true }, { k: "embed", v: true }, { k: "fieldset", v: true }, { k: "figcaption", v: true }, { k: "figure", v: true }, { k: "footer", v: true }, { k: "form", v: true }, { k: "frame", v: true }, { k: "frameset", v: true }, { k: "h1", v: true }, { k: "h2", v: true }, { k: "h3", v: true }, { k: "h4", v: true }, { k: "h5", v: true }, { k: "h6", v: true }, { k: "head", v: true }, { k: "header", v: true }, { k: "hgroup", v: true }, { k: "hr", v: true }, { k: "html", v: true }, { k: "iframe", v: true }, { k: "img", v: true }, { k: "input", v: true }, { k: "isindex", v: true }, { k: "li", v: true }, { k: "link", v: true }, { k: "listing", v: true }, { k: "marquee", v: true }, { k: "menu", v: true }, { k: "meta", v: true }, { k: "nav", v: true }, { k: "noembed", v: true }, { k: "noframes", v: true }, { k: "noscript", v: true }, { k: "object", v: true }, { k: "ol", v: true }, { k: "p", v: true }, { k: "param", v: true }, { k: "plaintext", v: true }, { k: "pre", v: true }, { k: "script", v: true }, { k: "section", v: true }, { k: "select", v: true }, { k: "source", v: true }, { k: "style", v: true }, { k: "summary", v: true }, { k: "table", v: true }, { k: "tbody", v: true }, { k: "td", v: true }, { k: "template", v: true }, { k: "textarea", v: true }, { k: "tfoot", v: true }, { k: "th", v: true }, { k: "thead", v: true }, { k: "title", v: true }, { k: "tr", v: true }, { k: "track", v: true }, { k: "ul", v: true }, { k: "wbr", v: true }, { k: "xmp", v: true }]);
		entity = $makeMap($String.keyFor, [{ k: "AElig;", v: 198 }, { k: "AMP;", v: 38 }, { k: "Aacute;", v: 193 }, { k: "Abreve;", v: 258 }, { k: "Acirc;", v: 194 }, { k: "Acy;", v: 1040 }, { k: "Afr;", v: 120068 }, { k: "Agrave;", v: 192 }, { k: "Alpha;", v: 913 }, { k: "Amacr;", v: 256 }, { k: "And;", v: 10835 }, { k: "Aogon;", v: 260 }, { k: "Aopf;", v: 120120 }, { k: "ApplyFunction;", v: 8289 }, { k: "Aring;", v: 197 }, { k: "Ascr;", v: 119964 }, { k: "Assign;", v: 8788 }, { k: "Atilde;", v: 195 }, { k: "Auml;", v: 196 }, { k: "Backslash;", v: 8726 }, { k: "Barv;", v: 10983 }, { k: "Barwed;", v: 8966 }, { k: "Bcy;", v: 1041 }, { k: "Because;", v: 8757 }, { k: "Bernoullis;", v: 8492 }, { k: "Beta;", v: 914 }, { k: "Bfr;", v: 120069 }, { k: "Bopf;", v: 120121 }, { k: "Breve;", v: 728 }, { k: "Bscr;", v: 8492 }, { k: "Bumpeq;", v: 8782 }, { k: "CHcy;", v: 1063 }, { k: "COPY;", v: 169 }, { k: "Cacute;", v: 262 }, { k: "Cap;", v: 8914 }, { k: "CapitalDifferentialD;", v: 8517 }, { k: "Cayleys;", v: 8493 }, { k: "Ccaron;", v: 268 }, { k: "Ccedil;", v: 199 }, { k: "Ccirc;", v: 264 }, { k: "Cconint;", v: 8752 }, { k: "Cdot;", v: 266 }, { k: "Cedilla;", v: 184 }, { k: "CenterDot;", v: 183 }, { k: "Cfr;", v: 8493 }, { k: "Chi;", v: 935 }, { k: "CircleDot;", v: 8857 }, { k: "CircleMinus;", v: 8854 }, { k: "CirclePlus;", v: 8853 }, { k: "CircleTimes;", v: 8855 }, { k: "ClockwiseContourIntegral;", v: 8754 }, { k: "CloseCurlyDoubleQuote;", v: 8221 }, { k: "CloseCurlyQuote;", v: 8217 }, { k: "Colon;", v: 8759 }, { k: "Colone;", v: 10868 }, { k: "Congruent;", v: 8801 }, { k: "Conint;", v: 8751 }, { k: "ContourIntegral;", v: 8750 }, { k: "Copf;", v: 8450 }, { k: "Coproduct;", v: 8720 }, { k: "CounterClockwiseContourIntegral;", v: 8755 }, { k: "Cross;", v: 10799 }, { k: "Cscr;", v: 119966 }, { k: "Cup;", v: 8915 }, { k: "CupCap;", v: 8781 }, { k: "DD;", v: 8517 }, { k: "DDotrahd;", v: 10513 }, { k: "DJcy;", v: 1026 }, { k: "DScy;", v: 1029 }, { k: "DZcy;", v: 1039 }, { k: "Dagger;", v: 8225 }, { k: "Darr;", v: 8609 }, { k: "Dashv;", v: 10980 }, { k: "Dcaron;", v: 270 }, { k: "Dcy;", v: 1044 }, { k: "Del;", v: 8711 }, { k: "Delta;", v: 916 }, { k: "Dfr;", v: 120071 }, { k: "DiacriticalAcute;", v: 180 }, { k: "DiacriticalDot;", v: 729 }, { k: "DiacriticalDoubleAcute;", v: 733 }, { k: "DiacriticalGrave;", v: 96 }, { k: "DiacriticalTilde;", v: 732 }, { k: "Diamond;", v: 8900 }, { k: "DifferentialD;", v: 8518 }, { k: "Dopf;", v: 120123 }, { k: "Dot;", v: 168 }, { k: "DotDot;", v: 8412 }, { k: "DotEqual;", v: 8784 }, { k: "DoubleContourIntegral;", v: 8751 }, { k: "DoubleDot;", v: 168 }, { k: "DoubleDownArrow;", v: 8659 }, { k: "DoubleLeftArrow;", v: 8656 }, { k: "DoubleLeftRightArrow;", v: 8660 }, { k: "DoubleLeftTee;", v: 10980 }, { k: "DoubleLongLeftArrow;", v: 10232 }, { k: "DoubleLongLeftRightArrow;", v: 10234 }, { k: "DoubleLongRightArrow;", v: 10233 }, { k: "DoubleRightArrow;", v: 8658 }, { k: "DoubleRightTee;", v: 8872 }, { k: "DoubleUpArrow;", v: 8657 }, { k: "DoubleUpDownArrow;", v: 8661 }, { k: "DoubleVerticalBar;", v: 8741 }, { k: "DownArrow;", v: 8595 }, { k: "DownArrowBar;", v: 10515 }, { k: "DownArrowUpArrow;", v: 8693 }, { k: "DownBreve;", v: 785 }, { k: "DownLeftRightVector;", v: 10576 }, { k: "DownLeftTeeVector;", v: 10590 }, { k: "DownLeftVector;", v: 8637 }, { k: "DownLeftVectorBar;", v: 10582 }, { k: "DownRightTeeVector;", v: 10591 }, { k: "DownRightVector;", v: 8641 }, { k: "DownRightVectorBar;", v: 10583 }, { k: "DownTee;", v: 8868 }, { k: "DownTeeArrow;", v: 8615 }, { k: "Downarrow;", v: 8659 }, { k: "Dscr;", v: 119967 }, { k: "Dstrok;", v: 272 }, { k: "ENG;", v: 330 }, { k: "ETH;", v: 208 }, { k: "Eacute;", v: 201 }, { k: "Ecaron;", v: 282 }, { k: "Ecirc;", v: 202 }, { k: "Ecy;", v: 1069 }, { k: "Edot;", v: 278 }, { k: "Efr;", v: 120072 }, { k: "Egrave;", v: 200 }, { k: "Element;", v: 8712 }, { k: "Emacr;", v: 274 }, { k: "EmptySmallSquare;", v: 9723 }, { k: "EmptyVerySmallSquare;", v: 9643 }, { k: "Eogon;", v: 280 }, { k: "Eopf;", v: 120124 }, { k: "Epsilon;", v: 917 }, { k: "Equal;", v: 10869 }, { k: "EqualTilde;", v: 8770 }, { k: "Equilibrium;", v: 8652 }, { k: "Escr;", v: 8496 }, { k: "Esim;", v: 10867 }, { k: "Eta;", v: 919 }, { k: "Euml;", v: 203 }, { k: "Exists;", v: 8707 }, { k: "ExponentialE;", v: 8519 }, { k: "Fcy;", v: 1060 }, { k: "Ffr;", v: 120073 }, { k: "FilledSmallSquare;", v: 9724 }, { k: "FilledVerySmallSquare;", v: 9642 }, { k: "Fopf;", v: 120125 }, { k: "ForAll;", v: 8704 }, { k: "Fouriertrf;", v: 8497 }, { k: "Fscr;", v: 8497 }, { k: "GJcy;", v: 1027 }, { k: "GT;", v: 62 }, { k: "Gamma;", v: 915 }, { k: "Gammad;", v: 988 }, { k: "Gbreve;", v: 286 }, { k: "Gcedil;", v: 290 }, { k: "Gcirc;", v: 284 }, { k: "Gcy;", v: 1043 }, { k: "Gdot;", v: 288 }, { k: "Gfr;", v: 120074 }, { k: "Gg;", v: 8921 }, { k: "Gopf;", v: 120126 }, { k: "GreaterEqual;", v: 8805 }, { k: "GreaterEqualLess;", v: 8923 }, { k: "GreaterFullEqual;", v: 8807 }, { k: "GreaterGreater;", v: 10914 }, { k: "GreaterLess;", v: 8823 }, { k: "GreaterSlantEqual;", v: 10878 }, { k: "GreaterTilde;", v: 8819 }, { k: "Gscr;", v: 119970 }, { k: "Gt;", v: 8811 }, { k: "HARDcy;", v: 1066 }, { k: "Hacek;", v: 711 }, { k: "Hat;", v: 94 }, { k: "Hcirc;", v: 292 }, { k: "Hfr;", v: 8460 }, { k: "HilbertSpace;", v: 8459 }, { k: "Hopf;", v: 8461 }, { k: "HorizontalLine;", v: 9472 }, { k: "Hscr;", v: 8459 }, { k: "Hstrok;", v: 294 }, { k: "HumpDownHump;", v: 8782 }, { k: "HumpEqual;", v: 8783 }, { k: "IEcy;", v: 1045 }, { k: "IJlig;", v: 306 }, { k: "IOcy;", v: 1025 }, { k: "Iacute;", v: 205 }, { k: "Icirc;", v: 206 }, { k: "Icy;", v: 1048 }, { k: "Idot;", v: 304 }, { k: "Ifr;", v: 8465 }, { k: "Igrave;", v: 204 }, { k: "Im;", v: 8465 }, { k: "Imacr;", v: 298 }, { k: "ImaginaryI;", v: 8520 }, { k: "Implies;", v: 8658 }, { k: "Int;", v: 8748 }, { k: "Integral;", v: 8747 }, { k: "Intersection;", v: 8898 }, { k: "InvisibleComma;", v: 8291 }, { k: "InvisibleTimes;", v: 8290 }, { k: "Iogon;", v: 302 }, { k: "Iopf;", v: 120128 }, { k: "Iota;", v: 921 }, { k: "Iscr;", v: 8464 }, { k: "Itilde;", v: 296 }, { k: "Iukcy;", v: 1030 }, { k: "Iuml;", v: 207 }, { k: "Jcirc;", v: 308 }, { k: "Jcy;", v: 1049 }, { k: "Jfr;", v: 120077 }, { k: "Jopf;", v: 120129 }, { k: "Jscr;", v: 119973 }, { k: "Jsercy;", v: 1032 }, { k: "Jukcy;", v: 1028 }, { k: "KHcy;", v: 1061 }, { k: "KJcy;", v: 1036 }, { k: "Kappa;", v: 922 }, { k: "Kcedil;", v: 310 }, { k: "Kcy;", v: 1050 }, { k: "Kfr;", v: 120078 }, { k: "Kopf;", v: 120130 }, { k: "Kscr;", v: 119974 }, { k: "LJcy;", v: 1033 }, { k: "LT;", v: 60 }, { k: "Lacute;", v: 313 }, { k: "Lambda;", v: 923 }, { k: "Lang;", v: 10218 }, { k: "Laplacetrf;", v: 8466 }, { k: "Larr;", v: 8606 }, { k: "Lcaron;", v: 317 }, { k: "Lcedil;", v: 315 }, { k: "Lcy;", v: 1051 }, { k: "LeftAngleBracket;", v: 10216 }, { k: "LeftArrow;", v: 8592 }, { k: "LeftArrowBar;", v: 8676 }, { k: "LeftArrowRightArrow;", v: 8646 }, { k: "LeftCeiling;", v: 8968 }, { k: "LeftDoubleBracket;", v: 10214 }, { k: "LeftDownTeeVector;", v: 10593 }, { k: "LeftDownVector;", v: 8643 }, { k: "LeftDownVectorBar;", v: 10585 }, { k: "LeftFloor;", v: 8970 }, { k: "LeftRightArrow;", v: 8596 }, { k: "LeftRightVector;", v: 10574 }, { k: "LeftTee;", v: 8867 }, { k: "LeftTeeArrow;", v: 8612 }, { k: "LeftTeeVector;", v: 10586 }, { k: "LeftTriangle;", v: 8882 }, { k: "LeftTriangleBar;", v: 10703 }, { k: "LeftTriangleEqual;", v: 8884 }, { k: "LeftUpDownVector;", v: 10577 }, { k: "LeftUpTeeVector;", v: 10592 }, { k: "LeftUpVector;", v: 8639 }, { k: "LeftUpVectorBar;", v: 10584 }, { k: "LeftVector;", v: 8636 }, { k: "LeftVectorBar;", v: 10578 }, { k: "Leftarrow;", v: 8656 }, { k: "Leftrightarrow;", v: 8660 }, { k: "LessEqualGreater;", v: 8922 }, { k: "LessFullEqual;", v: 8806 }, { k: "LessGreater;", v: 8822 }, { k: "LessLess;", v: 10913 }, { k: "LessSlantEqual;", v: 10877 }, { k: "LessTilde;", v: 8818 }, { k: "Lfr;", v: 120079 }, { k: "Ll;", v: 8920 }, { k: "Lleftarrow;", v: 8666 }, { k: "Lmidot;", v: 319 }, { k: "LongLeftArrow;", v: 10229 }, { k: "LongLeftRightArrow;", v: 10231 }, { k: "LongRightArrow;", v: 10230 }, { k: "Longleftarrow;", v: 10232 }, { k: "Longleftrightarrow;", v: 10234 }, { k: "Longrightarrow;", v: 10233 }, { k: "Lopf;", v: 120131 }, { k: "LowerLeftArrow;", v: 8601 }, { k: "LowerRightArrow;", v: 8600 }, { k: "Lscr;", v: 8466 }, { k: "Lsh;", v: 8624 }, { k: "Lstrok;", v: 321 }, { k: "Lt;", v: 8810 }, { k: "Map;", v: 10501 }, { k: "Mcy;", v: 1052 }, { k: "MediumSpace;", v: 8287 }, { k: "Mellintrf;", v: 8499 }, { k: "Mfr;", v: 120080 }, { k: "MinusPlus;", v: 8723 }, { k: "Mopf;", v: 120132 }, { k: "Mscr;", v: 8499 }, { k: "Mu;", v: 924 }, { k: "NJcy;", v: 1034 }, { k: "Nacute;", v: 323 }, { k: "Ncaron;", v: 327 }, { k: "Ncedil;", v: 325 }, { k: "Ncy;", v: 1053 }, { k: "NegativeMediumSpace;", v: 8203 }, { k: "NegativeThickSpace;", v: 8203 }, { k: "NegativeThinSpace;", v: 8203 }, { k: "NegativeVeryThinSpace;", v: 8203 }, { k: "NestedGreaterGreater;", v: 8811 }, { k: "NestedLessLess;", v: 8810 }, { k: "NewLine;", v: 10 }, { k: "Nfr;", v: 120081 }, { k: "NoBreak;", v: 8288 }, { k: "NonBreakingSpace;", v: 160 }, { k: "Nopf;", v: 8469 }, { k: "Not;", v: 10988 }, { k: "NotCongruent;", v: 8802 }, { k: "NotCupCap;", v: 8813 }, { k: "NotDoubleVerticalBar;", v: 8742 }, { k: "NotElement;", v: 8713 }, { k: "NotEqual;", v: 8800 }, { k: "NotExists;", v: 8708 }, { k: "NotGreater;", v: 8815 }, { k: "NotGreaterEqual;", v: 8817 }, { k: "NotGreaterLess;", v: 8825 }, { k: "NotGreaterTilde;", v: 8821 }, { k: "NotLeftTriangle;", v: 8938 }, { k: "NotLeftTriangleEqual;", v: 8940 }, { k: "NotLess;", v: 8814 }, { k: "NotLessEqual;", v: 8816 }, { k: "NotLessGreater;", v: 8824 }, { k: "NotLessTilde;", v: 8820 }, { k: "NotPrecedes;", v: 8832 }, { k: "NotPrecedesSlantEqual;", v: 8928 }, { k: "NotReverseElement;", v: 8716 }, { k: "NotRightTriangle;", v: 8939 }, { k: "NotRightTriangleEqual;", v: 8941 }, { k: "NotSquareSubsetEqual;", v: 8930 }, { k: "NotSquareSupersetEqual;", v: 8931 }, { k: "NotSubsetEqual;", v: 8840 }, { k: "NotSucceeds;", v: 8833 }, { k: "NotSucceedsSlantEqual;", v: 8929 }, { k: "NotSupersetEqual;", v: 8841 }, { k: "NotTilde;", v: 8769 }, { k: "NotTildeEqual;", v: 8772 }, { k: "NotTildeFullEqual;", v: 8775 }, { k: "NotTildeTilde;", v: 8777 }, { k: "NotVerticalBar;", v: 8740 }, { k: "Nscr;", v: 119977 }, { k: "Ntilde;", v: 209 }, { k: "Nu;", v: 925 }, { k: "OElig;", v: 338 }, { k: "Oacute;", v: 211 }, { k: "Ocirc;", v: 212 }, { k: "Ocy;", v: 1054 }, { k: "Odblac;", v: 336 }, { k: "Ofr;", v: 120082 }, { k: "Ograve;", v: 210 }, { k: "Omacr;", v: 332 }, { k: "Omega;", v: 937 }, { k: "Omicron;", v: 927 }, { k: "Oopf;", v: 120134 }, { k: "OpenCurlyDoubleQuote;", v: 8220 }, { k: "OpenCurlyQuote;", v: 8216 }, { k: "Or;", v: 10836 }, { k: "Oscr;", v: 119978 }, { k: "Oslash;", v: 216 }, { k: "Otilde;", v: 213 }, { k: "Otimes;", v: 10807 }, { k: "Ouml;", v: 214 }, { k: "OverBar;", v: 8254 }, { k: "OverBrace;", v: 9182 }, { k: "OverBracket;", v: 9140 }, { k: "OverParenthesis;", v: 9180 }, { k: "PartialD;", v: 8706 }, { k: "Pcy;", v: 1055 }, { k: "Pfr;", v: 120083 }, { k: "Phi;", v: 934 }, { k: "Pi;", v: 928 }, { k: "PlusMinus;", v: 177 }, { k: "Poincareplane;", v: 8460 }, { k: "Popf;", v: 8473 }, { k: "Pr;", v: 10939 }, { k: "Precedes;", v: 8826 }, { k: "PrecedesEqual;", v: 10927 }, { k: "PrecedesSlantEqual;", v: 8828 }, { k: "PrecedesTilde;", v: 8830 }, { k: "Prime;", v: 8243 }, { k: "Product;", v: 8719 }, { k: "Proportion;", v: 8759 }, { k: "Proportional;", v: 8733 }, { k: "Pscr;", v: 119979 }, { k: "Psi;", v: 936 }, { k: "QUOT;", v: 34 }, { k: "Qfr;", v: 120084 }, { k: "Qopf;", v: 8474 }, { k: "Qscr;", v: 119980 }, { k: "RBarr;", v: 10512 }, { k: "REG;", v: 174 }, { k: "Racute;", v: 340 }, { k: "Rang;", v: 10219 }, { k: "Rarr;", v: 8608 }, { k: "Rarrtl;", v: 10518 }, { k: "Rcaron;", v: 344 }, { k: "Rcedil;", v: 342 }, { k: "Rcy;", v: 1056 }, { k: "Re;", v: 8476 }, { k: "ReverseElement;", v: 8715 }, { k: "ReverseEquilibrium;", v: 8651 }, { k: "ReverseUpEquilibrium;", v: 10607 }, { k: "Rfr;", v: 8476 }, { k: "Rho;", v: 929 }, { k: "RightAngleBracket;", v: 10217 }, { k: "RightArrow;", v: 8594 }, { k: "RightArrowBar;", v: 8677 }, { k: "RightArrowLeftArrow;", v: 8644 }, { k: "RightCeiling;", v: 8969 }, { k: "RightDoubleBracket;", v: 10215 }, { k: "RightDownTeeVector;", v: 10589 }, { k: "RightDownVector;", v: 8642 }, { k: "RightDownVectorBar;", v: 10581 }, { k: "RightFloor;", v: 8971 }, { k: "RightTee;", v: 8866 }, { k: "RightTeeArrow;", v: 8614 }, { k: "RightTeeVector;", v: 10587 }, { k: "RightTriangle;", v: 8883 }, { k: "RightTriangleBar;", v: 10704 }, { k: "RightTriangleEqual;", v: 8885 }, { k: "RightUpDownVector;", v: 10575 }, { k: "RightUpTeeVector;", v: 10588 }, { k: "RightUpVector;", v: 8638 }, { k: "RightUpVectorBar;", v: 10580 }, { k: "RightVector;", v: 8640 }, { k: "RightVectorBar;", v: 10579 }, { k: "Rightarrow;", v: 8658 }, { k: "Ropf;", v: 8477 }, { k: "RoundImplies;", v: 10608 }, { k: "Rrightarrow;", v: 8667 }, { k: "Rscr;", v: 8475 }, { k: "Rsh;", v: 8625 }, { k: "RuleDelayed;", v: 10740 }, { k: "SHCHcy;", v: 1065 }, { k: "SHcy;", v: 1064 }, { k: "SOFTcy;", v: 1068 }, { k: "Sacute;", v: 346 }, { k: "Sc;", v: 10940 }, { k: "Scaron;", v: 352 }, { k: "Scedil;", v: 350 }, { k: "Scirc;", v: 348 }, { k: "Scy;", v: 1057 }, { k: "Sfr;", v: 120086 }, { k: "ShortDownArrow;", v: 8595 }, { k: "ShortLeftArrow;", v: 8592 }, { k: "ShortRightArrow;", v: 8594 }, { k: "ShortUpArrow;", v: 8593 }, { k: "Sigma;", v: 931 }, { k: "SmallCircle;", v: 8728 }, { k: "Sopf;", v: 120138 }, { k: "Sqrt;", v: 8730 }, { k: "Square;", v: 9633 }, { k: "SquareIntersection;", v: 8851 }, { k: "SquareSubset;", v: 8847 }, { k: "SquareSubsetEqual;", v: 8849 }, { k: "SquareSuperset;", v: 8848 }, { k: "SquareSupersetEqual;", v: 8850 }, { k: "SquareUnion;", v: 8852 }, { k: "Sscr;", v: 119982 }, { k: "Star;", v: 8902 }, { k: "Sub;", v: 8912 }, { k: "Subset;", v: 8912 }, { k: "SubsetEqual;", v: 8838 }, { k: "Succeeds;", v: 8827 }, { k: "SucceedsEqual;", v: 10928 }, { k: "SucceedsSlantEqual;", v: 8829 }, { k: "SucceedsTilde;", v: 8831 }, { k: "SuchThat;", v: 8715 }, { k: "Sum;", v: 8721 }, { k: "Sup;", v: 8913 }, { k: "Superset;", v: 8835 }, { k: "SupersetEqual;", v: 8839 }, { k: "Supset;", v: 8913 }, { k: "THORN;", v: 222 }, { k: "TRADE;", v: 8482 }, { k: "TSHcy;", v: 1035 }, { k: "TScy;", v: 1062 }, { k: "Tab;", v: 9 }, { k: "Tau;", v: 932 }, { k: "Tcaron;", v: 356 }, { k: "Tcedil;", v: 354 }, { k: "Tcy;", v: 1058 }, { k: "Tfr;", v: 120087 }, { k: "Therefore;", v: 8756 }, { k: "Theta;", v: 920 }, { k: "ThinSpace;", v: 8201 }, { k: "Tilde;", v: 8764 }, { k: "TildeEqual;", v: 8771 }, { k: "TildeFullEqual;", v: 8773 }, { k: "TildeTilde;", v: 8776 }, { k: "Topf;", v: 120139 }, { k: "TripleDot;", v: 8411 }, { k: "Tscr;", v: 119983 }, { k: "Tstrok;", v: 358 }, { k: "Uacute;", v: 218 }, { k: "Uarr;", v: 8607 }, { k: "Uarrocir;", v: 10569 }, { k: "Ubrcy;", v: 1038 }, { k: "Ubreve;", v: 364 }, { k: "Ucirc;", v: 219 }, { k: "Ucy;", v: 1059 }, { k: "Udblac;", v: 368 }, { k: "Ufr;", v: 120088 }, { k: "Ugrave;", v: 217 }, { k: "Umacr;", v: 362 }, { k: "UnderBar;", v: 95 }, { k: "UnderBrace;", v: 9183 }, { k: "UnderBracket;", v: 9141 }, { k: "UnderParenthesis;", v: 9181 }, { k: "Union;", v: 8899 }, { k: "UnionPlus;", v: 8846 }, { k: "Uogon;", v: 370 }, { k: "Uopf;", v: 120140 }, { k: "UpArrow;", v: 8593 }, { k: "UpArrowBar;", v: 10514 }, { k: "UpArrowDownArrow;", v: 8645 }, { k: "UpDownArrow;", v: 8597 }, { k: "UpEquilibrium;", v: 10606 }, { k: "UpTee;", v: 8869 }, { k: "UpTeeArrow;", v: 8613 }, { k: "Uparrow;", v: 8657 }, { k: "Updownarrow;", v: 8661 }, { k: "UpperLeftArrow;", v: 8598 }, { k: "UpperRightArrow;", v: 8599 }, { k: "Upsi;", v: 978 }, { k: "Upsilon;", v: 933 }, { k: "Uring;", v: 366 }, { k: "Uscr;", v: 119984 }, { k: "Utilde;", v: 360 }, { k: "Uuml;", v: 220 }, { k: "VDash;", v: 8875 }, { k: "Vbar;", v: 10987 }, { k: "Vcy;", v: 1042 }, { k: "Vdash;", v: 8873 }, { k: "Vdashl;", v: 10982 }, { k: "Vee;", v: 8897 }, { k: "Verbar;", v: 8214 }, { k: "Vert;", v: 8214 }, { k: "VerticalBar;", v: 8739 }, { k: "VerticalLine;", v: 124 }, { k: "VerticalSeparator;", v: 10072 }, { k: "VerticalTilde;", v: 8768 }, { k: "VeryThinSpace;", v: 8202 }, { k: "Vfr;", v: 120089 }, { k: "Vopf;", v: 120141 }, { k: "Vscr;", v: 119985 }, { k: "Vvdash;", v: 8874 }, { k: "Wcirc;", v: 372 }, { k: "Wedge;", v: 8896 }, { k: "Wfr;", v: 120090 }, { k: "Wopf;", v: 120142 }, { k: "Wscr;", v: 119986 }, { k: "Xfr;", v: 120091 }, { k: "Xi;", v: 926 }, { k: "Xopf;", v: 120143 }, { k: "Xscr;", v: 119987 }, { k: "YAcy;", v: 1071 }, { k: "YIcy;", v: 1031 }, { k: "YUcy;", v: 1070 }, { k: "Yacute;", v: 221 }, { k: "Ycirc;", v: 374 }, { k: "Ycy;", v: 1067 }, { k: "Yfr;", v: 120092 }, { k: "Yopf;", v: 120144 }, { k: "Yscr;", v: 119988 }, { k: "Yuml;", v: 376 }, { k: "ZHcy;", v: 1046 }, { k: "Zacute;", v: 377 }, { k: "Zcaron;", v: 381 }, { k: "Zcy;", v: 1047 }, { k: "Zdot;", v: 379 }, { k: "ZeroWidthSpace;", v: 8203 }, { k: "Zeta;", v: 918 }, { k: "Zfr;", v: 8488 }, { k: "Zopf;", v: 8484 }, { k: "Zscr;", v: 119989 }, { k: "aacute;", v: 225 }, { k: "abreve;", v: 259 }, { k: "ac;", v: 8766 }, { k: "acd;", v: 8767 }, { k: "acirc;", v: 226 }, { k: "acute;", v: 180 }, { k: "acy;", v: 1072 }, { k: "aelig;", v: 230 }, { k: "af;", v: 8289 }, { k: "afr;", v: 120094 }, { k: "agrave;", v: 224 }, { k: "alefsym;", v: 8501 }, { k: "aleph;", v: 8501 }, { k: "alpha;", v: 945 }, { k: "amacr;", v: 257 }, { k: "amalg;", v: 10815 }, { k: "amp;", v: 38 }, { k: "and;", v: 8743 }, { k: "andand;", v: 10837 }, { k: "andd;", v: 10844 }, { k: "andslope;", v: 10840 }, { k: "andv;", v: 10842 }, { k: "ang;", v: 8736 }, { k: "ange;", v: 10660 }, { k: "angle;", v: 8736 }, { k: "angmsd;", v: 8737 }, { k: "angmsdaa;", v: 10664 }, { k: "angmsdab;", v: 10665 }, { k: "angmsdac;", v: 10666 }, { k: "angmsdad;", v: 10667 }, { k: "angmsdae;", v: 10668 }, { k: "angmsdaf;", v: 10669 }, { k: "angmsdag;", v: 10670 }, { k: "angmsdah;", v: 10671 }, { k: "angrt;", v: 8735 }, { k: "angrtvb;", v: 8894 }, { k: "angrtvbd;", v: 10653 }, { k: "angsph;", v: 8738 }, { k: "angst;", v: 197 }, { k: "angzarr;", v: 9084 }, { k: "aogon;", v: 261 }, { k: "aopf;", v: 120146 }, { k: "ap;", v: 8776 }, { k: "apE;", v: 10864 }, { k: "apacir;", v: 10863 }, { k: "ape;", v: 8778 }, { k: "apid;", v: 8779 }, { k: "apos;", v: 39 }, { k: "approx;", v: 8776 }, { k: "approxeq;", v: 8778 }, { k: "aring;", v: 229 }, { k: "ascr;", v: 119990 }, { k: "ast;", v: 42 }, { k: "asymp;", v: 8776 }, { k: "asympeq;", v: 8781 }, { k: "atilde;", v: 227 }, { k: "auml;", v: 228 }, { k: "awconint;", v: 8755 }, { k: "awint;", v: 10769 }, { k: "bNot;", v: 10989 }, { k: "backcong;", v: 8780 }, { k: "backepsilon;", v: 1014 }, { k: "backprime;", v: 8245 }, { k: "backsim;", v: 8765 }, { k: "backsimeq;", v: 8909 }, { k: "barvee;", v: 8893 }, { k: "barwed;", v: 8965 }, { k: "barwedge;", v: 8965 }, { k: "bbrk;", v: 9141 }, { k: "bbrktbrk;", v: 9142 }, { k: "bcong;", v: 8780 }, { k: "bcy;", v: 1073 }, { k: "bdquo;", v: 8222 }, { k: "becaus;", v: 8757 }, { k: "because;", v: 8757 }, { k: "bemptyv;", v: 10672 }, { k: "bepsi;", v: 1014 }, { k: "bernou;", v: 8492 }, { k: "beta;", v: 946 }, { k: "beth;", v: 8502 }, { k: "between;", v: 8812 }, { k: "bfr;", v: 120095 }, { k: "bigcap;", v: 8898 }, { k: "bigcirc;", v: 9711 }, { k: "bigcup;", v: 8899 }, { k: "bigodot;", v: 10752 }, { k: "bigoplus;", v: 10753 }, { k: "bigotimes;", v: 10754 }, { k: "bigsqcup;", v: 10758 }, { k: "bigstar;", v: 9733 }, { k: "bigtriangledown;", v: 9661 }, { k: "bigtriangleup;", v: 9651 }, { k: "biguplus;", v: 10756 }, { k: "bigvee;", v: 8897 }, { k: "bigwedge;", v: 8896 }, { k: "bkarow;", v: 10509 }, { k: "blacklozenge;", v: 10731 }, { k: "blacksquare;", v: 9642 }, { k: "blacktriangle;", v: 9652 }, { k: "blacktriangledown;", v: 9662 }, { k: "blacktriangleleft;", v: 9666 }, { k: "blacktriangleright;", v: 9656 }, { k: "blank;", v: 9251 }, { k: "blk12;", v: 9618 }, { k: "blk14;", v: 9617 }, { k: "blk34;", v: 9619 }, { k: "block;", v: 9608 }, { k: "bnot;", v: 8976 }, { k: "bopf;", v: 120147 }, { k: "bot;", v: 8869 }, { k: "bottom;", v: 8869 }, { k: "bowtie;", v: 8904 }, { k: "boxDL;", v: 9559 }, { k: "boxDR;", v: 9556 }, { k: "boxDl;", v: 9558 }, { k: "boxDr;", v: 9555 }, { k: "boxH;", v: 9552 }, { k: "boxHD;", v: 9574 }, { k: "boxHU;", v: 9577 }, { k: "boxHd;", v: 9572 }, { k: "boxHu;", v: 9575 }, { k: "boxUL;", v: 9565 }, { k: "boxUR;", v: 9562 }, { k: "boxUl;", v: 9564 }, { k: "boxUr;", v: 9561 }, { k: "boxV;", v: 9553 }, { k: "boxVH;", v: 9580 }, { k: "boxVL;", v: 9571 }, { k: "boxVR;", v: 9568 }, { k: "boxVh;", v: 9579 }, { k: "boxVl;", v: 9570 }, { k: "boxVr;", v: 9567 }, { k: "boxbox;", v: 10697 }, { k: "boxdL;", v: 9557 }, { k: "boxdR;", v: 9554 }, { k: "boxdl;", v: 9488 }, { k: "boxdr;", v: 9484 }, { k: "boxh;", v: 9472 }, { k: "boxhD;", v: 9573 }, { k: "boxhU;", v: 9576 }, { k: "boxhd;", v: 9516 }, { k: "boxhu;", v: 9524 }, { k: "boxminus;", v: 8863 }, { k: "boxplus;", v: 8862 }, { k: "boxtimes;", v: 8864 }, { k: "boxuL;", v: 9563 }, { k: "boxuR;", v: 9560 }, { k: "boxul;", v: 9496 }, { k: "boxur;", v: 9492 }, { k: "boxv;", v: 9474 }, { k: "boxvH;", v: 9578 }, { k: "boxvL;", v: 9569 }, { k: "boxvR;", v: 9566 }, { k: "boxvh;", v: 9532 }, { k: "boxvl;", v: 9508 }, { k: "boxvr;", v: 9500 }, { k: "bprime;", v: 8245 }, { k: "breve;", v: 728 }, { k: "brvbar;", v: 166 }, { k: "bscr;", v: 119991 }, { k: "bsemi;", v: 8271 }, { k: "bsim;", v: 8765 }, { k: "bsime;", v: 8909 }, { k: "bsol;", v: 92 }, { k: "bsolb;", v: 10693 }, { k: "bsolhsub;", v: 10184 }, { k: "bull;", v: 8226 }, { k: "bullet;", v: 8226 }, { k: "bump;", v: 8782 }, { k: "bumpE;", v: 10926 }, { k: "bumpe;", v: 8783 }, { k: "bumpeq;", v: 8783 }, { k: "cacute;", v: 263 }, { k: "cap;", v: 8745 }, { k: "capand;", v: 10820 }, { k: "capbrcup;", v: 10825 }, { k: "capcap;", v: 10827 }, { k: "capcup;", v: 10823 }, { k: "capdot;", v: 10816 }, { k: "caret;", v: 8257 }, { k: "caron;", v: 711 }, { k: "ccaps;", v: 10829 }, { k: "ccaron;", v: 269 }, { k: "ccedil;", v: 231 }, { k: "ccirc;", v: 265 }, { k: "ccups;", v: 10828 }, { k: "ccupssm;", v: 10832 }, { k: "cdot;", v: 267 }, { k: "cedil;", v: 184 }, { k: "cemptyv;", v: 10674 }, { k: "cent;", v: 162 }, { k: "centerdot;", v: 183 }, { k: "cfr;", v: 120096 }, { k: "chcy;", v: 1095 }, { k: "check;", v: 10003 }, { k: "checkmark;", v: 10003 }, { k: "chi;", v: 967 }, { k: "cir;", v: 9675 }, { k: "cirE;", v: 10691 }, { k: "circ;", v: 710 }, { k: "circeq;", v: 8791 }, { k: "circlearrowleft;", v: 8634 }, { k: "circlearrowright;", v: 8635 }, { k: "circledR;", v: 174 }, { k: "circledS;", v: 9416 }, { k: "circledast;", v: 8859 }, { k: "circledcirc;", v: 8858 }, { k: "circleddash;", v: 8861 }, { k: "cire;", v: 8791 }, { k: "cirfnint;", v: 10768 }, { k: "cirmid;", v: 10991 }, { k: "cirscir;", v: 10690 }, { k: "clubs;", v: 9827 }, { k: "clubsuit;", v: 9827 }, { k: "colon;", v: 58 }, { k: "colone;", v: 8788 }, { k: "coloneq;", v: 8788 }, { k: "comma;", v: 44 }, { k: "commat;", v: 64 }, { k: "comp;", v: 8705 }, { k: "compfn;", v: 8728 }, { k: "complement;", v: 8705 }, { k: "complexes;", v: 8450 }, { k: "cong;", v: 8773 }, { k: "congdot;", v: 10861 }, { k: "conint;", v: 8750 }, { k: "copf;", v: 120148 }, { k: "coprod;", v: 8720 }, { k: "copy;", v: 169 }, { k: "copysr;", v: 8471 }, { k: "crarr;", v: 8629 }, { k: "cross;", v: 10007 }, { k: "cscr;", v: 119992 }, { k: "csub;", v: 10959 }, { k: "csube;", v: 10961 }, { k: "csup;", v: 10960 }, { k: "csupe;", v: 10962 }, { k: "ctdot;", v: 8943 }, { k: "cudarrl;", v: 10552 }, { k: "cudarrr;", v: 10549 }, { k: "cuepr;", v: 8926 }, { k: "cuesc;", v: 8927 }, { k: "cularr;", v: 8630 }, { k: "cularrp;", v: 10557 }, { k: "cup;", v: 8746 }, { k: "cupbrcap;", v: 10824 }, { k: "cupcap;", v: 10822 }, { k: "cupcup;", v: 10826 }, { k: "cupdot;", v: 8845 }, { k: "cupor;", v: 10821 }, { k: "curarr;", v: 8631 }, { k: "curarrm;", v: 10556 }, { k: "curlyeqprec;", v: 8926 }, { k: "curlyeqsucc;", v: 8927 }, { k: "curlyvee;", v: 8910 }, { k: "curlywedge;", v: 8911 }, { k: "curren;", v: 164 }, { k: "curvearrowleft;", v: 8630 }, { k: "curvearrowright;", v: 8631 }, { k: "cuvee;", v: 8910 }, { k: "cuwed;", v: 8911 }, { k: "cwconint;", v: 8754 }, { k: "cwint;", v: 8753 }, { k: "cylcty;", v: 9005 }, { k: "dArr;", v: 8659 }, { k: "dHar;", v: 10597 }, { k: "dagger;", v: 8224 }, { k: "daleth;", v: 8504 }, { k: "darr;", v: 8595 }, { k: "dash;", v: 8208 }, { k: "dashv;", v: 8867 }, { k: "dbkarow;", v: 10511 }, { k: "dblac;", v: 733 }, { k: "dcaron;", v: 271 }, { k: "dcy;", v: 1076 }, { k: "dd;", v: 8518 }, { k: "ddagger;", v: 8225 }, { k: "ddarr;", v: 8650 }, { k: "ddotseq;", v: 10871 }, { k: "deg;", v: 176 }, { k: "delta;", v: 948 }, { k: "demptyv;", v: 10673 }, { k: "dfisht;", v: 10623 }, { k: "dfr;", v: 120097 }, { k: "dharl;", v: 8643 }, { k: "dharr;", v: 8642 }, { k: "diam;", v: 8900 }, { k: "diamond;", v: 8900 }, { k: "diamondsuit;", v: 9830 }, { k: "diams;", v: 9830 }, { k: "die;", v: 168 }, { k: "digamma;", v: 989 }, { k: "disin;", v: 8946 }, { k: "div;", v: 247 }, { k: "divide;", v: 247 }, { k: "divideontimes;", v: 8903 }, { k: "divonx;", v: 8903 }, { k: "djcy;", v: 1106 }, { k: "dlcorn;", v: 8990 }, { k: "dlcrop;", v: 8973 }, { k: "dollar;", v: 36 }, { k: "dopf;", v: 120149 }, { k: "dot;", v: 729 }, { k: "doteq;", v: 8784 }, { k: "doteqdot;", v: 8785 }, { k: "dotminus;", v: 8760 }, { k: "dotplus;", v: 8724 }, { k: "dotsquare;", v: 8865 }, { k: "doublebarwedge;", v: 8966 }, { k: "downarrow;", v: 8595 }, { k: "downdownarrows;", v: 8650 }, { k: "downharpoonleft;", v: 8643 }, { k: "downharpoonright;", v: 8642 }, { k: "drbkarow;", v: 10512 }, { k: "drcorn;", v: 8991 }, { k: "drcrop;", v: 8972 }, { k: "dscr;", v: 119993 }, { k: "dscy;", v: 1109 }, { k: "dsol;", v: 10742 }, { k: "dstrok;", v: 273 }, { k: "dtdot;", v: 8945 }, { k: "dtri;", v: 9663 }, { k: "dtrif;", v: 9662 }, { k: "duarr;", v: 8693 }, { k: "duhar;", v: 10607 }, { k: "dwangle;", v: 10662 }, { k: "dzcy;", v: 1119 }, { k: "dzigrarr;", v: 10239 }, { k: "eDDot;", v: 10871 }, { k: "eDot;", v: 8785 }, { k: "eacute;", v: 233 }, { k: "easter;", v: 10862 }, { k: "ecaron;", v: 283 }, { k: "ecir;", v: 8790 }, { k: "ecirc;", v: 234 }, { k: "ecolon;", v: 8789 }, { k: "ecy;", v: 1101 }, { k: "edot;", v: 279 }, { k: "ee;", v: 8519 }, { k: "efDot;", v: 8786 }, { k: "efr;", v: 120098 }, { k: "eg;", v: 10906 }, { k: "egrave;", v: 232 }, { k: "egs;", v: 10902 }, { k: "egsdot;", v: 10904 }, { k: "el;", v: 10905 }, { k: "elinters;", v: 9191 }, { k: "ell;", v: 8467 }, { k: "els;", v: 10901 }, { k: "elsdot;", v: 10903 }, { k: "emacr;", v: 275 }, { k: "empty;", v: 8709 }, { k: "emptyset;", v: 8709 }, { k: "emptyv;", v: 8709 }, { k: "emsp;", v: 8195 }, { k: "emsp13;", v: 8196 }, { k: "emsp14;", v: 8197 }, { k: "eng;", v: 331 }, { k: "ensp;", v: 8194 }, { k: "eogon;", v: 281 }, { k: "eopf;", v: 120150 }, { k: "epar;", v: 8917 }, { k: "eparsl;", v: 10723 }, { k: "eplus;", v: 10865 }, { k: "epsi;", v: 949 }, { k: "epsilon;", v: 949 }, { k: "epsiv;", v: 1013 }, { k: "eqcirc;", v: 8790 }, { k: "eqcolon;", v: 8789 }, { k: "eqsim;", v: 8770 }, { k: "eqslantgtr;", v: 10902 }, { k: "eqslantless;", v: 10901 }, { k: "equals;", v: 61 }, { k: "equest;", v: 8799 }, { k: "equiv;", v: 8801 }, { k: "equivDD;", v: 10872 }, { k: "eqvparsl;", v: 10725 }, { k: "erDot;", v: 8787 }, { k: "erarr;", v: 10609 }, { k: "escr;", v: 8495 }, { k: "esdot;", v: 8784 }, { k: "esim;", v: 8770 }, { k: "eta;", v: 951 }, { k: "eth;", v: 240 }, { k: "euml;", v: 235 }, { k: "euro;", v: 8364 }, { k: "excl;", v: 33 }, { k: "exist;", v: 8707 }, { k: "expectation;", v: 8496 }, { k: "exponentiale;", v: 8519 }, { k: "fallingdotseq;", v: 8786 }, { k: "fcy;", v: 1092 }, { k: "female;", v: 9792 }, { k: "ffilig;", v: 64259 }, { k: "fflig;", v: 64256 }, { k: "ffllig;", v: 64260 }, { k: "ffr;", v: 120099 }, { k: "filig;", v: 64257 }, { k: "flat;", v: 9837 }, { k: "fllig;", v: 64258 }, { k: "fltns;", v: 9649 }, { k: "fnof;", v: 402 }, { k: "fopf;", v: 120151 }, { k: "forall;", v: 8704 }, { k: "fork;", v: 8916 }, { k: "forkv;", v: 10969 }, { k: "fpartint;", v: 10765 }, { k: "frac12;", v: 189 }, { k: "frac13;", v: 8531 }, { k: "frac14;", v: 188 }, { k: "frac15;", v: 8533 }, { k: "frac16;", v: 8537 }, { k: "frac18;", v: 8539 }, { k: "frac23;", v: 8532 }, { k: "frac25;", v: 8534 }, { k: "frac34;", v: 190 }, { k: "frac35;", v: 8535 }, { k: "frac38;", v: 8540 }, { k: "frac45;", v: 8536 }, { k: "frac56;", v: 8538 }, { k: "frac58;", v: 8541 }, { k: "frac78;", v: 8542 }, { k: "frasl;", v: 8260 }, { k: "frown;", v: 8994 }, { k: "fscr;", v: 119995 }, { k: "gE;", v: 8807 }, { k: "gEl;", v: 10892 }, { k: "gacute;", v: 501 }, { k: "gamma;", v: 947 }, { k: "gammad;", v: 989 }, { k: "gap;", v: 10886 }, { k: "gbreve;", v: 287 }, { k: "gcirc;", v: 285 }, { k: "gcy;", v: 1075 }, { k: "gdot;", v: 289 }, { k: "ge;", v: 8805 }, { k: "gel;", v: 8923 }, { k: "geq;", v: 8805 }, { k: "geqq;", v: 8807 }, { k: "geqslant;", v: 10878 }, { k: "ges;", v: 10878 }, { k: "gescc;", v: 10921 }, { k: "gesdot;", v: 10880 }, { k: "gesdoto;", v: 10882 }, { k: "gesdotol;", v: 10884 }, { k: "gesles;", v: 10900 }, { k: "gfr;", v: 120100 }, { k: "gg;", v: 8811 }, { k: "ggg;", v: 8921 }, { k: "gimel;", v: 8503 }, { k: "gjcy;", v: 1107 }, { k: "gl;", v: 8823 }, { k: "glE;", v: 10898 }, { k: "gla;", v: 10917 }, { k: "glj;", v: 10916 }, { k: "gnE;", v: 8809 }, { k: "gnap;", v: 10890 }, { k: "gnapprox;", v: 10890 }, { k: "gne;", v: 10888 }, { k: "gneq;", v: 10888 }, { k: "gneqq;", v: 8809 }, { k: "gnsim;", v: 8935 }, { k: "gopf;", v: 120152 }, { k: "grave;", v: 96 }, { k: "gscr;", v: 8458 }, { k: "gsim;", v: 8819 }, { k: "gsime;", v: 10894 }, { k: "gsiml;", v: 10896 }, { k: "gt;", v: 62 }, { k: "gtcc;", v: 10919 }, { k: "gtcir;", v: 10874 }, { k: "gtdot;", v: 8919 }, { k: "gtlPar;", v: 10645 }, { k: "gtquest;", v: 10876 }, { k: "gtrapprox;", v: 10886 }, { k: "gtrarr;", v: 10616 }, { k: "gtrdot;", v: 8919 }, { k: "gtreqless;", v: 8923 }, { k: "gtreqqless;", v: 10892 }, { k: "gtrless;", v: 8823 }, { k: "gtrsim;", v: 8819 }, { k: "hArr;", v: 8660 }, { k: "hairsp;", v: 8202 }, { k: "half;", v: 189 }, { k: "hamilt;", v: 8459 }, { k: "hardcy;", v: 1098 }, { k: "harr;", v: 8596 }, { k: "harrcir;", v: 10568 }, { k: "harrw;", v: 8621 }, { k: "hbar;", v: 8463 }, { k: "hcirc;", v: 293 }, { k: "hearts;", v: 9829 }, { k: "heartsuit;", v: 9829 }, { k: "hellip;", v: 8230 }, { k: "hercon;", v: 8889 }, { k: "hfr;", v: 120101 }, { k: "hksearow;", v: 10533 }, { k: "hkswarow;", v: 10534 }, { k: "hoarr;", v: 8703 }, { k: "homtht;", v: 8763 }, { k: "hookleftarrow;", v: 8617 }, { k: "hookrightarrow;", v: 8618 }, { k: "hopf;", v: 120153 }, { k: "horbar;", v: 8213 }, { k: "hscr;", v: 119997 }, { k: "hslash;", v: 8463 }, { k: "hstrok;", v: 295 }, { k: "hybull;", v: 8259 }, { k: "hyphen;", v: 8208 }, { k: "iacute;", v: 237 }, { k: "ic;", v: 8291 }, { k: "icirc;", v: 238 }, { k: "icy;", v: 1080 }, { k: "iecy;", v: 1077 }, { k: "iexcl;", v: 161 }, { k: "iff;", v: 8660 }, { k: "ifr;", v: 120102 }, { k: "igrave;", v: 236 }, { k: "ii;", v: 8520 }, { k: "iiiint;", v: 10764 }, { k: "iiint;", v: 8749 }, { k: "iinfin;", v: 10716 }, { k: "iiota;", v: 8489 }, { k: "ijlig;", v: 307 }, { k: "imacr;", v: 299 }, { k: "image;", v: 8465 }, { k: "imagline;", v: 8464 }, { k: "imagpart;", v: 8465 }, { k: "imath;", v: 305 }, { k: "imof;", v: 8887 }, { k: "imped;", v: 437 }, { k: "in;", v: 8712 }, { k: "incare;", v: 8453 }, { k: "infin;", v: 8734 }, { k: "infintie;", v: 10717 }, { k: "inodot;", v: 305 }, { k: "int;", v: 8747 }, { k: "intcal;", v: 8890 }, { k: "integers;", v: 8484 }, { k: "intercal;", v: 8890 }, { k: "intlarhk;", v: 10775 }, { k: "intprod;", v: 10812 }, { k: "iocy;", v: 1105 }, { k: "iogon;", v: 303 }, { k: "iopf;", v: 120154 }, { k: "iota;", v: 953 }, { k: "iprod;", v: 10812 }, { k: "iquest;", v: 191 }, { k: "iscr;", v: 119998 }, { k: "isin;", v: 8712 }, { k: "isinE;", v: 8953 }, { k: "isindot;", v: 8949 }, { k: "isins;", v: 8948 }, { k: "isinsv;", v: 8947 }, { k: "isinv;", v: 8712 }, { k: "it;", v: 8290 }, { k: "itilde;", v: 297 }, { k: "iukcy;", v: 1110 }, { k: "iuml;", v: 239 }, { k: "jcirc;", v: 309 }, { k: "jcy;", v: 1081 }, { k: "jfr;", v: 120103 }, { k: "jmath;", v: 567 }, { k: "jopf;", v: 120155 }, { k: "jscr;", v: 119999 }, { k: "jsercy;", v: 1112 }, { k: "jukcy;", v: 1108 }, { k: "kappa;", v: 954 }, { k: "kappav;", v: 1008 }, { k: "kcedil;", v: 311 }, { k: "kcy;", v: 1082 }, { k: "kfr;", v: 120104 }, { k: "kgreen;", v: 312 }, { k: "khcy;", v: 1093 }, { k: "kjcy;", v: 1116 }, { k: "kopf;", v: 120156 }, { k: "kscr;", v: 120000 }, { k: "lAarr;", v: 8666 }, { k: "lArr;", v: 8656 }, { k: "lAtail;", v: 10523 }, { k: "lBarr;", v: 10510 }, { k: "lE;", v: 8806 }, { k: "lEg;", v: 10891 }, { k: "lHar;", v: 10594 }, { k: "lacute;", v: 314 }, { k: "laemptyv;", v: 10676 }, { k: "lagran;", v: 8466 }, { k: "lambda;", v: 955 }, { k: "lang;", v: 10216 }, { k: "langd;", v: 10641 }, { k: "langle;", v: 10216 }, { k: "lap;", v: 10885 }, { k: "laquo;", v: 171 }, { k: "larr;", v: 8592 }, { k: "larrb;", v: 8676 }, { k: "larrbfs;", v: 10527 }, { k: "larrfs;", v: 10525 }, { k: "larrhk;", v: 8617 }, { k: "larrlp;", v: 8619 }, { k: "larrpl;", v: 10553 }, { k: "larrsim;", v: 10611 }, { k: "larrtl;", v: 8610 }, { k: "lat;", v: 10923 }, { k: "latail;", v: 10521 }, { k: "late;", v: 10925 }, { k: "lbarr;", v: 10508 }, { k: "lbbrk;", v: 10098 }, { k: "lbrace;", v: 123 }, { k: "lbrack;", v: 91 }, { k: "lbrke;", v: 10635 }, { k: "lbrksld;", v: 10639 }, { k: "lbrkslu;", v: 10637 }, { k: "lcaron;", v: 318 }, { k: "lcedil;", v: 316 }, { k: "lceil;", v: 8968 }, { k: "lcub;", v: 123 }, { k: "lcy;", v: 1083 }, { k: "ldca;", v: 10550 }, { k: "ldquo;", v: 8220 }, { k: "ldquor;", v: 8222 }, { k: "ldrdhar;", v: 10599 }, { k: "ldrushar;", v: 10571 }, { k: "ldsh;", v: 8626 }, { k: "le;", v: 8804 }, { k: "leftarrow;", v: 8592 }, { k: "leftarrowtail;", v: 8610 }, { k: "leftharpoondown;", v: 8637 }, { k: "leftharpoonup;", v: 8636 }, { k: "leftleftarrows;", v: 8647 }, { k: "leftrightarrow;", v: 8596 }, { k: "leftrightarrows;", v: 8646 }, { k: "leftrightharpoons;", v: 8651 }, { k: "leftrightsquigarrow;", v: 8621 }, { k: "leftthreetimes;", v: 8907 }, { k: "leg;", v: 8922 }, { k: "leq;", v: 8804 }, { k: "leqq;", v: 8806 }, { k: "leqslant;", v: 10877 }, { k: "les;", v: 10877 }, { k: "lescc;", v: 10920 }, { k: "lesdot;", v: 10879 }, { k: "lesdoto;", v: 10881 }, { k: "lesdotor;", v: 10883 }, { k: "lesges;", v: 10899 }, { k: "lessapprox;", v: 10885 }, { k: "lessdot;", v: 8918 }, { k: "lesseqgtr;", v: 8922 }, { k: "lesseqqgtr;", v: 10891 }, { k: "lessgtr;", v: 8822 }, { k: "lesssim;", v: 8818 }, { k: "lfisht;", v: 10620 }, { k: "lfloor;", v: 8970 }, { k: "lfr;", v: 120105 }, { k: "lg;", v: 8822 }, { k: "lgE;", v: 10897 }, { k: "lhard;", v: 8637 }, { k: "lharu;", v: 8636 }, { k: "lharul;", v: 10602 }, { k: "lhblk;", v: 9604 }, { k: "ljcy;", v: 1113 }, { k: "ll;", v: 8810 }, { k: "llarr;", v: 8647 }, { k: "llcorner;", v: 8990 }, { k: "llhard;", v: 10603 }, { k: "lltri;", v: 9722 }, { k: "lmidot;", v: 320 }, { k: "lmoust;", v: 9136 }, { k: "lmoustache;", v: 9136 }, { k: "lnE;", v: 8808 }, { k: "lnap;", v: 10889 }, { k: "lnapprox;", v: 10889 }, { k: "lne;", v: 10887 }, { k: "lneq;", v: 10887 }, { k: "lneqq;", v: 8808 }, { k: "lnsim;", v: 8934 }, { k: "loang;", v: 10220 }, { k: "loarr;", v: 8701 }, { k: "lobrk;", v: 10214 }, { k: "longleftarrow;", v: 10229 }, { k: "longleftrightarrow;", v: 10231 }, { k: "longmapsto;", v: 10236 }, { k: "longrightarrow;", v: 10230 }, { k: "looparrowleft;", v: 8619 }, { k: "looparrowright;", v: 8620 }, { k: "lopar;", v: 10629 }, { k: "lopf;", v: 120157 }, { k: "loplus;", v: 10797 }, { k: "lotimes;", v: 10804 }, { k: "lowast;", v: 8727 }, { k: "lowbar;", v: 95 }, { k: "loz;", v: 9674 }, { k: "lozenge;", v: 9674 }, { k: "lozf;", v: 10731 }, { k: "lpar;", v: 40 }, { k: "lparlt;", v: 10643 }, { k: "lrarr;", v: 8646 }, { k: "lrcorner;", v: 8991 }, { k: "lrhar;", v: 8651 }, { k: "lrhard;", v: 10605 }, { k: "lrm;", v: 8206 }, { k: "lrtri;", v: 8895 }, { k: "lsaquo;", v: 8249 }, { k: "lscr;", v: 120001 }, { k: "lsh;", v: 8624 }, { k: "lsim;", v: 8818 }, { k: "lsime;", v: 10893 }, { k: "lsimg;", v: 10895 }, { k: "lsqb;", v: 91 }, { k: "lsquo;", v: 8216 }, { k: "lsquor;", v: 8218 }, { k: "lstrok;", v: 322 }, { k: "lt;", v: 60 }, { k: "ltcc;", v: 10918 }, { k: "ltcir;", v: 10873 }, { k: "ltdot;", v: 8918 }, { k: "lthree;", v: 8907 }, { k: "ltimes;", v: 8905 }, { k: "ltlarr;", v: 10614 }, { k: "ltquest;", v: 10875 }, { k: "ltrPar;", v: 10646 }, { k: "ltri;", v: 9667 }, { k: "ltrie;", v: 8884 }, { k: "ltrif;", v: 9666 }, { k: "lurdshar;", v: 10570 }, { k: "luruhar;", v: 10598 }, { k: "mDDot;", v: 8762 }, { k: "macr;", v: 175 }, { k: "male;", v: 9794 }, { k: "malt;", v: 10016 }, { k: "maltese;", v: 10016 }, { k: "map;", v: 8614 }, { k: "mapsto;", v: 8614 }, { k: "mapstodown;", v: 8615 }, { k: "mapstoleft;", v: 8612 }, { k: "mapstoup;", v: 8613 }, { k: "marker;", v: 9646 }, { k: "mcomma;", v: 10793 }, { k: "mcy;", v: 1084 }, { k: "mdash;", v: 8212 }, { k: "measuredangle;", v: 8737 }, { k: "mfr;", v: 120106 }, { k: "mho;", v: 8487 }, { k: "micro;", v: 181 }, { k: "mid;", v: 8739 }, { k: "midast;", v: 42 }, { k: "midcir;", v: 10992 }, { k: "middot;", v: 183 }, { k: "minus;", v: 8722 }, { k: "minusb;", v: 8863 }, { k: "minusd;", v: 8760 }, { k: "minusdu;", v: 10794 }, { k: "mlcp;", v: 10971 }, { k: "mldr;", v: 8230 }, { k: "mnplus;", v: 8723 }, { k: "models;", v: 8871 }, { k: "mopf;", v: 120158 }, { k: "mp;", v: 8723 }, { k: "mscr;", v: 120002 }, { k: "mstpos;", v: 8766 }, { k: "mu;", v: 956 }, { k: "multimap;", v: 8888 }, { k: "mumap;", v: 8888 }, { k: "nLeftarrow;", v: 8653 }, { k: "nLeftrightarrow;", v: 8654 }, { k: "nRightarrow;", v: 8655 }, { k: "nVDash;", v: 8879 }, { k: "nVdash;", v: 8878 }, { k: "nabla;", v: 8711 }, { k: "nacute;", v: 324 }, { k: "nap;", v: 8777 }, { k: "napos;", v: 329 }, { k: "napprox;", v: 8777 }, { k: "natur;", v: 9838 }, { k: "natural;", v: 9838 }, { k: "naturals;", v: 8469 }, { k: "nbsp;", v: 160 }, { k: "ncap;", v: 10819 }, { k: "ncaron;", v: 328 }, { k: "ncedil;", v: 326 }, { k: "ncong;", v: 8775 }, { k: "ncup;", v: 10818 }, { k: "ncy;", v: 1085 }, { k: "ndash;", v: 8211 }, { k: "ne;", v: 8800 }, { k: "neArr;", v: 8663 }, { k: "nearhk;", v: 10532 }, { k: "nearr;", v: 8599 }, { k: "nearrow;", v: 8599 }, { k: "nequiv;", v: 8802 }, { k: "nesear;", v: 10536 }, { k: "nexist;", v: 8708 }, { k: "nexists;", v: 8708 }, { k: "nfr;", v: 120107 }, { k: "nge;", v: 8817 }, { k: "ngeq;", v: 8817 }, { k: "ngsim;", v: 8821 }, { k: "ngt;", v: 8815 }, { k: "ngtr;", v: 8815 }, { k: "nhArr;", v: 8654 }, { k: "nharr;", v: 8622 }, { k: "nhpar;", v: 10994 }, { k: "ni;", v: 8715 }, { k: "nis;", v: 8956 }, { k: "nisd;", v: 8954 }, { k: "niv;", v: 8715 }, { k: "njcy;", v: 1114 }, { k: "nlArr;", v: 8653 }, { k: "nlarr;", v: 8602 }, { k: "nldr;", v: 8229 }, { k: "nle;", v: 8816 }, { k: "nleftarrow;", v: 8602 }, { k: "nleftrightarrow;", v: 8622 }, { k: "nleq;", v: 8816 }, { k: "nless;", v: 8814 }, { k: "nlsim;", v: 8820 }, { k: "nlt;", v: 8814 }, { k: "nltri;", v: 8938 }, { k: "nltrie;", v: 8940 }, { k: "nmid;", v: 8740 }, { k: "nopf;", v: 120159 }, { k: "not;", v: 172 }, { k: "notin;", v: 8713 }, { k: "notinva;", v: 8713 }, { k: "notinvb;", v: 8951 }, { k: "notinvc;", v: 8950 }, { k: "notni;", v: 8716 }, { k: "notniva;", v: 8716 }, { k: "notnivb;", v: 8958 }, { k: "notnivc;", v: 8957 }, { k: "npar;", v: 8742 }, { k: "nparallel;", v: 8742 }, { k: "npolint;", v: 10772 }, { k: "npr;", v: 8832 }, { k: "nprcue;", v: 8928 }, { k: "nprec;", v: 8832 }, { k: "nrArr;", v: 8655 }, { k: "nrarr;", v: 8603 }, { k: "nrightarrow;", v: 8603 }, { k: "nrtri;", v: 8939 }, { k: "nrtrie;", v: 8941 }, { k: "nsc;", v: 8833 }, { k: "nsccue;", v: 8929 }, { k: "nscr;", v: 120003 }, { k: "nshortmid;", v: 8740 }, { k: "nshortparallel;", v: 8742 }, { k: "nsim;", v: 8769 }, { k: "nsime;", v: 8772 }, { k: "nsimeq;", v: 8772 }, { k: "nsmid;", v: 8740 }, { k: "nspar;", v: 8742 }, { k: "nsqsube;", v: 8930 }, { k: "nsqsupe;", v: 8931 }, { k: "nsub;", v: 8836 }, { k: "nsube;", v: 8840 }, { k: "nsubseteq;", v: 8840 }, { k: "nsucc;", v: 8833 }, { k: "nsup;", v: 8837 }, { k: "nsupe;", v: 8841 }, { k: "nsupseteq;", v: 8841 }, { k: "ntgl;", v: 8825 }, { k: "ntilde;", v: 241 }, { k: "ntlg;", v: 8824 }, { k: "ntriangleleft;", v: 8938 }, { k: "ntrianglelefteq;", v: 8940 }, { k: "ntriangleright;", v: 8939 }, { k: "ntrianglerighteq;", v: 8941 }, { k: "nu;", v: 957 }, { k: "num;", v: 35 }, { k: "numero;", v: 8470 }, { k: "numsp;", v: 8199 }, { k: "nvDash;", v: 8877 }, { k: "nvHarr;", v: 10500 }, { k: "nvdash;", v: 8876 }, { k: "nvinfin;", v: 10718 }, { k: "nvlArr;", v: 10498 }, { k: "nvrArr;", v: 10499 }, { k: "nwArr;", v: 8662 }, { k: "nwarhk;", v: 10531 }, { k: "nwarr;", v: 8598 }, { k: "nwarrow;", v: 8598 }, { k: "nwnear;", v: 10535 }, { k: "oS;", v: 9416 }, { k: "oacute;", v: 243 }, { k: "oast;", v: 8859 }, { k: "ocir;", v: 8858 }, { k: "ocirc;", v: 244 }, { k: "ocy;", v: 1086 }, { k: "odash;", v: 8861 }, { k: "odblac;", v: 337 }, { k: "odiv;", v: 10808 }, { k: "odot;", v: 8857 }, { k: "odsold;", v: 10684 }, { k: "oelig;", v: 339 }, { k: "ofcir;", v: 10687 }, { k: "ofr;", v: 120108 }, { k: "ogon;", v: 731 }, { k: "ograve;", v: 242 }, { k: "ogt;", v: 10689 }, { k: "ohbar;", v: 10677 }, { k: "ohm;", v: 937 }, { k: "oint;", v: 8750 }, { k: "olarr;", v: 8634 }, { k: "olcir;", v: 10686 }, { k: "olcross;", v: 10683 }, { k: "oline;", v: 8254 }, { k: "olt;", v: 10688 }, { k: "omacr;", v: 333 }, { k: "omega;", v: 969 }, { k: "omicron;", v: 959 }, { k: "omid;", v: 10678 }, { k: "ominus;", v: 8854 }, { k: "oopf;", v: 120160 }, { k: "opar;", v: 10679 }, { k: "operp;", v: 10681 }, { k: "oplus;", v: 8853 }, { k: "or;", v: 8744 }, { k: "orarr;", v: 8635 }, { k: "ord;", v: 10845 }, { k: "order;", v: 8500 }, { k: "orderof;", v: 8500 }, { k: "ordf;", v: 170 }, { k: "ordm;", v: 186 }, { k: "origof;", v: 8886 }, { k: "oror;", v: 10838 }, { k: "orslope;", v: 10839 }, { k: "orv;", v: 10843 }, { k: "oscr;", v: 8500 }, { k: "oslash;", v: 248 }, { k: "osol;", v: 8856 }, { k: "otilde;", v: 245 }, { k: "otimes;", v: 8855 }, { k: "otimesas;", v: 10806 }, { k: "ouml;", v: 246 }, { k: "ovbar;", v: 9021 }, { k: "par;", v: 8741 }, { k: "para;", v: 182 }, { k: "parallel;", v: 8741 }, { k: "parsim;", v: 10995 }, { k: "parsl;", v: 11005 }, { k: "part;", v: 8706 }, { k: "pcy;", v: 1087 }, { k: "percnt;", v: 37 }, { k: "period;", v: 46 }, { k: "permil;", v: 8240 }, { k: "perp;", v: 8869 }, { k: "pertenk;", v: 8241 }, { k: "pfr;", v: 120109 }, { k: "phi;", v: 966 }, { k: "phiv;", v: 981 }, { k: "phmmat;", v: 8499 }, { k: "phone;", v: 9742 }, { k: "pi;", v: 960 }, { k: "pitchfork;", v: 8916 }, { k: "piv;", v: 982 }, { k: "planck;", v: 8463 }, { k: "planckh;", v: 8462 }, { k: "plankv;", v: 8463 }, { k: "plus;", v: 43 }, { k: "plusacir;", v: 10787 }, { k: "plusb;", v: 8862 }, { k: "pluscir;", v: 10786 }, { k: "plusdo;", v: 8724 }, { k: "plusdu;", v: 10789 }, { k: "pluse;", v: 10866 }, { k: "plusmn;", v: 177 }, { k: "plussim;", v: 10790 }, { k: "plustwo;", v: 10791 }, { k: "pm;", v: 177 }, { k: "pointint;", v: 10773 }, { k: "popf;", v: 120161 }, { k: "pound;", v: 163 }, { k: "pr;", v: 8826 }, { k: "prE;", v: 10931 }, { k: "prap;", v: 10935 }, { k: "prcue;", v: 8828 }, { k: "pre;", v: 10927 }, { k: "prec;", v: 8826 }, { k: "precapprox;", v: 10935 }, { k: "preccurlyeq;", v: 8828 }, { k: "preceq;", v: 10927 }, { k: "precnapprox;", v: 10937 }, { k: "precneqq;", v: 10933 }, { k: "precnsim;", v: 8936 }, { k: "precsim;", v: 8830 }, { k: "prime;", v: 8242 }, { k: "primes;", v: 8473 }, { k: "prnE;", v: 10933 }, { k: "prnap;", v: 10937 }, { k: "prnsim;", v: 8936 }, { k: "prod;", v: 8719 }, { k: "profalar;", v: 9006 }, { k: "profline;", v: 8978 }, { k: "profsurf;", v: 8979 }, { k: "prop;", v: 8733 }, { k: "propto;", v: 8733 }, { k: "prsim;", v: 8830 }, { k: "prurel;", v: 8880 }, { k: "pscr;", v: 120005 }, { k: "psi;", v: 968 }, { k: "puncsp;", v: 8200 }, { k: "qfr;", v: 120110 }, { k: "qint;", v: 10764 }, { k: "qopf;", v: 120162 }, { k: "qprime;", v: 8279 }, { k: "qscr;", v: 120006 }, { k: "quaternions;", v: 8461 }, { k: "quatint;", v: 10774 }, { k: "quest;", v: 63 }, { k: "questeq;", v: 8799 }, { k: "quot;", v: 34 }, { k: "rAarr;", v: 8667 }, { k: "rArr;", v: 8658 }, { k: "rAtail;", v: 10524 }, { k: "rBarr;", v: 10511 }, { k: "rHar;", v: 10596 }, { k: "racute;", v: 341 }, { k: "radic;", v: 8730 }, { k: "raemptyv;", v: 10675 }, { k: "rang;", v: 10217 }, { k: "rangd;", v: 10642 }, { k: "range;", v: 10661 }, { k: "rangle;", v: 10217 }, { k: "raquo;", v: 187 }, { k: "rarr;", v: 8594 }, { k: "rarrap;", v: 10613 }, { k: "rarrb;", v: 8677 }, { k: "rarrbfs;", v: 10528 }, { k: "rarrc;", v: 10547 }, { k: "rarrfs;", v: 10526 }, { k: "rarrhk;", v: 8618 }, { k: "rarrlp;", v: 8620 }, { k: "rarrpl;", v: 10565 }, { k: "rarrsim;", v: 10612 }, { k: "rarrtl;", v: 8611 }, { k: "rarrw;", v: 8605 }, { k: "ratail;", v: 10522 }, { k: "ratio;", v: 8758 }, { k: "rationals;", v: 8474 }, { k: "rbarr;", v: 10509 }, { k: "rbbrk;", v: 10099 }, { k: "rbrace;", v: 125 }, { k: "rbrack;", v: 93 }, { k: "rbrke;", v: 10636 }, { k: "rbrksld;", v: 10638 }, { k: "rbrkslu;", v: 10640 }, { k: "rcaron;", v: 345 }, { k: "rcedil;", v: 343 }, { k: "rceil;", v: 8969 }, { k: "rcub;", v: 125 }, { k: "rcy;", v: 1088 }, { k: "rdca;", v: 10551 }, { k: "rdldhar;", v: 10601 }, { k: "rdquo;", v: 8221 }, { k: "rdquor;", v: 8221 }, { k: "rdsh;", v: 8627 }, { k: "real;", v: 8476 }, { k: "realine;", v: 8475 }, { k: "realpart;", v: 8476 }, { k: "reals;", v: 8477 }, { k: "rect;", v: 9645 }, { k: "reg;", v: 174 }, { k: "rfisht;", v: 10621 }, { k: "rfloor;", v: 8971 }, { k: "rfr;", v: 120111 }, { k: "rhard;", v: 8641 }, { k: "rharu;", v: 8640 }, { k: "rharul;", v: 10604 }, { k: "rho;", v: 961 }, { k: "rhov;", v: 1009 }, { k: "rightarrow;", v: 8594 }, { k: "rightarrowtail;", v: 8611 }, { k: "rightharpoondown;", v: 8641 }, { k: "rightharpoonup;", v: 8640 }, { k: "rightleftarrows;", v: 8644 }, { k: "rightleftharpoons;", v: 8652 }, { k: "rightrightarrows;", v: 8649 }, { k: "rightsquigarrow;", v: 8605 }, { k: "rightthreetimes;", v: 8908 }, { k: "ring;", v: 730 }, { k: "risingdotseq;", v: 8787 }, { k: "rlarr;", v: 8644 }, { k: "rlhar;", v: 8652 }, { k: "rlm;", v: 8207 }, { k: "rmoust;", v: 9137 }, { k: "rmoustache;", v: 9137 }, { k: "rnmid;", v: 10990 }, { k: "roang;", v: 10221 }, { k: "roarr;", v: 8702 }, { k: "robrk;", v: 10215 }, { k: "ropar;", v: 10630 }, { k: "ropf;", v: 120163 }, { k: "roplus;", v: 10798 }, { k: "rotimes;", v: 10805 }, { k: "rpar;", v: 41 }, { k: "rpargt;", v: 10644 }, { k: "rppolint;", v: 10770 }, { k: "rrarr;", v: 8649 }, { k: "rsaquo;", v: 8250 }, { k: "rscr;", v: 120007 }, { k: "rsh;", v: 8625 }, { k: "rsqb;", v: 93 }, { k: "rsquo;", v: 8217 }, { k: "rsquor;", v: 8217 }, { k: "rthree;", v: 8908 }, { k: "rtimes;", v: 8906 }, { k: "rtri;", v: 9657 }, { k: "rtrie;", v: 8885 }, { k: "rtrif;", v: 9656 }, { k: "rtriltri;", v: 10702 }, { k: "ruluhar;", v: 10600 }, { k: "rx;", v: 8478 }, { k: "sacute;", v: 347 }, { k: "sbquo;", v: 8218 }, { k: "sc;", v: 8827 }, { k: "scE;", v: 10932 }, { k: "scap;", v: 10936 }, { k: "scaron;", v: 353 }, { k: "sccue;", v: 8829 }, { k: "sce;", v: 10928 }, { k: "scedil;", v: 351 }, { k: "scirc;", v: 349 }, { k: "scnE;", v: 10934 }, { k: "scnap;", v: 10938 }, { k: "scnsim;", v: 8937 }, { k: "scpolint;", v: 10771 }, { k: "scsim;", v: 8831 }, { k: "scy;", v: 1089 }, { k: "sdot;", v: 8901 }, { k: "sdotb;", v: 8865 }, { k: "sdote;", v: 10854 }, { k: "seArr;", v: 8664 }, { k: "searhk;", v: 10533 }, { k: "searr;", v: 8600 }, { k: "searrow;", v: 8600 }, { k: "sect;", v: 167 }, { k: "semi;", v: 59 }, { k: "seswar;", v: 10537 }, { k: "setminus;", v: 8726 }, { k: "setmn;", v: 8726 }, { k: "sext;", v: 10038 }, { k: "sfr;", v: 120112 }, { k: "sfrown;", v: 8994 }, { k: "sharp;", v: 9839 }, { k: "shchcy;", v: 1097 }, { k: "shcy;", v: 1096 }, { k: "shortmid;", v: 8739 }, { k: "shortparallel;", v: 8741 }, { k: "shy;", v: 173 }, { k: "sigma;", v: 963 }, { k: "sigmaf;", v: 962 }, { k: "sigmav;", v: 962 }, { k: "sim;", v: 8764 }, { k: "simdot;", v: 10858 }, { k: "sime;", v: 8771 }, { k: "simeq;", v: 8771 }, { k: "simg;", v: 10910 }, { k: "simgE;", v: 10912 }, { k: "siml;", v: 10909 }, { k: "simlE;", v: 10911 }, { k: "simne;", v: 8774 }, { k: "simplus;", v: 10788 }, { k: "simrarr;", v: 10610 }, { k: "slarr;", v: 8592 }, { k: "smallsetminus;", v: 8726 }, { k: "smashp;", v: 10803 }, { k: "smeparsl;", v: 10724 }, { k: "smid;", v: 8739 }, { k: "smile;", v: 8995 }, { k: "smt;", v: 10922 }, { k: "smte;", v: 10924 }, { k: "softcy;", v: 1100 }, { k: "sol;", v: 47 }, { k: "solb;", v: 10692 }, { k: "solbar;", v: 9023 }, { k: "sopf;", v: 120164 }, { k: "spades;", v: 9824 }, { k: "spadesuit;", v: 9824 }, { k: "spar;", v: 8741 }, { k: "sqcap;", v: 8851 }, { k: "sqcup;", v: 8852 }, { k: "sqsub;", v: 8847 }, { k: "sqsube;", v: 8849 }, { k: "sqsubset;", v: 8847 }, { k: "sqsubseteq;", v: 8849 }, { k: "sqsup;", v: 8848 }, { k: "sqsupe;", v: 8850 }, { k: "sqsupset;", v: 8848 }, { k: "sqsupseteq;", v: 8850 }, { k: "squ;", v: 9633 }, { k: "square;", v: 9633 }, { k: "squarf;", v: 9642 }, { k: "squf;", v: 9642 }, { k: "srarr;", v: 8594 }, { k: "sscr;", v: 120008 }, { k: "ssetmn;", v: 8726 }, { k: "ssmile;", v: 8995 }, { k: "sstarf;", v: 8902 }, { k: "star;", v: 9734 }, { k: "starf;", v: 9733 }, { k: "straightepsilon;", v: 1013 }, { k: "straightphi;", v: 981 }, { k: "strns;", v: 175 }, { k: "sub;", v: 8834 }, { k: "subE;", v: 10949 }, { k: "subdot;", v: 10941 }, { k: "sube;", v: 8838 }, { k: "subedot;", v: 10947 }, { k: "submult;", v: 10945 }, { k: "subnE;", v: 10955 }, { k: "subne;", v: 8842 }, { k: "subplus;", v: 10943 }, { k: "subrarr;", v: 10617 }, { k: "subset;", v: 8834 }, { k: "subseteq;", v: 8838 }, { k: "subseteqq;", v: 10949 }, { k: "subsetneq;", v: 8842 }, { k: "subsetneqq;", v: 10955 }, { k: "subsim;", v: 10951 }, { k: "subsub;", v: 10965 }, { k: "subsup;", v: 10963 }, { k: "succ;", v: 8827 }, { k: "succapprox;", v: 10936 }, { k: "succcurlyeq;", v: 8829 }, { k: "succeq;", v: 10928 }, { k: "succnapprox;", v: 10938 }, { k: "succneqq;", v: 10934 }, { k: "succnsim;", v: 8937 }, { k: "succsim;", v: 8831 }, { k: "sum;", v: 8721 }, { k: "sung;", v: 9834 }, { k: "sup;", v: 8835 }, { k: "sup1;", v: 185 }, { k: "sup2;", v: 178 }, { k: "sup3;", v: 179 }, { k: "supE;", v: 10950 }, { k: "supdot;", v: 10942 }, { k: "supdsub;", v: 10968 }, { k: "supe;", v: 8839 }, { k: "supedot;", v: 10948 }, { k: "suphsol;", v: 10185 }, { k: "suphsub;", v: 10967 }, { k: "suplarr;", v: 10619 }, { k: "supmult;", v: 10946 }, { k: "supnE;", v: 10956 }, { k: "supne;", v: 8843 }, { k: "supplus;", v: 10944 }, { k: "supset;", v: 8835 }, { k: "supseteq;", v: 8839 }, { k: "supseteqq;", v: 10950 }, { k: "supsetneq;", v: 8843 }, { k: "supsetneqq;", v: 10956 }, { k: "supsim;", v: 10952 }, { k: "supsub;", v: 10964 }, { k: "supsup;", v: 10966 }, { k: "swArr;", v: 8665 }, { k: "swarhk;", v: 10534 }, { k: "swarr;", v: 8601 }, { k: "swarrow;", v: 8601 }, { k: "swnwar;", v: 10538 }, { k: "szlig;", v: 223 }, { k: "target;", v: 8982 }, { k: "tau;", v: 964 }, { k: "tbrk;", v: 9140 }, { k: "tcaron;", v: 357 }, { k: "tcedil;", v: 355 }, { k: "tcy;", v: 1090 }, { k: "tdot;", v: 8411 }, { k: "telrec;", v: 8981 }, { k: "tfr;", v: 120113 }, { k: "there4;", v: 8756 }, { k: "therefore;", v: 8756 }, { k: "theta;", v: 952 }, { k: "thetasym;", v: 977 }, { k: "thetav;", v: 977 }, { k: "thickapprox;", v: 8776 }, { k: "thicksim;", v: 8764 }, { k: "thinsp;", v: 8201 }, { k: "thkap;", v: 8776 }, { k: "thksim;", v: 8764 }, { k: "thorn;", v: 254 }, { k: "tilde;", v: 732 }, { k: "times;", v: 215 }, { k: "timesb;", v: 8864 }, { k: "timesbar;", v: 10801 }, { k: "timesd;", v: 10800 }, { k: "tint;", v: 8749 }, { k: "toea;", v: 10536 }, { k: "top;", v: 8868 }, { k: "topbot;", v: 9014 }, { k: "topcir;", v: 10993 }, { k: "topf;", v: 120165 }, { k: "topfork;", v: 10970 }, { k: "tosa;", v: 10537 }, { k: "tprime;", v: 8244 }, { k: "trade;", v: 8482 }, { k: "triangle;", v: 9653 }, { k: "triangledown;", v: 9663 }, { k: "triangleleft;", v: 9667 }, { k: "trianglelefteq;", v: 8884 }, { k: "triangleq;", v: 8796 }, { k: "triangleright;", v: 9657 }, { k: "trianglerighteq;", v: 8885 }, { k: "tridot;", v: 9708 }, { k: "trie;", v: 8796 }, { k: "triminus;", v: 10810 }, { k: "triplus;", v: 10809 }, { k: "trisb;", v: 10701 }, { k: "tritime;", v: 10811 }, { k: "trpezium;", v: 9186 }, { k: "tscr;", v: 120009 }, { k: "tscy;", v: 1094 }, { k: "tshcy;", v: 1115 }, { k: "tstrok;", v: 359 }, { k: "twixt;", v: 8812 }, { k: "twoheadleftarrow;", v: 8606 }, { k: "twoheadrightarrow;", v: 8608 }, { k: "uArr;", v: 8657 }, { k: "uHar;", v: 10595 }, { k: "uacute;", v: 250 }, { k: "uarr;", v: 8593 }, { k: "ubrcy;", v: 1118 }, { k: "ubreve;", v: 365 }, { k: "ucirc;", v: 251 }, { k: "ucy;", v: 1091 }, { k: "udarr;", v: 8645 }, { k: "udblac;", v: 369 }, { k: "udhar;", v: 10606 }, { k: "ufisht;", v: 10622 }, { k: "ufr;", v: 120114 }, { k: "ugrave;", v: 249 }, { k: "uharl;", v: 8639 }, { k: "uharr;", v: 8638 }, { k: "uhblk;", v: 9600 }, { k: "ulcorn;", v: 8988 }, { k: "ulcorner;", v: 8988 }, { k: "ulcrop;", v: 8975 }, { k: "ultri;", v: 9720 }, { k: "umacr;", v: 363 }, { k: "uml;", v: 168 }, { k: "uogon;", v: 371 }, { k: "uopf;", v: 120166 }, { k: "uparrow;", v: 8593 }, { k: "updownarrow;", v: 8597 }, { k: "upharpoonleft;", v: 8639 }, { k: "upharpoonright;", v: 8638 }, { k: "uplus;", v: 8846 }, { k: "upsi;", v: 965 }, { k: "upsih;", v: 978 }, { k: "upsilon;", v: 965 }, { k: "upuparrows;", v: 8648 }, { k: "urcorn;", v: 8989 }, { k: "urcorner;", v: 8989 }, { k: "urcrop;", v: 8974 }, { k: "uring;", v: 367 }, { k: "urtri;", v: 9721 }, { k: "uscr;", v: 120010 }, { k: "utdot;", v: 8944 }, { k: "utilde;", v: 361 }, { k: "utri;", v: 9653 }, { k: "utrif;", v: 9652 }, { k: "uuarr;", v: 8648 }, { k: "uuml;", v: 252 }, { k: "uwangle;", v: 10663 }, { k: "vArr;", v: 8661 }, { k: "vBar;", v: 10984 }, { k: "vBarv;", v: 10985 }, { k: "vDash;", v: 8872 }, { k: "vangrt;", v: 10652 }, { k: "varepsilon;", v: 1013 }, { k: "varkappa;", v: 1008 }, { k: "varnothing;", v: 8709 }, { k: "varphi;", v: 981 }, { k: "varpi;", v: 982 }, { k: "varpropto;", v: 8733 }, { k: "varr;", v: 8597 }, { k: "varrho;", v: 1009 }, { k: "varsigma;", v: 962 }, { k: "vartheta;", v: 977 }, { k: "vartriangleleft;", v: 8882 }, { k: "vartriangleright;", v: 8883 }, { k: "vcy;", v: 1074 }, { k: "vdash;", v: 8866 }, { k: "vee;", v: 8744 }, { k: "veebar;", v: 8891 }, { k: "veeeq;", v: 8794 }, { k: "vellip;", v: 8942 }, { k: "verbar;", v: 124 }, { k: "vert;", v: 124 }, { k: "vfr;", v: 120115 }, { k: "vltri;", v: 8882 }, { k: "vopf;", v: 120167 }, { k: "vprop;", v: 8733 }, { k: "vrtri;", v: 8883 }, { k: "vscr;", v: 120011 }, { k: "vzigzag;", v: 10650 }, { k: "wcirc;", v: 373 }, { k: "wedbar;", v: 10847 }, { k: "wedge;", v: 8743 }, { k: "wedgeq;", v: 8793 }, { k: "weierp;", v: 8472 }, { k: "wfr;", v: 120116 }, { k: "wopf;", v: 120168 }, { k: "wp;", v: 8472 }, { k: "wr;", v: 8768 }, { k: "wreath;", v: 8768 }, { k: "wscr;", v: 120012 }, { k: "xcap;", v: 8898 }, { k: "xcirc;", v: 9711 }, { k: "xcup;", v: 8899 }, { k: "xdtri;", v: 9661 }, { k: "xfr;", v: 120117 }, { k: "xhArr;", v: 10234 }, { k: "xharr;", v: 10231 }, { k: "xi;", v: 958 }, { k: "xlArr;", v: 10232 }, { k: "xlarr;", v: 10229 }, { k: "xmap;", v: 10236 }, { k: "xnis;", v: 8955 }, { k: "xodot;", v: 10752 }, { k: "xopf;", v: 120169 }, { k: "xoplus;", v: 10753 }, { k: "xotime;", v: 10754 }, { k: "xrArr;", v: 10233 }, { k: "xrarr;", v: 10230 }, { k: "xscr;", v: 120013 }, { k: "xsqcup;", v: 10758 }, { k: "xuplus;", v: 10756 }, { k: "xutri;", v: 9651 }, { k: "xvee;", v: 8897 }, { k: "xwedge;", v: 8896 }, { k: "yacute;", v: 253 }, { k: "yacy;", v: 1103 }, { k: "ycirc;", v: 375 }, { k: "ycy;", v: 1099 }, { k: "yen;", v: 165 }, { k: "yfr;", v: 120118 }, { k: "yicy;", v: 1111 }, { k: "yopf;", v: 120170 }, { k: "yscr;", v: 120014 }, { k: "yucy;", v: 1102 }, { k: "yuml;", v: 255 }, { k: "zacute;", v: 378 }, { k: "zcaron;", v: 382 }, { k: "zcy;", v: 1079 }, { k: "zdot;", v: 380 }, { k: "zeetrf;", v: 8488 }, { k: "zeta;", v: 950 }, { k: "zfr;", v: 120119 }, { k: "zhcy;", v: 1078 }, { k: "zigrarr;", v: 8669 }, { k: "zopf;", v: 120171 }, { k: "zscr;", v: 120015 }, { k: "zwj;", v: 8205 }, { k: "zwnj;", v: 8204 }, { k: "AElig", v: 198 }, { k: "AMP", v: 38 }, { k: "Aacute", v: 193 }, { k: "Acirc", v: 194 }, { k: "Agrave", v: 192 }, { k: "Aring", v: 197 }, { k: "Atilde", v: 195 }, { k: "Auml", v: 196 }, { k: "COPY", v: 169 }, { k: "Ccedil", v: 199 }, { k: "ETH", v: 208 }, { k: "Eacute", v: 201 }, { k: "Ecirc", v: 202 }, { k: "Egrave", v: 200 }, { k: "Euml", v: 203 }, { k: "GT", v: 62 }, { k: "Iacute", v: 205 }, { k: "Icirc", v: 206 }, { k: "Igrave", v: 204 }, { k: "Iuml", v: 207 }, { k: "LT", v: 60 }, { k: "Ntilde", v: 209 }, { k: "Oacute", v: 211 }, { k: "Ocirc", v: 212 }, { k: "Ograve", v: 210 }, { k: "Oslash", v: 216 }, { k: "Otilde", v: 213 }, { k: "Ouml", v: 214 }, { k: "QUOT", v: 34 }, { k: "REG", v: 174 }, { k: "THORN", v: 222 }, { k: "Uacute", v: 218 }, { k: "Ucirc", v: 219 }, { k: "Ugrave", v: 217 }, { k: "Uuml", v: 220 }, { k: "Yacute", v: 221 }, { k: "aacute", v: 225 }, { k: "acirc", v: 226 }, { k: "acute", v: 180 }, { k: "aelig", v: 230 }, { k: "agrave", v: 224 }, { k: "amp", v: 38 }, { k: "aring", v: 229 }, { k: "atilde", v: 227 }, { k: "auml", v: 228 }, { k: "brvbar", v: 166 }, { k: "ccedil", v: 231 }, { k: "cedil", v: 184 }, { k: "cent", v: 162 }, { k: "copy", v: 169 }, { k: "curren", v: 164 }, { k: "deg", v: 176 }, { k: "divide", v: 247 }, { k: "eacute", v: 233 }, { k: "ecirc", v: 234 }, { k: "egrave", v: 232 }, { k: "eth", v: 240 }, { k: "euml", v: 235 }, { k: "frac12", v: 189 }, { k: "frac14", v: 188 }, { k: "frac34", v: 190 }, { k: "gt", v: 62 }, { k: "iacute", v: 237 }, { k: "icirc", v: 238 }, { k: "iexcl", v: 161 }, { k: "igrave", v: 236 }, { k: "iquest", v: 191 }, { k: "iuml", v: 239 }, { k: "laquo", v: 171 }, { k: "lt", v: 60 }, { k: "macr", v: 175 }, { k: "micro", v: 181 }, { k: "middot", v: 183 }, { k: "nbsp", v: 160 }, { k: "not", v: 172 }, { k: "ntilde", v: 241 }, { k: "oacute", v: 243 }, { k: "ocirc", v: 244 }, { k: "ograve", v: 242 }, { k: "ordf", v: 170 }, { k: "ordm", v: 186 }, { k: "oslash", v: 248 }, { k: "otilde", v: 245 }, { k: "ouml", v: 246 }, { k: "para", v: 182 }, { k: "plusmn", v: 177 }, { k: "pound", v: 163 }, { k: "quot", v: 34 }, { k: "raquo", v: 187 }, { k: "reg", v: 174 }, { k: "sect", v: 167 }, { k: "shy", v: 173 }, { k: "sup1", v: 185 }, { k: "sup2", v: 178 }, { k: "sup3", v: 179 }, { k: "szlig", v: 223 }, { k: "thorn", v: 254 }, { k: "times", v: 215 }, { k: "uacute", v: 250 }, { k: "ucirc", v: 251 }, { k: "ugrave", v: 249 }, { k: "uml", v: 168 }, { k: "uuml", v: 252 }, { k: "yacute", v: 253 }, { k: "yen", v: 165 }, { k: "yuml", v: 255 }]);
		entity2 = $makeMap($String.keyFor, [{ k: "NotEqualTilde;", v: $toNativeArray($kindInt32, [8770, 824]) }, { k: "NotGreaterFullEqual;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "NotGreaterGreater;", v: $toNativeArray($kindInt32, [8811, 824]) }, { k: "NotGreaterSlantEqual;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "NotHumpDownHump;", v: $toNativeArray($kindInt32, [8782, 824]) }, { k: "NotHumpEqual;", v: $toNativeArray($kindInt32, [8783, 824]) }, { k: "NotLeftTriangleBar;", v: $toNativeArray($kindInt32, [10703, 824]) }, { k: "NotLessLess;", v: $toNativeArray($kindInt32, [8810, 824]) }, { k: "NotLessSlantEqual;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "NotNestedGreaterGreater;", v: $toNativeArray($kindInt32, [10914, 824]) }, { k: "NotNestedLessLess;", v: $toNativeArray($kindInt32, [10913, 824]) }, { k: "NotPrecedesEqual;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "NotRightTriangleBar;", v: $toNativeArray($kindInt32, [10704, 824]) }, { k: "NotSquareSubset;", v: $toNativeArray($kindInt32, [8847, 824]) }, { k: "NotSquareSuperset;", v: $toNativeArray($kindInt32, [8848, 824]) }, { k: "NotSubset;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "NotSucceedsEqual;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "NotSucceedsTilde;", v: $toNativeArray($kindInt32, [8831, 824]) }, { k: "NotSuperset;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "ThickSpace;", v: $toNativeArray($kindInt32, [8287, 8202]) }, { k: "acE;", v: $toNativeArray($kindInt32, [8766, 819]) }, { k: "bne;", v: $toNativeArray($kindInt32, [61, 8421]) }, { k: "bnequiv;", v: $toNativeArray($kindInt32, [8801, 8421]) }, { k: "caps;", v: $toNativeArray($kindInt32, [8745, 65024]) }, { k: "cups;", v: $toNativeArray($kindInt32, [8746, 65024]) }, { k: "fjlig;", v: $toNativeArray($kindInt32, [102, 106]) }, { k: "gesl;", v: $toNativeArray($kindInt32, [8923, 65024]) }, { k: "gvertneqq;", v: $toNativeArray($kindInt32, [8809, 65024]) }, { k: "gvnE;", v: $toNativeArray($kindInt32, [8809, 65024]) }, { k: "lates;", v: $toNativeArray($kindInt32, [10925, 65024]) }, { k: "lesg;", v: $toNativeArray($kindInt32, [8922, 65024]) }, { k: "lvertneqq;", v: $toNativeArray($kindInt32, [8808, 65024]) }, { k: "lvnE;", v: $toNativeArray($kindInt32, [8808, 65024]) }, { k: "nGg;", v: $toNativeArray($kindInt32, [8921, 824]) }, { k: "nGtv;", v: $toNativeArray($kindInt32, [8811, 824]) }, { k: "nLl;", v: $toNativeArray($kindInt32, [8920, 824]) }, { k: "nLtv;", v: $toNativeArray($kindInt32, [8810, 824]) }, { k: "nang;", v: $toNativeArray($kindInt32, [8736, 8402]) }, { k: "napE;", v: $toNativeArray($kindInt32, [10864, 824]) }, { k: "napid;", v: $toNativeArray($kindInt32, [8779, 824]) }, { k: "nbump;", v: $toNativeArray($kindInt32, [8782, 824]) }, { k: "nbumpe;", v: $toNativeArray($kindInt32, [8783, 824]) }, { k: "ncongdot;", v: $toNativeArray($kindInt32, [10861, 824]) }, { k: "nedot;", v: $toNativeArray($kindInt32, [8784, 824]) }, { k: "nesim;", v: $toNativeArray($kindInt32, [8770, 824]) }, { k: "ngE;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "ngeqq;", v: $toNativeArray($kindInt32, [8807, 824]) }, { k: "ngeqslant;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "nges;", v: $toNativeArray($kindInt32, [10878, 824]) }, { k: "nlE;", v: $toNativeArray($kindInt32, [8806, 824]) }, { k: "nleqq;", v: $toNativeArray($kindInt32, [8806, 824]) }, { k: "nleqslant;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "nles;", v: $toNativeArray($kindInt32, [10877, 824]) }, { k: "notinE;", v: $toNativeArray($kindInt32, [8953, 824]) }, { k: "notindot;", v: $toNativeArray($kindInt32, [8949, 824]) }, { k: "nparsl;", v: $toNativeArray($kindInt32, [11005, 8421]) }, { k: "npart;", v: $toNativeArray($kindInt32, [8706, 824]) }, { k: "npre;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "npreceq;", v: $toNativeArray($kindInt32, [10927, 824]) }, { k: "nrarrc;", v: $toNativeArray($kindInt32, [10547, 824]) }, { k: "nrarrw;", v: $toNativeArray($kindInt32, [8605, 824]) }, { k: "nsce;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "nsubE;", v: $toNativeArray($kindInt32, [10949, 824]) }, { k: "nsubset;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "nsubseteqq;", v: $toNativeArray($kindInt32, [10949, 824]) }, { k: "nsucceq;", v: $toNativeArray($kindInt32, [10928, 824]) }, { k: "nsupE;", v: $toNativeArray($kindInt32, [10950, 824]) }, { k: "nsupset;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "nsupseteqq;", v: $toNativeArray($kindInt32, [10950, 824]) }, { k: "nvap;", v: $toNativeArray($kindInt32, [8781, 8402]) }, { k: "nvge;", v: $toNativeArray($kindInt32, [8805, 8402]) }, { k: "nvgt;", v: $toNativeArray($kindInt32, [62, 8402]) }, { k: "nvle;", v: $toNativeArray($kindInt32, [8804, 8402]) }, { k: "nvlt;", v: $toNativeArray($kindInt32, [60, 8402]) }, { k: "nvltrie;", v: $toNativeArray($kindInt32, [8884, 8402]) }, { k: "nvrtrie;", v: $toNativeArray($kindInt32, [8885, 8402]) }, { k: "nvsim;", v: $toNativeArray($kindInt32, [8764, 8402]) }, { k: "race;", v: $toNativeArray($kindInt32, [8765, 817]) }, { k: "smtes;", v: $toNativeArray($kindInt32, [10924, 65024]) }, { k: "sqcaps;", v: $toNativeArray($kindInt32, [8851, 65024]) }, { k: "sqcups;", v: $toNativeArray($kindInt32, [8852, 65024]) }, { k: "varsubsetneq;", v: $toNativeArray($kindInt32, [8842, 65024]) }, { k: "varsubsetneqq;", v: $toNativeArray($kindInt32, [10955, 65024]) }, { k: "varsupsetneq;", v: $toNativeArray($kindInt32, [8843, 65024]) }, { k: "varsupsetneqq;", v: $toNativeArray($kindInt32, [10956, 65024]) }, { k: "vnsub;", v: $toNativeArray($kindInt32, [8834, 8402]) }, { k: "vnsup;", v: $toNativeArray($kindInt32, [8835, 8402]) }, { k: "vsubnE;", v: $toNativeArray($kindInt32, [10955, 65024]) }, { k: "vsubne;", v: $toNativeArray($kindInt32, [8842, 65024]) }, { k: "vsupnE;", v: $toNativeArray($kindInt32, [10956, 65024]) }, { k: "vsupne;", v: $toNativeArray($kindInt32, [8843, 65024]) }]);
		replacementTable = $toNativeArray($kindInt32, [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]);
		breakout = $makeMap($String.keyFor, [{ k: "b", v: true }, { k: "big", v: true }, { k: "blockquote", v: true }, { k: "body", v: true }, { k: "br", v: true }, { k: "center", v: true }, { k: "code", v: true }, { k: "dd", v: true }, { k: "div", v: true }, { k: "dl", v: true }, { k: "dt", v: true }, { k: "em", v: true }, { k: "embed", v: true }, { k: "h1", v: true }, { k: "h2", v: true }, { k: "h3", v: true }, { k: "h4", v: true }, { k: "h5", v: true }, { k: "h6", v: true }, { k: "head", v: true }, { k: "hr", v: true }, { k: "i", v: true }, { k: "img", v: true }, { k: "li", v: true }, { k: "listing", v: true }, { k: "menu", v: true }, { k: "meta", v: true }, { k: "nobr", v: true }, { k: "ol", v: true }, { k: "p", v: true }, { k: "pre", v: true }, { k: "ruby", v: true }, { k: "s", v: true }, { k: "small", v: true }, { k: "span", v: true }, { k: "strong", v: true }, { k: "strike", v: true }, { k: "sub", v: true }, { k: "sup", v: true }, { k: "table", v: true }, { k: "tt", v: true }, { k: "u", v: true }, { k: "ul", v: true }, { k: "var", v: true }]);
		svgTagNameAdjustments = $makeMap($String.keyFor, [{ k: "altglyph", v: "altGlyph" }, { k: "altglyphdef", v: "altGlyphDef" }, { k: "altglyphitem", v: "altGlyphItem" }, { k: "animatecolor", v: "animateColor" }, { k: "animatemotion", v: "animateMotion" }, { k: "animatetransform", v: "animateTransform" }, { k: "clippath", v: "clipPath" }, { k: "feblend", v: "feBlend" }, { k: "fecolormatrix", v: "feColorMatrix" }, { k: "fecomponenttransfer", v: "feComponentTransfer" }, { k: "fecomposite", v: "feComposite" }, { k: "feconvolvematrix", v: "feConvolveMatrix" }, { k: "fediffuselighting", v: "feDiffuseLighting" }, { k: "fedisplacementmap", v: "feDisplacementMap" }, { k: "fedistantlight", v: "feDistantLight" }, { k: "feflood", v: "feFlood" }, { k: "fefunca", v: "feFuncA" }, { k: "fefuncb", v: "feFuncB" }, { k: "fefuncg", v: "feFuncG" }, { k: "fefuncr", v: "feFuncR" }, { k: "fegaussianblur", v: "feGaussianBlur" }, { k: "feimage", v: "feImage" }, { k: "femerge", v: "feMerge" }, { k: "femergenode", v: "feMergeNode" }, { k: "femorphology", v: "feMorphology" }, { k: "feoffset", v: "feOffset" }, { k: "fepointlight", v: "fePointLight" }, { k: "fespecularlighting", v: "feSpecularLighting" }, { k: "fespotlight", v: "feSpotLight" }, { k: "fetile", v: "feTile" }, { k: "feturbulence", v: "feTurbulence" }, { k: "foreignobject", v: "foreignObject" }, { k: "glyphref", v: "glyphRef" }, { k: "lineargradient", v: "linearGradient" }, { k: "radialgradient", v: "radialGradient" }, { k: "textpath", v: "textPath" }]);
		mathMLAttributeAdjustments = $makeMap($String.keyFor, [{ k: "definitionurl", v: "definitionURL" }]);
		svgAttributeAdjustments = $makeMap($String.keyFor, [{ k: "attributename", v: "attributeName" }, { k: "attributetype", v: "attributeType" }, { k: "basefrequency", v: "baseFrequency" }, { k: "baseprofile", v: "baseProfile" }, { k: "calcmode", v: "calcMode" }, { k: "clippathunits", v: "clipPathUnits" }, { k: "contentscripttype", v: "contentScriptType" }, { k: "contentstyletype", v: "contentStyleType" }, { k: "diffuseconstant", v: "diffuseConstant" }, { k: "edgemode", v: "edgeMode" }, { k: "externalresourcesrequired", v: "externalResourcesRequired" }, { k: "filterres", v: "filterRes" }, { k: "filterunits", v: "filterUnits" }, { k: "glyphref", v: "glyphRef" }, { k: "gradienttransform", v: "gradientTransform" }, { k: "gradientunits", v: "gradientUnits" }, { k: "kernelmatrix", v: "kernelMatrix" }, { k: "kernelunitlength", v: "kernelUnitLength" }, { k: "keypoints", v: "keyPoints" }, { k: "keysplines", v: "keySplines" }, { k: "keytimes", v: "keyTimes" }, { k: "lengthadjust", v: "lengthAdjust" }, { k: "limitingconeangle", v: "limitingConeAngle" }, { k: "markerheight", v: "markerHeight" }, { k: "markerunits", v: "markerUnits" }, { k: "markerwidth", v: "markerWidth" }, { k: "maskcontentunits", v: "maskContentUnits" }, { k: "maskunits", v: "maskUnits" }, { k: "numoctaves", v: "numOctaves" }, { k: "pathlength", v: "pathLength" }, { k: "patterncontentunits", v: "patternContentUnits" }, { k: "patterntransform", v: "patternTransform" }, { k: "patternunits", v: "patternUnits" }, { k: "pointsatx", v: "pointsAtX" }, { k: "pointsaty", v: "pointsAtY" }, { k: "pointsatz", v: "pointsAtZ" }, { k: "preservealpha", v: "preserveAlpha" }, { k: "preserveaspectratio", v: "preserveAspectRatio" }, { k: "primitiveunits", v: "primitiveUnits" }, { k: "refx", v: "refX" }, { k: "refy", v: "refY" }, { k: "repeatcount", v: "repeatCount" }, { k: "repeatdur", v: "repeatDur" }, { k: "requiredextensions", v: "requiredExtensions" }, { k: "requiredfeatures", v: "requiredFeatures" }, { k: "specularconstant", v: "specularConstant" }, { k: "specularexponent", v: "specularExponent" }, { k: "spreadmethod", v: "spreadMethod" }, { k: "startoffset", v: "startOffset" }, { k: "stddeviation", v: "stdDeviation" }, { k: "stitchtiles", v: "stitchTiles" }, { k: "surfacescale", v: "surfaceScale" }, { k: "systemlanguage", v: "systemLanguage" }, { k: "tablevalues", v: "tableValues" }, { k: "targetx", v: "targetX" }, { k: "targety", v: "targetY" }, { k: "textlength", v: "textLength" }, { k: "viewbox", v: "viewBox" }, { k: "viewtarget", v: "viewTarget" }, { k: "xchannelselector", v: "xChannelSelector" }, { k: "ychannelselector", v: "yChannelSelector" }, { k: "zoomandpan", v: "zoomAndPan" }]);
		scopeMarker = new Node.ptr(ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, ptrType.nil, 6, 0, "", "", sliceType$1.nil);
		defaultScopeStopTags = $makeMap($String.keyFor, [{ k: "", v: new sliceType$2([176902, 113415, 152836, 273669, 18178, 142850, 183047, 125958, 402952]) }, { k: "math", v: new sliceType$2([91918, 191234, 144642, 257282, 179202, 193797]) }, { k: "svg", v: new sliceType$2([318212, 120845, 41221]) }]);
		plaintextAbort = errors.New("html: internal error (plaintext abort)");
		voidElements = $makeMap($String.keyFor, [{ k: "area", v: true }, { k: "base", v: true }, { k: "br", v: true }, { k: "col", v: true }, { k: "command", v: true }, { k: "embed", v: true }, { k: "hr", v: true }, { k: "img", v: true }, { k: "input", v: true }, { k: "keygen", v: true }, { k: "link", v: true }, { k: "meta", v: true }, { k: "param", v: true }, { k: "source", v: true }, { k: "track", v: true }, { k: "wbr", v: true }]);
		$pkg.ErrBufferExceeded = errors.New("max buffer exceeded");
		nul = new sliceType$3($stringToBytes("\x00"));
		replacement = new sliceType$3($stringToBytes("\xEF\xBF\xBD"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, Search, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort;
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = $imul(maxDepth, (2));
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/BenLubar/hellstew/emoji"] = (function() {
	var $pkg = {}, $init, html, atom, sort, strings, Config, emoji, SearchResult, searchResults, state, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$1, arrayType, ptrType$2, ptrType$3, ptrType$4, sliceType$3, arrayType$1, sliceType$4, sliceType$5, sliceType$6, ptrType$5, mapType, allEmoji, categories, byCategory, tags, byTag, byName, skipElement, startState, _r, addBy, shallowClone, deepClone, emojiToNode, addResult, match, makeState;
	html = $packages["golang.org/x/net/html"];
	atom = $packages["golang.org/x/net/html/atom"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	Config = $pkg.Config = $newType(0, $kindStruct, "emoji.Config", true, "github.com/BenLubar/hellstew/emoji", true, function(state_, emoji_, byName_, tags_, byTag_, categories_, byCategory_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = ptrType$1.nil;
			this.emoji = sliceType$1.nil;
			this.byName = false;
			this.tags = sliceType.nil;
			this.byTag = sliceType$2.nil;
			this.categories = sliceType.nil;
			this.byCategory = sliceType$2.nil;
			return;
		}
		this.state = state_;
		this.emoji = emoji_;
		this.byName = byName_;
		this.tags = tags_;
		this.byTag = byTag_;
		this.categories = categories_;
		this.byCategory = byCategory_;
	});
	emoji = $pkg.emoji = $newType(0, $kindStruct, "emoji.emoji", true, "github.com/BenLubar/hellstew/emoji", false, function(emoji_, imageURL_, description_, aliases_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.emoji = "";
			this.imageURL = "";
			this.description = "";
			this.aliases = sliceType.nil;
			return;
		}
		this.emoji = emoji_;
		this.imageURL = imageURL_;
		this.description = description_;
		this.aliases = aliases_;
	});
	SearchResult = $pkg.SearchResult = $newType(0, $kindStruct, "emoji.SearchResult", true, "github.com/BenLubar/hellstew/emoji", true, function(emoji_, score_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.emoji = ptrType.nil;
			this.score = 0;
			return;
		}
		this.emoji = emoji_;
		this.score = score_;
	});
	searchResults = $pkg.searchResults = $newType(12, $kindSlice, "emoji.searchResults", true, "github.com/BenLubar/hellstew/emoji", false, null);
	state = $pkg.state = $newType(0, $kindStruct, "emoji.state", true, "github.com/BenLubar/hellstew/emoji", false, function(next_, term_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.next = arrayType.zero();
			this.term = false;
			return;
		}
		this.next = next_;
		this.term = term_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(emoji);
	sliceType$1 = $sliceType(ptrType);
	sliceType$2 = $sliceType(sliceType$1);
	ptrType$1 = $ptrType(state);
	arrayType = $arrayType(ptrType$1, 256);
	ptrType$2 = $ptrType(sliceType$2);
	ptrType$3 = $ptrType(sliceType);
	ptrType$4 = $ptrType(html.Node);
	sliceType$3 = $sliceType(ptrType$4);
	arrayType$1 = $arrayType($Int, 2);
	sliceType$4 = $sliceType(arrayType$1);
	sliceType$5 = $sliceType(html.Attribute);
	sliceType$6 = $sliceType(SearchResult);
	ptrType$5 = $ptrType(Config);
	mapType = $mapType($String, ptrType);
	Config.ptr.prototype.overrides = function(e) {
		var $ptr, _entry, _tuple, conf, e, ok;
		conf = this;
		_tuple = (_entry = conf.byName[$String.keyFor(e.emoji)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
		ok = _tuple[1];
		return ok;
	};
	Config.prototype.overrides = function(e) { return this.$val.overrides(e); };
	Config.ptr.prototype.AddEmoji = function(unicodeEmoji, description, aliases, category, tags$1) {
		var $ptr, _entry, _tuple, aliases, category, conf, description, e, ok, tags$1, unicodeEmoji, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tuple = $f._tuple; aliases = $f.aliases; category = $f.category; conf = $f.conf; description = $f.description; e = $f.e; ok = $f.ok; tags$1 = $f.tags$1; unicodeEmoji = $f.unicodeEmoji; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		if (unicodeEmoji === "") {
			$panic(new $String("emoji: emoji cannot be empty string"));
		}
		_tuple = (_entry = conf.byName[$String.keyFor(unicodeEmoji)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
		ok = _tuple[1];
		if (ok) {
			$panic(new $String("emoji: already defined in this Config: " + unicodeEmoji));
		}
		conf.validateAliases(aliases);
		e = new emoji.ptr(unicodeEmoji, "", description, aliases);
		$r = conf.addEmoji(e, aliases, category, tags$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = conf.addName(unicodeEmoji, e); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.AddEmoji }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tuple = _tuple; $f.aliases = aliases; $f.category = category; $f.conf = conf; $f.description = description; $f.e = e; $f.ok = ok; $f.tags$1 = tags$1; $f.unicodeEmoji = unicodeEmoji; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.AddEmoji = function(unicodeEmoji, description, aliases, category, tags$1) { return this.$val.AddEmoji(unicodeEmoji, description, aliases, category, tags$1); };
	Config.ptr.prototype.AddImage = function(imageURL, description, aliases, category, tags$1) {
		var $ptr, aliases, category, conf, description, e, imageURL, tags$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; aliases = $f.aliases; category = $f.category; conf = $f.conf; description = $f.description; e = $f.e; imageURL = $f.imageURL; tags$1 = $f.tags$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		if (aliases.$length === 0) {
			$panic(new $String("emoji: image needs at least one alias"));
		}
		conf.validateAliases(aliases);
		e = new emoji.ptr("", imageURL, description, aliases);
		$r = conf.addEmoji(e, aliases, category, tags$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.AddImage }; } $f.$ptr = $ptr; $f.aliases = aliases; $f.category = category; $f.conf = conf; $f.description = description; $f.e = e; $f.imageURL = imageURL; $f.tags$1 = tags$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.AddImage = function(imageURL, description, aliases, category, tags$1) { return this.$val.AddImage(imageURL, description, aliases, category, tags$1); };
	Config.ptr.prototype.validateAliases = function(aliases) {
		var $ptr, _entry, _i, _ref, _tuple, a, aliases, conf, ok;
		conf = this;
		_ref = aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			a = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (a === "") {
				$panic(new $String("emoji: alias cannot be empty string"));
			}
			if (strings.ContainsRune(a, 58)) {
				$panic(new $String("emoji: alias cannot contain ':'"));
			}
			_tuple = (_entry = conf.byName[$String.keyFor(":" + a + ":")], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
			ok = _tuple[1];
			if (ok) {
				$panic(new $String("emoji: already defined in this Config: :" + a + ":"));
			}
			_i++;
		}
	};
	Config.prototype.validateAliases = function(aliases) { return this.$val.validateAliases(aliases); };
	Config.ptr.prototype.addEmoji = function(e, aliases, category, tags$1) {
		var $ptr, _i, _i$1, _ref, _ref$1, a, aliases, category, conf, e, tag, tags$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; aliases = $f.aliases; category = $f.category; conf = $f.conf; e = $f.e; tag = $f.tag; tags$1 = $f.tags$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		conf.emoji = $append(conf.emoji, e);
		if (conf.byName === false) {
			conf.byName = {};
		}
		_ref = aliases;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = conf.addName(":" + a + ":", e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		addBy((conf.$ptr_byCategory || (conf.$ptr_byCategory = new ptrType$2(function() { return this.$target.byCategory; }, function($v) { this.$target.byCategory = $v; }, conf))), (conf.$ptr_categories || (conf.$ptr_categories = new ptrType$3(function() { return this.$target.categories; }, function($v) { this.$target.categories = $v; }, conf))), e, category);
		_ref$1 = tags$1;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			tag = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			addBy((conf.$ptr_byTag || (conf.$ptr_byTag = new ptrType$2(function() { return this.$target.byTag; }, function($v) { this.$target.byTag = $v; }, conf))), (conf.$ptr_tags || (conf.$ptr_tags = new ptrType$3(function() { return this.$target.tags; }, function($v) { this.$target.tags = $v; }, conf))), e, tag);
			_i$1++;
		}
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.addEmoji }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.aliases = aliases; $f.category = category; $f.conf = conf; $f.e = e; $f.tag = tag; $f.tags$1 = tags$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.addEmoji = function(e, aliases, category, tags$1) { return this.$val.addEmoji(e, aliases, category, tags$1); };
	Config.ptr.prototype.addName = function(name, e) {
		var $ptr, _key, _r$1, _r$2, _r$3, _r$4, conf, e, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; conf = $f.conf; e = $f.e; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		_key = name; (conf.byName || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: e };
		/* */ if (conf.state === ptrType$1.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (conf.state === ptrType$1.nil) { */ case 1:
			_r$1 = strings.ToLower(name); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = startState.add(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			conf.state = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = strings.ToLower(name); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = conf.state.add(_r$3); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			conf.state = _r$4;
		/* } */ case 3:
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.addName }; } $f.$ptr = $ptr; $f._key = _key; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.conf = conf; $f.e = e; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.addName = function(name, e) { return this.$val.addName(name, e); };
	addBy = function(by, names, e, name) {
		var $ptr, _i, _ref, by, e, i, n, name, names, x, x$1;
		_ref = names.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (n === name) {
				(x$1 = by.$get(), ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i] = $append((x = by.$get(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])), e)));
				return;
			}
			_i++;
		}
		names.$set($append(names.$get(), name));
		by.$set($append(by.$get(), new sliceType$1([e])));
	};
	Config.ptr.prototype.Replace = function(nodes) {
		var $ptr, conf, nodes;
		conf = this;
		return conf.replace(true, nodes);
	};
	Config.prototype.Replace = function(nodes) { return this.$val.Replace(nodes); };
	Config.ptr.prototype.replace = function(tooltip, nodes) {
		var $ptr, _1, _entry, _i, _ref, conf, node, nodes, result, tooltip;
		conf = this;
		result = $makeSlice(sliceType$3, 0, nodes.$length);
		_ref = nodes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			node = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			switch (0) { default:
				_1 = node.Type;
				if (_1 === (3)) {
					if (!(node.Namespace === "") || (_entry = skipElement[atom.Atom.keyFor(node.DataAtom)], _entry !== undefined ? _entry.v : false)) {
						result = $append(result, deepClone(node));
						break;
					}
					result = $appendSlice(result, conf.replaceElement(tooltip, node));
				} else if (_1 === (1)) {
					result = $appendSlice(result, conf.replaceText(tooltip, node));
				} else {
					result = $append(result, deepClone(node));
				}
			}
			_i++;
		}
		return result;
	};
	Config.prototype.replace = function(tooltip, nodes) { return this.$val.replace(tooltip, nodes); };
	Config.ptr.prototype.replaceElement = function(tooltip, node) {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, a, a$1, child, conf, node, o, result, tooltip;
		conf = this;
		if (tooltip) {
			_ref = node.Attr;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				a = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), html.Attribute);
				if (a.Namespace === "" && a.Key === "title") {
					tooltip = false;
					break;
				}
				_i++;
			}
		}
		_ref$1 = node.Attr;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			a$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), html.Attribute);
			if (a$1.Namespace === "" && a$1.Key === "class" && a$1.Val === "emoji") {
				return new sliceType$3([deepClone(node)]);
			}
			_i$1++;
		}
		result = shallowClone(node);
		child = node.FirstChild;
		while (true) {
			if (!(!(child === ptrType$4.nil))) { break; }
			_ref$2 = conf.replace(tooltip, new sliceType$3([child]));
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				o = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				result.AppendChild(o);
				_i$2++;
			}
			child = child.NextSibling;
		}
		return new sliceType$3([result]);
	};
	Config.prototype.replaceElement = function(tooltip, node) { return this.$val.replaceElement(tooltip, node); };
	Config.ptr.prototype.replaceText = function(tooltip, node) {
		var $ptr, _entry, _entry$1, _i, _ref, _tuple, conf, e, i, match$1, matches, name, next, node, ok, result, tooltip, x;
		conf = this;
		matches = sliceType$4.nil;
		if (conf.state === ptrType$1.nil) {
			matches = startState.match(node.Data);
		} else {
			matches = conf.state.match(node.Data);
		}
		if (matches.$length === 0) {
			return new sliceType$3([shallowClone(node)]);
		}
		result = $makeSlice(sliceType$3, 0, (($imul(matches.$length, 2)) + 1 >> 0));
		_ref = matches;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			match$1 = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (i === 0) {
				if (!((match$1[0] === 0))) {
					result = $append(result, new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 1, 0, $substring(node.Data, 0, match$1[0]), "", sliceType$5.nil));
				}
			}
			name = $substring(node.Data, match$1[0], match$1[1]);
			_tuple = (_entry = conf.byName[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
			e = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				e = (_entry$1 = byName[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType.nil);
			}
			result = $append(result, emojiToNode(tooltip, e, name));
			if ((i + 1 >> 0) === matches.$length) {
				if (!((match$1[1] === node.Data.length))) {
					result = $append(result, new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 1, 0, $substring(node.Data, match$1[1]), "", sliceType$5.nil));
				}
			} else {
				next = $clone((x = i + 1 >> 0, ((x < 0 || x >= matches.$length) ? $throwRuntimeError("index out of range") : matches.$array[matches.$offset + x])), arrayType$1);
				if (!((match$1[1] === next[0]))) {
					result = $append(result, new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 1, 0, $substring(node.Data, match$1[1], next[0]), "", sliceType$5.nil));
				}
			}
			_i++;
		}
		return result;
	};
	Config.prototype.replaceText = function(tooltip, node) { return this.$val.replaceText(tooltip, node); };
	shallowClone = function(node) {
		var $ptr, node, result;
		result = new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, node.Type, node.DataAtom, node.Data, node.Namespace, $makeSlice(sliceType$5, node.Attr.$length));
		$copySlice(result.Attr, node.Attr);
		return result;
	};
	deepClone = function(node) {
		var $ptr, child, node, result;
		result = shallowClone(node);
		child = node.FirstChild;
		while (true) {
			if (!(!(child === ptrType$4.nil))) { break; }
			result.AppendChild(deepClone(child));
			child = child.NextSibling;
		}
		return result;
	};
	emojiToNode = function(tooltip, e, name) {
		var $ptr, e, img, name, node, tooltip;
		if (!(e.emoji === "")) {
			node = new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 3, 38148, "span", "", new sliceType$5([new html.Attribute.ptr("", "class", "emoji")]));
			if (tooltip) {
				node.Data = "abbr";
				node.DataAtom = 4;
				node.Attr = $append(node.Attr, new html.Attribute.ptr("", "title", e.description));
			}
			node.AppendChild(new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 1, 0, e.emoji, "", sliceType$5.nil));
			return node;
		}
		img = new html.Node.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, ptrType$4.nil, 3, 172291, "img", "", new sliceType$5([new html.Attribute.ptr("", "src", e.imageURL), new html.Attribute.ptr("", "alt", name), new html.Attribute.ptr("", "class", "emoji")]));
		if (tooltip) {
			img.Attr = $append(img.Attr, new html.Attribute.ptr("", "title", e.description));
		}
		return img;
	};
	SearchResult.ptr.prototype.Emoji = function() {
		var $ptr, s;
		s = $clone(this, SearchResult);
		return s.emoji.emoji;
	};
	SearchResult.prototype.Emoji = function() { return this.$val.Emoji(); };
	SearchResult.ptr.prototype.ImageURL = function() {
		var $ptr, s;
		s = $clone(this, SearchResult);
		return s.emoji.imageURL;
	};
	SearchResult.prototype.ImageURL = function() { return this.$val.ImageURL(); };
	SearchResult.ptr.prototype.Aliases = function() {
		var $ptr, s;
		s = $clone(this, SearchResult);
		return s.emoji.aliases;
	};
	SearchResult.prototype.Aliases = function() { return this.$val.Aliases(); };
	SearchResult.ptr.prototype.Description = function() {
		var $ptr, s;
		s = $clone(this, SearchResult);
		return s.emoji.description;
	};
	SearchResult.prototype.Description = function() { return this.$val.Description(); };
	SearchResult.ptr.prototype.Score = function() {
		var $ptr, s;
		s = $clone(this, SearchResult);
		return s.score;
	};
	SearchResult.prototype.Score = function() { return this.$val.Score(); };
	searchResults.prototype.Len = function() {
		var $ptr, s;
		s = this;
		return s.$length;
	};
	$ptrType(searchResults).prototype.Len = function() { return this.$get().Len(); };
	searchResults.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]), SearchResult);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]), SearchResult);
		SearchResult.copy(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]), _tmp);
		SearchResult.copy(((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(searchResults).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	searchResults.prototype.Less = function(i, j) {
		var $ptr, _r$1, _r$2, i, j, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; j = $f.j; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).score === ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]).score) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).score === ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]).score) { */ case 1:
			_r$1 = strings.ToLower(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).emoji.description); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = strings.ToLower(((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]).emoji.description); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$1 < _r$2;
			return _r$1 < _r$2;
		/* } */ case 2:
		$s = -1; return ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).score > ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]).score;
		return ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).score > ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]).score;
		/* */ } return; } if ($f === undefined) { $f = { $blk: searchResults.prototype.Less }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.j = j; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(searchResults).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	Config.ptr.prototype.Search = function(query, max) {
		var $ptr, _r$1, _r$2, _r$3, _r$4, _r$5, conf, max, query, results, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; conf = $f.conf; max = $f.max; query = $f.query; results = $f.results; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		if (query === "" || max <= 0) {
			$s = -1; return sliceType$6.nil;
			return sliceType$6.nil;
		}
		_r$1 = strings.ToLower(query); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		query = _r$1;
		results = $makeSlice(searchResults, 0, max);
		_r$2 = conf.searchName(results, query, 3000); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		results = _r$2;
		_r$3 = conf.searchDescription(results, query, 2000); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		results = _r$3;
		_r$4 = conf.searchSet(results, query, 1000, conf.byTag, conf.tags, byTag, tags); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		results = _r$4;
		_r$5 = conf.searchSet(results, query, 0, conf.byCategory, conf.categories, byCategory, categories); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		results = _r$5;
		/* */ if (results.$length < results.$capacity) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (results.$length < results.$capacity) { */ case 6:
			$r = sort.Sort(results); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return $subslice(new sliceType$6(results.$array), results.$offset, results.$offset + results.$length);
		return $subslice(new sliceType$6(results.$array), results.$offset, results.$offset + results.$length);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.Search }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.conf = conf; $f.max = max; $f.query = query; $f.results = results; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.Search = function(query, max) { return this.$val.Search(query, max); };
	Config.ptr.prototype.searchName = function(results, query, bonus) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _entry, _entry$1, _i, _i$1, _keys, _keys$1, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _tuple, _tuple$1, bonus, conf, e, e$1, name, name$1, ok, ok$1, query, result, result$1, results, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _keys$1 = $f._keys$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bonus = $f.bonus; conf = $f.conf; e = $f.e; e$1 = $f.e$1; name = $f.name; name$1 = $f.name$1; ok = $f.ok; ok$1 = $f.ok$1; query = $f.query; result = $f.result; result$1 = $f.result$1; results = $f.results; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		_ref = conf.byName;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			e = _entry.v;
			_arg = query;
			_r$1 = strings.Trim(name, ":"); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = _r$1;
			_arg$2 = e;
			_arg$3 = bonus;
			_r$2 = match(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			result = $clone(_tuple[0], SearchResult);
			ok = _tuple[1];
			/* */ if (ok) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 5:
				_r$3 = addResult(results, result); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				results = _r$3;
			/* } */ case 6:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = byName;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 8:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 9; continue; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				/* continue; */ $s = 8; continue;
			}
			name$1 = _entry$1.k;
			e$1 = _entry$1.v;
			/* */ if (conf.overrides(e$1)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (conf.overrides(e$1)) { */ case 10:
				_i$1++;
				/* continue; */ $s = 8; continue;
			/* } */ case 11:
			_arg$4 = query;
			_r$4 = strings.Trim(name$1, ":"); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$5 = _r$4;
			_arg$6 = e$1;
			_arg$7 = bonus;
			_r$5 = match(_arg$4, _arg$5, _arg$6, _arg$7); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			result$1 = $clone(_tuple$1[0], SearchResult);
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (ok$1) { */ case 14:
				_r$6 = addResult(results, result$1); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				results = _r$6;
			/* } */ case 15:
			_i$1++;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return results;
		return results;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.searchName }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bonus = bonus; $f.conf = conf; $f.e = e; $f.e$1 = e$1; $f.name = name; $f.name$1 = name$1; $f.ok = ok; $f.ok$1 = ok$1; $f.query = query; $f.result = result; $f.result$1 = result$1; $f.results = results; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.searchName = function(results, query, bonus) { return this.$val.searchName(results, query, bonus); };
	Config.ptr.prototype.searchDescription = function(results, query, bonus) {
		var $ptr, _i, _i$1, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _tuple, _tuple$1, bonus, conf, e, e$1, i, ok, ok$1, query, result, result$1, results, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bonus = $f.bonus; conf = $f.conf; e = $f.e; e$1 = $f.e$1; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; query = $f.query; result = $f.result; result$1 = $f.result$1; results = $f.results; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		_ref = conf.emoji;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = match(query, e.description, e, bonus); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			result = $clone(_tuple[0], SearchResult);
			ok = _tuple[1];
			/* */ if (ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ok) { */ case 4:
				_r$2 = addResult(results, result); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				results = _r$2;
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = allEmoji;
		_i$1 = 0;
		/* while (true) { */ case 7:
			/* if (!(_i$1 < 1321)) { break; } */ if(!(_i$1 < 1321)) { $s = 8; continue; }
			i = _i$1;
			e$1 = ((i < 0 || i >= allEmoji.length) ? $throwRuntimeError("index out of range") : allEmoji[i]);
			/* */ if (conf.overrides(e$1)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (conf.overrides(e$1)) { */ case 9:
				_i$1++;
				/* continue; */ $s = 7; continue;
			/* } */ case 10:
			_r$3 = match(query, e$1.description, e$1, bonus); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			result$1 = $clone(_tuple$1[0], SearchResult);
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (ok$1) { */ case 12:
				_r$4 = addResult(results, result$1); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				results = _r$4;
			/* } */ case 13:
			_i$1++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return results;
		return results;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.searchDescription }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bonus = bonus; $f.conf = conf; $f.e = e; $f.e$1 = e$1; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.query = query; $f.result = result; $f.result$1 = result$1; $f.results = results; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.searchDescription = function(results, query, bonus) { return this.$val.searchDescription(results, query, bonus); };
	Config.ptr.prototype.searchSet = function(results, query, bonus, byLocal, namesLocal, by, names) {
		var $ptr, _i, _i$1, _i$2, _i$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, bonus, by, byLocal, conf, e, e$1, es, es$1, i, i$1, names, namesLocal, ok, ok$1, query, result, result$1, results, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bonus = $f.bonus; by = $f.by; byLocal = $f.byLocal; conf = $f.conf; e = $f.e; e$1 = $f.e$1; es = $f.es; es$1 = $f.es$1; i = $f.i; i$1 = $f.i$1; names = $f.names; namesLocal = $f.namesLocal; ok = $f.ok; ok$1 = $f.ok$1; query = $f.query; result = $f.result; result$1 = $f.result$1; results = $f.results; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = this;
		_ref = byLocal;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			es = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = match(query, ((i < 0 || i >= namesLocal.$length) ? $throwRuntimeError("index out of range") : namesLocal.$array[namesLocal.$offset + i]), (0 >= es.$length ? $throwRuntimeError("index out of range") : es.$array[es.$offset + 0]), bonus); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			result = $clone(_tuple[0], SearchResult);
			ok = _tuple[1];
			/* */ if (ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ok) { */ case 4:
				_r$2 = addResult(results, result); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				results = _r$2;
				_ref$1 = $subslice(es, 1);
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					e = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					_r$3 = addResult(results, new SearchResult.ptr(e, result.score)); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					results = _r$3;
					_i$1++;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$2 = by;
		_i$2 = 0;
		/* while (true) { */ case 10:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 11; continue; }
			i$1 = _i$2;
			es$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			_r$4 = match(query, ((i$1 < 0 || i$1 >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + i$1]), (0 >= es$1.$length ? $throwRuntimeError("index out of range") : es$1.$array[es$1.$offset + 0]), bonus); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			result$1 = $clone(_tuple$1[0], SearchResult);
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (ok$1) { */ case 13:
				/* */ if (!conf.overrides((0 >= es$1.$length ? $throwRuntimeError("index out of range") : es$1.$array[es$1.$offset + 0]))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!conf.overrides((0 >= es$1.$length ? $throwRuntimeError("index out of range") : es$1.$array[es$1.$offset + 0]))) { */ case 15:
					_r$5 = addResult(results, result$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					results = _r$5;
				/* } */ case 16:
				_ref$3 = $subslice(es$1, 1);
				_i$3 = 0;
				/* while (true) { */ case 18:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 19; continue; }
					e$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
					/* */ if (!conf.overrides(e$1)) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!conf.overrides(e$1)) { */ case 20:
						_r$6 = addResult(results, new SearchResult.ptr(e$1, result$1.score)); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						results = _r$6;
					/* } */ case 21:
					_i$3++;
				/* } */ $s = 18; continue; case 19:
			/* } */ case 14:
			_i$2++;
		/* } */ $s = 10; continue; case 11:
		$s = -1; return results;
		return results;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.searchSet }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bonus = bonus; $f.by = by; $f.byLocal = byLocal; $f.conf = conf; $f.e = e; $f.e$1 = e$1; $f.es = es; $f.es$1 = es$1; $f.i = i; $f.i$1 = i$1; $f.names = names; $f.namesLocal = namesLocal; $f.ok = ok; $f.ok$1 = ok$1; $f.query = query; $f.result = result; $f.result$1 = result$1; $f.results = results; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.searchSet = function(results, query, bonus, byLocal, namesLocal, by, names) { return this.$val.searchSet(results, query, bonus, byLocal, namesLocal, by, names); };
	addResult = function(results, result) {
		var $ptr, _i, _r$1, _ref, i, r, result, results, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$1 = $f._r$1; _ref = $f._ref; i = $f.i; r = $f.r; result = $f.result; results = $f.results; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		results = [results];
		result[0] = $clone(result[0], SearchResult);
		_ref = results[0];
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			r = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), SearchResult);
			if (r.emoji === result[0].emoji) {
				$s = -1; return results[0];
				return results[0];
			}
			_i++;
		}
		/* */ if (results[0].$length < results[0].$capacity) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (results[0].$length < results[0].$capacity) { */ case 1:
			results[0] = $append(results[0], result[0]);
			/* */ if (results[0].$length === results[0].$capacity) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (results[0].$length === results[0].$capacity) { */ case 4:
				$r = sort.Sort(results[0]); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = sort.Search(results[0].$length, (function(result, results) { return function $b(i) {
				var $ptr, _r$1, _r$2, i, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				/* */ if (((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]).score === result[0].score) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]).score === result[0].score) { */ case 1:
					_r$1 = strings.ToLower(((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]).emoji.description); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = strings.ToLower(result[0].emoji.description); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$s = -1; return _r$1 >= _r$2;
					return _r$1 >= _r$2;
				/* } */ case 2:
				$s = -1; return ((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]).score < result[0].score;
				return ((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]).score < result[0].score;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
			}; })(result, results)); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			i = _r$1;
			if (i < results[0].$length) {
				$copySlice($subslice(results[0], (i + 1 >> 0)), $subslice(results[0], i));
				SearchResult.copy(((i < 0 || i >= results[0].$length) ? $throwRuntimeError("index out of range") : results[0].$array[results[0].$offset + i]), result[0]);
			}
		/* } */ case 3:
		$s = -1; return results[0];
		return results[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: addResult }; } $f.$ptr = $ptr; $f._i = _i; $f._r$1 = _r$1; $f._ref = _ref; $f.i = i; $f.r = r; $f.result = result; $f.results = results; $f.$s = $s; $f.$r = $r; return $f;
	};
	match = function(query, actual, e, bonus) {
		var $ptr, _r$1, actual, bonus, e, query, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; actual = $f.actual; bonus = $f.bonus; e = $f.e; query = $f.query; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = strings.ToLower(actual); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		actual = _r$1;
		if (query === actual) {
			$s = -1; return [new SearchResult.ptr(e, 500 + bonus >> 0), true];
			return [new SearchResult.ptr(e, 500 + bonus >> 0), true];
		}
		if (strings.HasPrefix(actual, query)) {
			$s = -1; return [new SearchResult.ptr(e, (($imul(query.length, 3)) - actual.length >> 0) + bonus >> 0), true];
			return [new SearchResult.ptr(e, (($imul(query.length, 3)) - actual.length >> 0) + bonus >> 0), true];
		}
		if (strings.Contains(actual, query)) {
			$s = -1; return [new SearchResult.ptr(e, (($imul(query.length, 2)) - actual.length >> 0) + bonus >> 0), true];
			return [new SearchResult.ptr(e, (($imul(query.length, 2)) - actual.length >> 0) + bonus >> 0), true];
		}
		$s = -1; return [new SearchResult.ptr(ptrType.nil, 0), false];
		return [new SearchResult.ptr(ptrType.nil, 0), false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: match }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.actual = actual; $f.bonus = bonus; $f.e = e; $f.query = query; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.ptr.prototype.addInPlace = function(name) {
		var $ptr, name, s, x, x$1, x$2, x$3, x$4, x$5;
		s = this;
		while (true) {
			if (name === "") {
				s.term = true;
				return;
			}
			if ((x = s.next, x$1 = name.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === ptrType$1.nil) {
				(x$2 = s.next, x$3 = name.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3] = makeState($substring(name, 1))));
				return;
			}
			s = (x$4 = s.next, x$5 = name.charCodeAt(0), ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[x$5]));
			name = $substring(name, 1);
		}
	};
	state.prototype.addInPlace = function(name) { return this.$val.addInPlace(name); };
	state.ptr.prototype.add = function(name) {
		var $ptr, clone, name, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		s = this;
		if (name === "") {
			return new state.ptr($clone(s.next, arrayType), true);
		}
		clone = $clone(s, state);
		if (!((x = clone.next, x$1 = name.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === ptrType$1.nil)) {
			(x$4 = clone.next, x$5 = name.charCodeAt(0), ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[x$5] = (x$2 = clone.next, x$3 = name.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])).add($substring(name, 1))));
		} else {
			(x$6 = clone.next, x$7 = name.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7] = makeState($substring(name, 1))));
		}
		return clone;
	};
	state.prototype.add = function(name) { return this.$val.add(name); };
	makeState = function(name) {
		var $ptr, i, name, next, s, x, x$1;
		s = new state.ptr(arrayType.zero(), true);
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			next = new state.ptr(arrayType.zero(), false);
			(x = next.next, x$1 = name.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s));
			s = next;
			i = i - (1) >> 0;
		}
		return s;
	};
	state.ptr.prototype.match = function(str) {
		var $ptr, _tmp, _tmp$1, c, i, j, matches, s, str, term, x, x$1, x$2, x$3;
		s = this;
		matches = sliceType$4.nil;
		i = 0;
		while (true) {
			if (!(i < str.length)) { break; }
			term = -1;
			_tmp = i;
			_tmp$1 = s;
			j = _tmp;
			c = _tmp$1;
			while (true) {
				if (c.term) {
					term = j;
				}
				if ((j === str.length) || (x = c.next, x$1 = str.charCodeAt(j), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === ptrType$1.nil) {
					break;
				}
				c = (x$2 = c.next, x$3 = str.charCodeAt(j), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3]));
				j = j + (1) >> 0;
			}
			if (!((term === -1))) {
				matches = $append(matches, $toNativeArray($kindInt, [i, term]));
				i = term - 1 >> 0;
			}
			i = i + (1) >> 0;
		}
		return matches;
	};
	state.prototype.match = function(str) { return this.$val.match(str); };
	ptrType$5.methods = [{prop: "overrides", name: "overrides", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([ptrType], [$Bool], false)}, {prop: "AddEmoji", name: "AddEmoji", pkg: "", typ: $funcType([$String, $String, sliceType, $String, sliceType], [], false)}, {prop: "AddImage", name: "AddImage", pkg: "", typ: $funcType([$String, $String, sliceType, $String, sliceType], [], false)}, {prop: "validateAliases", name: "validateAliases", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([sliceType], [], false)}, {prop: "addEmoji", name: "addEmoji", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([ptrType, sliceType, $String, sliceType], [], false)}, {prop: "addName", name: "addName", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$String, ptrType], [], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([sliceType$3], [sliceType$3], true)}, {prop: "replace", name: "replace", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$Bool, sliceType$3], [sliceType$3], true)}, {prop: "replaceElement", name: "replaceElement", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$Bool, ptrType$4], [sliceType$3], false)}, {prop: "replaceText", name: "replaceText", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$Bool, ptrType$4], [sliceType$3], false)}, {prop: "Search", name: "Search", pkg: "", typ: $funcType([$String, $Int], [sliceType$6], false)}, {prop: "searchName", name: "searchName", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([searchResults, $String, $Int], [searchResults], false)}, {prop: "searchDescription", name: "searchDescription", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([searchResults, $String, $Int], [searchResults], false)}, {prop: "searchSet", name: "searchSet", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([searchResults, $String, $Int, sliceType$2, sliceType, sliceType$2, sliceType], [searchResults], false)}];
	SearchResult.methods = [{prop: "Emoji", name: "Emoji", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ImageURL", name: "ImageURL", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Aliases", name: "Aliases", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Description", name: "Description", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Score", name: "Score", pkg: "", typ: $funcType([], [$Int], false)}];
	searchResults.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$1.methods = [{prop: "addInPlace", name: "addInPlace", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$String], [], false)}, {prop: "add", name: "add", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$String], [ptrType$1], false)}, {prop: "match", name: "match", pkg: "github.com/BenLubar/hellstew/emoji", typ: $funcType([$String], [sliceType$4], false)}];
	Config.init("github.com/BenLubar/hellstew/emoji", [{prop: "state", name: "state", exported: false, typ: ptrType$1, tag: ""}, {prop: "emoji", name: "emoji", exported: false, typ: sliceType$1, tag: ""}, {prop: "byName", name: "byName", exported: false, typ: mapType, tag: ""}, {prop: "tags", name: "tags", exported: false, typ: sliceType, tag: ""}, {prop: "byTag", name: "byTag", exported: false, typ: sliceType$2, tag: ""}, {prop: "categories", name: "categories", exported: false, typ: sliceType, tag: ""}, {prop: "byCategory", name: "byCategory", exported: false, typ: sliceType$2, tag: ""}]);
	emoji.init("github.com/BenLubar/hellstew/emoji", [{prop: "emoji", name: "emoji", exported: false, typ: $String, tag: ""}, {prop: "imageURL", name: "imageURL", exported: false, typ: $String, tag: ""}, {prop: "description", name: "description", exported: false, typ: $String, tag: ""}, {prop: "aliases", name: "aliases", exported: false, typ: sliceType, tag: ""}]);
	SearchResult.init("github.com/BenLubar/hellstew/emoji", [{prop: "emoji", name: "emoji", exported: false, typ: ptrType, tag: ""}, {prop: "score", name: "score", exported: false, typ: $Int, tag: ""}]);
	searchResults.init(SearchResult);
	state.init("github.com/BenLubar/hellstew/emoji", [{prop: "next", name: "next", exported: false, typ: arrayType, tag: ""}, {prop: "term", name: "term", exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = html.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atom.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allEmoji = $toNativeArray($kindStruct, [new emoji.ptr("\xF0\x9F\x98\x80", "", "grinning face", new sliceType(["grinning"])), new emoji.ptr("\xF0\x9F\x98\xAC", "", "grimacing face", new sliceType(["grimacing"])), new emoji.ptr("\xF0\x9F\x98\x81", "", "grinning face with smiling eyes", new sliceType(["grin"])), new emoji.ptr("\xF0\x9F\x98\x82", "", "face with tears of joy", new sliceType(["joy"])), new emoji.ptr("\xF0\x9F\x98\x83", "", "smiling face with open mouth", new sliceType(["smiley"])), new emoji.ptr("\xF0\x9F\x98\x84", "", "smiling face with open mouth & smiling eyes", new sliceType(["smile"])), new emoji.ptr("\xF0\x9F\x98\x85", "", "smiling face with open mouth & cold sweat", new sliceType(["sweat_smile"])), new emoji.ptr("\xF0\x9F\x98\x86", "", "smiling face with open mouth & closed eyes", new sliceType(["laughing", "satisfied"])), new emoji.ptr("\xF0\x9F\x98\x87", "", "smiling face with halo", new sliceType(["innocent"])), new emoji.ptr("\xF0\x9F\x98\x89", "", "winking face", new sliceType(["wink"])), new emoji.ptr("\xF0\x9F\x98\x8A", "", "smiling face with smiling eyes", new sliceType(["blush"])), new emoji.ptr("\xF0\x9F\x99\x82", "", "slightly smiling face", new sliceType(["slightly_smiling_face"])), new emoji.ptr("\xF0\x9F\x99\x83", "", "upside-down face", new sliceType(["upside_down_face"])), new emoji.ptr("\xE2\x98\xBA\xEF\xB8\x8F", "", "smiling face", new sliceType(["relaxed"])), new emoji.ptr("\xF0\x9F\x98\x8B", "", "face savouring delicious food", new sliceType(["yum"])), new emoji.ptr("\xF0\x9F\x98\x8C", "", "relieved face", new sliceType(["relieved"])), new emoji.ptr("\xF0\x9F\x98\x8D", "", "smiling face with heart-eyes", new sliceType(["heart_eyes"])), new emoji.ptr("\xF0\x9F\x98\x98", "", "face blowing a kiss", new sliceType(["kissing_heart"])), new emoji.ptr("\xF0\x9F\x98\x97", "", "kissing face", new sliceType(["kissing"])), new emoji.ptr("\xF0\x9F\x98\x99", "", "kissing face with smiling eyes", new sliceType(["kissing_smiling_eyes"])), new emoji.ptr("\xF0\x9F\x98\x9A", "", "kissing face with closed eyes", new sliceType(["kissing_closed_eyes"])), new emoji.ptr("\xF0\x9F\x98\x9C", "", "face with stuck-out tongue & winking eye", new sliceType(["stuck_out_tongue_winking_eye"])), new emoji.ptr("\xF0\x9F\x98\x9D", "", "face with stuck-out tongue & closed eyes", new sliceType(["stuck_out_tongue_closed_eyes"])), new emoji.ptr("\xF0\x9F\x98\x9B", "", "face with stuck-out tongue", new sliceType(["stuck_out_tongue"])), new emoji.ptr("\xF0\x9F\xA4\x91", "", "money-mouth face", new sliceType(["money_mouth_face"])), new emoji.ptr("\xF0\x9F\xA4\x93", "", "nerd face", new sliceType(["nerd_face"])), new emoji.ptr("\xF0\x9F\x98\x8E", "", "smiling face with sunglasses", new sliceType(["sunglasses"])), new emoji.ptr("\xF0\x9F\xA4\x97", "", "hugging face", new sliceType(["hugs"])), new emoji.ptr("\xF0\x9F\x98\x8F", "", "smirking face", new sliceType(["smirk"])), new emoji.ptr("\xF0\x9F\x98\xB6", "", "face without mouth", new sliceType(["no_mouth"])), new emoji.ptr("\xF0\x9F\x98\x90", "", "neutral face", new sliceType(["neutral_face"])), new emoji.ptr("\xF0\x9F\x98\x91", "", "expressionless face", new sliceType(["expressionless"])), new emoji.ptr("\xF0\x9F\x98\x92", "", "unamused face", new sliceType(["unamused"])), new emoji.ptr("\xF0\x9F\x99\x84", "", "face with rolling eyes", new sliceType(["roll_eyes"])), new emoji.ptr("\xF0\x9F\xA4\x94", "", "thinking face", new sliceType(["thinking"])), new emoji.ptr("\xF0\x9F\x98\xB3", "", "flushed face", new sliceType(["flushed"])), new emoji.ptr("\xF0\x9F\x98\x9E", "", "disappointed face", new sliceType(["disappointed"])), new emoji.ptr("\xF0\x9F\x98\x9F", "", "worried face", new sliceType(["worried"])), new emoji.ptr("\xF0\x9F\x98\xA0", "", "angry face", new sliceType(["angry"])), new emoji.ptr("\xF0\x9F\x98\xA1", "", "pouting face", new sliceType(["rage", "pout"])), new emoji.ptr("\xF0\x9F\x98\x94", "", "pensive face", new sliceType(["pensive"])), new emoji.ptr("\xF0\x9F\x98\x95", "", "confused face", new sliceType(["confused"])), new emoji.ptr("\xF0\x9F\x99\x81", "", "slightly frowning face", new sliceType(["slightly_frowning_face"])), new emoji.ptr("\xE2\x98\xB9\xEF\xB8\x8F", "", "frowning face", new sliceType(["frowning_face"])), new emoji.ptr("\xF0\x9F\x98\xA3", "", "persevering face", new sliceType(["persevere"])), new emoji.ptr("\xF0\x9F\x98\x96", "", "confounded face", new sliceType(["confounded"])), new emoji.ptr("\xF0\x9F\x98\xAB", "", "tired face", new sliceType(["tired_face"])), new emoji.ptr("\xF0\x9F\x98\xA9", "", "weary face", new sliceType(["weary"])), new emoji.ptr("\xF0\x9F\x98\xA4", "", "face with steam from nose", new sliceType(["triumph"])), new emoji.ptr("\xF0\x9F\x98\xAE", "", "face with open mouth", new sliceType(["open_mouth"])), new emoji.ptr("\xF0\x9F\x98\xB1", "", "face screaming in fear", new sliceType(["scream"])), new emoji.ptr("\xF0\x9F\x98\xA8", "", "fearful face", new sliceType(["fearful"])), new emoji.ptr("\xF0\x9F\x98\xB0", "", "face with open mouth & cold sweat", new sliceType(["cold_sweat"])), new emoji.ptr("\xF0\x9F\x98\xAF", "", "hushed face", new sliceType(["hushed"])), new emoji.ptr("\xF0\x9F\x98\xA6", "", "frowning face with open mouth", new sliceType(["frowning"])), new emoji.ptr("\xF0\x9F\x98\xA7", "", "anguished face", new sliceType(["anguished"])), new emoji.ptr("\xF0\x9F\x98\xA2", "", "crying face", new sliceType(["cry"])), new emoji.ptr("\xF0\x9F\x98\xA5", "", "disappointed but relieved face", new sliceType(["disappointed_relieved"])), new emoji.ptr("\xF0\x9F\x98\xAA", "", "sleepy face", new sliceType(["sleepy"])), new emoji.ptr("\xF0\x9F\x98\x93", "", "face with cold sweat", new sliceType(["sweat"])), new emoji.ptr("\xF0\x9F\x98\xAD", "", "loudly crying face", new sliceType(["sob"])), new emoji.ptr("\xF0\x9F\x98\xB5", "", "dizzy face", new sliceType(["dizzy_face"])), new emoji.ptr("\xF0\x9F\x98\xB2", "", "astonished face", new sliceType(["astonished"])), new emoji.ptr("\xF0\x9F\xA4\x90", "", "zipper-mouth face", new sliceType(["zipper_mouth_face"])), new emoji.ptr("\xF0\x9F\x98\xB7", "", "face with medical mask", new sliceType(["mask"])), new emoji.ptr("\xF0\x9F\xA4\x92", "", "face with thermometer", new sliceType(["face_with_thermometer"])), new emoji.ptr("\xF0\x9F\xA4\x95", "", "face with head-bandage", new sliceType(["face_with_head_bandage"])), new emoji.ptr("\xF0\x9F\x98\xB4", "", "sleeping face", new sliceType(["sleeping"])), new emoji.ptr("\xF0\x9F\x92\xA4", "", "zzz", new sliceType(["zzz"])), new emoji.ptr("\xF0\x9F\x92\xA9", "", "pile of poo", new sliceType(["hankey", "poop", "shit"])), new emoji.ptr("\xF0\x9F\x98\x88", "", "smiling face with horns", new sliceType(["smiling_imp"])), new emoji.ptr("\xF0\x9F\x91\xBF", "", "angry face with horns", new sliceType(["imp"])), new emoji.ptr("\xF0\x9F\x91\xB9", "", "ogre", new sliceType(["japanese_ogre"])), new emoji.ptr("\xF0\x9F\x91\xBA", "", "goblin", new sliceType(["japanese_goblin"])), new emoji.ptr("\xF0\x9F\x91\xBB", "", "ghost", new sliceType(["ghost"])), new emoji.ptr("\xF0\x9F\x92\x80", "", "skull", new sliceType(["skull"])), new emoji.ptr("\xE2\x98\xA0\xEF\xB8\x8F", "", "skull and crossbones", new sliceType(["skull_and_crossbones"])), new emoji.ptr("\xF0\x9F\x91\xBD", "", "alien", new sliceType(["alien"])), new emoji.ptr("\xF0\x9F\x91\xBE", "", "alien monster", new sliceType(["space_invader"])), new emoji.ptr("\xF0\x9F\xA4\x96", "", "robot face", new sliceType(["robot"])), new emoji.ptr("\xF0\x9F\x98\xBA", "", "smiling cat face with open mouth", new sliceType(["smiley_cat"])), new emoji.ptr("\xF0\x9F\x98\xB8", "", "grinning cat face with smiling eyes", new sliceType(["smile_cat"])), new emoji.ptr("\xF0\x9F\x98\xB9", "", "cat face with tears of joy", new sliceType(["joy_cat"])), new emoji.ptr("\xF0\x9F\x98\xBB", "", "smiling cat face with heart-eyes", new sliceType(["heart_eyes_cat"])), new emoji.ptr("\xF0\x9F\x98\xBC", "", "cat face with wry smile", new sliceType(["smirk_cat"])), new emoji.ptr("\xF0\x9F\x98\xBD", "", "kissing cat face with closed eyes", new sliceType(["kissing_cat"])), new emoji.ptr("\xF0\x9F\x99\x80", "", "weary cat face", new sliceType(["scream_cat"])), new emoji.ptr("\xF0\x9F\x98\xBF", "", "crying cat face", new sliceType(["crying_cat_face"])), new emoji.ptr("\xF0\x9F\x98\xBE", "", "pouting cat face", new sliceType(["pouting_cat"])), new emoji.ptr("\xF0\x9F\x99\x8C", "", "raising hands", new sliceType(["raised_hands"])), new emoji.ptr("\xF0\x9F\x91\x8F", "", "clapping hands", new sliceType(["clap"])), new emoji.ptr("\xF0\x9F\x91\x8D", "", "thumbs up", new sliceType(["+1", "thumbsup"])), new emoji.ptr("\xF0\x9F\x91\x8E", "", "thumbs down", new sliceType(["-1", "thumbsdown"])), new emoji.ptr("\xF0\x9F\x91\x8A", "", "oncoming fist", new sliceType(["facepunch", "punch"])), new emoji.ptr("\xE2\x9C\x8A", "", "raised fist", new sliceType(["fist"])), new emoji.ptr("\xF0\x9F\x91\x8B", "", "waving hand", new sliceType(["wave"])), new emoji.ptr("\xF0\x9F\x91\x88", "", "backhand index pointing left", new sliceType(["point_left"])), new emoji.ptr("\xF0\x9F\x91\x89", "", "backhand index pointing right", new sliceType(["point_right"])), new emoji.ptr("\xF0\x9F\x91\x86", "", "backhand index pointing up", new sliceType(["point_up_2"])), new emoji.ptr("\xF0\x9F\x91\x87", "", "backhand index pointing down", new sliceType(["point_down"])), new emoji.ptr("\xF0\x9F\x91\x8C", "", "OK hand", new sliceType(["ok_hand"])), new emoji.ptr("\xE2\x98\x9D\xEF\xB8\x8F", "", "index pointing up", new sliceType(["point_up"])), new emoji.ptr("\xE2\x9C\x8C\xEF\xB8\x8F", "", "victory hand", new sliceType(["v"])), new emoji.ptr("\xE2\x9C\x8B", "", "raised hand", new sliceType(["hand", "raised_hand"])), new emoji.ptr("\xF0\x9F\x96\x90", "", "raised hand with fingers splayed", new sliceType(["raised_hand_with_fingers_splayed"])), new emoji.ptr("\xF0\x9F\x91\x90", "", "open hands", new sliceType(["open_hands"])), new emoji.ptr("\xF0\x9F\x92\xAA", "", "flexed biceps", new sliceType(["muscle"])), new emoji.ptr("\xF0\x9F\x99\x8F", "", "folded hands", new sliceType(["pray"])), new emoji.ptr("\xF0\x9F\x96\x96", "", "vulcan salute", new sliceType(["vulcan_salute"])), new emoji.ptr("\xF0\x9F\xA4\x98", "", "sign of the horns", new sliceType(["metal"])), new emoji.ptr("\xF0\x9F\x96\x95", "", "middle finger", new sliceType(["middle_finger", "fu"])), new emoji.ptr("\xE2\x9C\x8D\xEF\xB8\x8F", "", "writing hand", new sliceType(["writing_hand"])), new emoji.ptr("\xF0\x9F\x92\x85", "", "nail polish", new sliceType(["nail_care"])), new emoji.ptr("\xF0\x9F\x91\x84", "", "mouth", new sliceType(["lips"])), new emoji.ptr("\xF0\x9F\x91\x85", "", "tongue", new sliceType(["tongue"])), new emoji.ptr("\xF0\x9F\x91\x82", "", "ear", new sliceType(["ear"])), new emoji.ptr("\xF0\x9F\x91\x83", "", "nose", new sliceType(["nose"])), new emoji.ptr("\xF0\x9F\x91\x81", "", "eye", new sliceType(["eye"])), new emoji.ptr("\xF0\x9F\x91\x80", "", "eyes", new sliceType(["eyes"])), new emoji.ptr("\xF0\x9F\x97\xA3", "", "speaking head", new sliceType(["speaking_head"])), new emoji.ptr("\xF0\x9F\x91\xA4", "", "bust in silhouette", new sliceType(["bust_in_silhouette"])), new emoji.ptr("\xF0\x9F\x91\xA5", "", "busts in silhouette", new sliceType(["busts_in_silhouette"])), new emoji.ptr("\xF0\x9F\x91\xB6", "", "baby", new sliceType(["baby"])), new emoji.ptr("\xF0\x9F\x91\xA6", "", "boy", new sliceType(["boy"])), new emoji.ptr("\xF0\x9F\x91\xA7", "", "girl", new sliceType(["girl"])), new emoji.ptr("\xF0\x9F\x91\xA8", "", "man", new sliceType(["man"])), new emoji.ptr("\xF0\x9F\x91\xA9", "", "woman", new sliceType(["woman"])), new emoji.ptr("\xF0\x9F\x91\xB1\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "blond-haired woman", new sliceType(["blonde_woman"])), new emoji.ptr("\xF0\x9F\x91\xB1", "", "blond-haired person", new sliceType(["blonde_man", "person_with_blond_hair"])), new emoji.ptr("\xF0\x9F\x91\xB4", "", "old man", new sliceType(["older_man"])), new emoji.ptr("\xF0\x9F\x91\xB5", "", "old woman", new sliceType(["older_woman"])), new emoji.ptr("\xF0\x9F\x91\xB2", "", "man with Chinese cap", new sliceType(["man_with_gua_pi_mao"])), new emoji.ptr("\xF0\x9F\x91\xB3\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman wearing turban", new sliceType(["woman_with_turban"])), new emoji.ptr("\xF0\x9F\x91\xB3", "", "person wearing turban", new sliceType(["man_with_turban"])), new emoji.ptr("\xF0\x9F\x91\xAE\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman police officer", new sliceType(["policewoman"])), new emoji.ptr("\xF0\x9F\x91\xAE", "", "police officer", new sliceType(["policeman", "cop"])), new emoji.ptr("\xF0\x9F\x91\xB7\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman construction worker", new sliceType(["construction_worker_woman"])), new emoji.ptr("\xF0\x9F\x91\xB7", "", "construction worker", new sliceType(["construction_worker_man", "construction_worker"])), new emoji.ptr("\xF0\x9F\x92\x82\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman guard", new sliceType(["guardswoman"])), new emoji.ptr("\xF0\x9F\x92\x82", "", "guard", new sliceType(["guardsman"])), new emoji.ptr("\xF0\x9F\x95\xB5\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman detective", new sliceType(["female_detective"])), new emoji.ptr("\xF0\x9F\x95\xB5\xEF\xB8\x8F", "", "detective", new sliceType(["male_detective", "detective"])), new emoji.ptr("\xF0\x9F\x8E\x85", "", "Santa Claus", new sliceType(["santa"])), new emoji.ptr("\xF0\x9F\x91\xB8", "", "princess", new sliceType(["princess"])), new emoji.ptr("\xF0\x9F\x91\xB0", "", "bride with veil", new sliceType(["bride_with_veil"])), new emoji.ptr("\xF0\x9F\x91\xBC", "", "baby angel", new sliceType(["angel"])), new emoji.ptr("\xF0\x9F\x99\x87\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman bowing", new sliceType(["bowing_woman"])), new emoji.ptr("\xF0\x9F\x99\x87", "", "person bowing", new sliceType(["bowing_man", "bow"])), new emoji.ptr("\xF0\x9F\x92\x81", "", "person tipping hand", new sliceType(["tipping_hand_woman", "information_desk_person"])), new emoji.ptr("\xF0\x9F\x92\x81\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man tipping hand", new sliceType(["tipping_hand_man"])), new emoji.ptr("\xF0\x9F\x99\x85", "", "person gesturing NO", new sliceType(["no_good_woman", "no_good", "ng_woman"])), new emoji.ptr("\xF0\x9F\x99\x85\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man gesturing NO", new sliceType(["no_good_man", "ng_man"])), new emoji.ptr("\xF0\x9F\x99\x86", "", "person gesturing OK", new sliceType(["ok_woman"])), new emoji.ptr("\xF0\x9F\x99\x86\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man gesturing OK", new sliceType(["ok_man"])), new emoji.ptr("\xF0\x9F\x99\x8B", "", "person raising hand", new sliceType(["raising_hand_woman", "raising_hand"])), new emoji.ptr("\xF0\x9F\x99\x8B\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man raising hand", new sliceType(["raising_hand_man"])), new emoji.ptr("\xF0\x9F\x99\x8E", "", "person pouting", new sliceType(["pouting_woman", "person_with_pouting_face"])), new emoji.ptr("\xF0\x9F\x99\x8E\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man pouting", new sliceType(["pouting_man"])), new emoji.ptr("\xF0\x9F\x99\x8D", "", "person frowning", new sliceType(["frowning_woman", "person_frowning"])), new emoji.ptr("\xF0\x9F\x99\x8D\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man frowning", new sliceType(["frowning_man"])), new emoji.ptr("\xF0\x9F\x92\x87", "", "person getting haircut", new sliceType(["haircut_woman", "haircut"])), new emoji.ptr("\xF0\x9F\x92\x87\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man getting haircut", new sliceType(["haircut_man"])), new emoji.ptr("\xF0\x9F\x92\x86", "", "person getting massage", new sliceType(["massage_woman", "massage"])), new emoji.ptr("\xF0\x9F\x92\x86\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "man getting massage", new sliceType(["massage_man"])), new emoji.ptr("\xF0\x9F\x92\x83", "", "woman dancing", new sliceType(["dancer"])), new emoji.ptr("\xF0\x9F\x91\xAF", "", "people with bunny ears partying", new sliceType(["dancing_women", "dancers"])), new emoji.ptr("\xF0\x9F\x91\xAF\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", "", "men with bunny ears partying", new sliceType(["dancing_men"])), new emoji.ptr("\xF0\x9F\x9A\xB6\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman walking", new sliceType(["walking_woman"])), new emoji.ptr("\xF0\x9F\x9A\xB6", "", "person walking", new sliceType(["walking_man", "walking"])), new emoji.ptr("\xF0\x9F\x8F\x83\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman running", new sliceType(["running_woman"])), new emoji.ptr("\xF0\x9F\x8F\x83", "", "person running", new sliceType(["running_man", "runner", "running"])), new emoji.ptr("\xF0\x9F\x91\xAB", "", "man and woman holding hands", new sliceType(["couple"])), new emoji.ptr("\xF0\x9F\x91\xAD", "", "two women holding hands", new sliceType(["two_women_holding_hands"])), new emoji.ptr("\xF0\x9F\x91\xAC", "", "two men holding hands", new sliceType(["two_men_holding_hands"])), new emoji.ptr("\xF0\x9F\x92\x91", "", "couple with heart", new sliceType(["couple_with_heart_woman_man", "couple_with_heart"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x91\xA9", "", "couple with heart: woman, woman", new sliceType(["couple_with_heart_woman_woman"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x91\xA8", "", "couple with heart: man, man", new sliceType(["couple_with_heart_man_man"])), new emoji.ptr("\xF0\x9F\x92\x8F", "", "kiss", new sliceType(["couplekiss_man_woman"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x92\x8B\xE2\x80\x8D\xF0\x9F\x91\xA9", "", "kiss: woman, woman", new sliceType(["couplekiss_woman_woman"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x92\x8B\xE2\x80\x8D\xF0\x9F\x91\xA8", "", "kiss: man, man", new sliceType(["couplekiss_man_man"])), new emoji.ptr("\xF0\x9F\x91\xAA", "", "family", new sliceType(["family_man_woman_boy", "family"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, woman, girl", new sliceType(["family_man_woman_girl"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, woman, girl, boy", new sliceType(["family_man_woman_girl_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, woman, boy, boy", new sliceType(["family_man_woman_boy_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, woman, girl, girl", new sliceType(["family_man_woman_girl_girl"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, woman, boy", new sliceType(["family_woman_woman_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: woman, woman, girl", new sliceType(["family_woman_woman_girl"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, woman, girl, boy", new sliceType(["family_woman_woman_girl_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, woman, boy, boy", new sliceType(["family_woman_woman_boy_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: woman, woman, girl, girl", new sliceType(["family_woman_woman_girl_girl"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, man, boy", new sliceType(["family_man_man_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, man, girl", new sliceType(["family_man_man_girl"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, man, girl, boy", new sliceType(["family_man_man_girl_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, man, boy, boy", new sliceType(["family_man_man_boy_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, man, girl, girl", new sliceType(["family_man_man_girl_girl"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, boy", new sliceType(["family_woman_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: woman, girl", new sliceType(["family_woman_girl"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, girl, boy", new sliceType(["family_woman_girl_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: woman, boy, boy", new sliceType(["family_woman_boy_boy"])), new emoji.ptr("\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: woman, girl, girl", new sliceType(["family_woman_girl_girl"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, boy", new sliceType(["family_man_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, girl", new sliceType(["family_man_girl"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, girl, boy", new sliceType(["family_man_girl_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", "", "family: man, boy, boy", new sliceType(["family_man_boy_boy"])), new emoji.ptr("\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", "", "family: man, girl, girl", new sliceType(["family_man_girl_girl"])), new emoji.ptr("\xF0\x9F\x91\x9A", "", "woman\xE2\x80\x99s clothes", new sliceType(["womans_clothes"])), new emoji.ptr("\xF0\x9F\x91\x95", "", "t-shirt", new sliceType(["shirt", "tshirt"])), new emoji.ptr("\xF0\x9F\x91\x96", "", "jeans", new sliceType(["jeans"])), new emoji.ptr("\xF0\x9F\x91\x94", "", "necktie", new sliceType(["necktie"])), new emoji.ptr("\xF0\x9F\x91\x97", "", "dress", new sliceType(["dress"])), new emoji.ptr("\xF0\x9F\x91\x99", "", "bikini", new sliceType(["bikini"])), new emoji.ptr("\xF0\x9F\x91\x98", "", "kimono", new sliceType(["kimono"])), new emoji.ptr("\xF0\x9F\x92\x84", "", "lipstick", new sliceType(["lipstick"])), new emoji.ptr("\xF0\x9F\x92\x8B", "", "kiss mark", new sliceType(["kiss"])), new emoji.ptr("\xF0\x9F\x91\xA3", "", "footprints", new sliceType(["footprints"])), new emoji.ptr("\xF0\x9F\x91\xA0", "", "high-heeled shoe", new sliceType(["high_heel"])), new emoji.ptr("\xF0\x9F\x91\xA1", "", "woman\xE2\x80\x99s sandal", new sliceType(["sandal"])), new emoji.ptr("\xF0\x9F\x91\xA2", "", "woman\xE2\x80\x99s boot", new sliceType(["boot"])), new emoji.ptr("\xF0\x9F\x91\x9E", "", "man\xE2\x80\x99s shoe", new sliceType(["mans_shoe", "shoe"])), new emoji.ptr("\xF0\x9F\x91\x9F", "", "running shoe", new sliceType(["athletic_shoe"])), new emoji.ptr("\xF0\x9F\x91\x92", "", "woman\xE2\x80\x99s hat", new sliceType(["womans_hat"])), new emoji.ptr("\xF0\x9F\x8E\xA9", "", "top hat", new sliceType(["tophat"])), new emoji.ptr("\xF0\x9F\x8E\x93", "", "graduation cap", new sliceType(["mortar_board"])), new emoji.ptr("\xF0\x9F\x91\x91", "", "crown", new sliceType(["crown"])), new emoji.ptr("\xE2\x9B\x91", "", "rescue worker\xE2\x80\x99s helmet", new sliceType(["rescue_worker_helmet"])), new emoji.ptr("\xF0\x9F\x8E\x92", "", "school backpack", new sliceType(["school_satchel"])), new emoji.ptr("\xF0\x9F\x91\x9D", "", "clutch bag", new sliceType(["pouch"])), new emoji.ptr("\xF0\x9F\x91\x9B", "", "purse", new sliceType(["purse"])), new emoji.ptr("\xF0\x9F\x91\x9C", "", "handbag", new sliceType(["handbag"])), new emoji.ptr("\xF0\x9F\x92\xBC", "", "briefcase", new sliceType(["briefcase"])), new emoji.ptr("\xF0\x9F\x91\x93", "", "glasses", new sliceType(["eyeglasses"])), new emoji.ptr("\xF0\x9F\x95\xB6", "", "sunglasses", new sliceType(["dark_sunglasses"])), new emoji.ptr("\xF0\x9F\x92\x8D", "", "ring", new sliceType(["ring"])), new emoji.ptr("\xF0\x9F\x8C\x82", "", "closed umbrella", new sliceType(["closed_umbrella"])), new emoji.ptr("\xF0\x9F\x90\xB6", "", "dog face", new sliceType(["dog"])), new emoji.ptr("\xF0\x9F\x90\xB1", "", "cat face", new sliceType(["cat"])), new emoji.ptr("\xF0\x9F\x90\xAD", "", "mouse face", new sliceType(["mouse"])), new emoji.ptr("\xF0\x9F\x90\xB9", "", "hamster face", new sliceType(["hamster"])), new emoji.ptr("\xF0\x9F\x90\xB0", "", "rabbit face", new sliceType(["rabbit"])), new emoji.ptr("\xF0\x9F\x90\xBB", "", "bear face", new sliceType(["bear"])), new emoji.ptr("\xF0\x9F\x90\xBC", "", "panda face", new sliceType(["panda_face"])), new emoji.ptr("\xF0\x9F\x90\xA8", "", "koala", new sliceType(["koala"])), new emoji.ptr("\xF0\x9F\x90\xAF", "", "tiger face", new sliceType(["tiger"])), new emoji.ptr("\xF0\x9F\xA6\x81", "", "lion face", new sliceType(["lion"])), new emoji.ptr("\xF0\x9F\x90\xAE", "", "cow face", new sliceType(["cow"])), new emoji.ptr("\xF0\x9F\x90\xB7", "", "pig face", new sliceType(["pig"])), new emoji.ptr("\xF0\x9F\x90\xBD", "", "pig nose", new sliceType(["pig_nose"])), new emoji.ptr("\xF0\x9F\x90\xB8", "", "frog face", new sliceType(["frog"])), new emoji.ptr("\xF0\x9F\x90\x99", "", "octopus", new sliceType(["octopus"])), new emoji.ptr("\xF0\x9F\x90\xB5", "", "monkey face", new sliceType(["monkey_face"])), new emoji.ptr("\xF0\x9F\x99\x88", "", "see-no-evil monkey", new sliceType(["see_no_evil"])), new emoji.ptr("\xF0\x9F\x99\x89", "", "hear-no-evil monkey", new sliceType(["hear_no_evil"])), new emoji.ptr("\xF0\x9F\x99\x8A", "", "speak-no-evil monkey", new sliceType(["speak_no_evil"])), new emoji.ptr("\xF0\x9F\x90\x92", "", "monkey", new sliceType(["monkey"])), new emoji.ptr("\xF0\x9F\x90\x94", "", "chicken", new sliceType(["chicken"])), new emoji.ptr("\xF0\x9F\x90\xA7", "", "penguin", new sliceType(["penguin"])), new emoji.ptr("\xF0\x9F\x90\xA6", "", "bird", new sliceType(["bird"])), new emoji.ptr("\xF0\x9F\x90\xA4", "", "baby chick", new sliceType(["baby_chick"])), new emoji.ptr("\xF0\x9F\x90\xA3", "", "hatching chick", new sliceType(["hatching_chick"])), new emoji.ptr("\xF0\x9F\x90\xA5", "", "front-facing baby chick", new sliceType(["hatched_chick"])), new emoji.ptr("\xF0\x9F\x90\xBA", "", "wolf face", new sliceType(["wolf"])), new emoji.ptr("\xF0\x9F\x90\x97", "", "boar", new sliceType(["boar"])), new emoji.ptr("\xF0\x9F\x90\xB4", "", "horse face", new sliceType(["horse"])), new emoji.ptr("\xF0\x9F\xA6\x84", "", "unicorn face", new sliceType(["unicorn"])), new emoji.ptr("\xF0\x9F\x90\x9D", "", "honeybee", new sliceType(["bee", "honeybee"])), new emoji.ptr("\xF0\x9F\x90\x9B", "", "bug", new sliceType(["bug"])), new emoji.ptr("\xF0\x9F\x90\x8C", "", "snail", new sliceType(["snail"])), new emoji.ptr("\xF0\x9F\x90\x9E", "", "lady beetle", new sliceType(["beetle"])), new emoji.ptr("\xF0\x9F\x90\x9C", "", "ant", new sliceType(["ant"])), new emoji.ptr("\xF0\x9F\x95\xB7", "", "spider", new sliceType(["spider"])), new emoji.ptr("\xF0\x9F\xA6\x82", "", "scorpion", new sliceType(["scorpion"])), new emoji.ptr("\xF0\x9F\xA6\x80", "", "crab", new sliceType(["crab"])), new emoji.ptr("\xF0\x9F\x90\x8D", "", "snake", new sliceType(["snake"])), new emoji.ptr("\xF0\x9F\x90\xA2", "", "turtle", new sliceType(["turtle"])), new emoji.ptr("\xF0\x9F\x90\xA0", "", "tropical fish", new sliceType(["tropical_fish"])), new emoji.ptr("\xF0\x9F\x90\x9F", "", "fish", new sliceType(["fish"])), new emoji.ptr("\xF0\x9F\x90\xA1", "", "blowfish", new sliceType(["blowfish"])), new emoji.ptr("\xF0\x9F\x90\xAC", "", "dolphin", new sliceType(["dolphin", "flipper"])), new emoji.ptr("\xF0\x9F\x90\xB3", "", "spouting whale", new sliceType(["whale"])), new emoji.ptr("\xF0\x9F\x90\x8B", "", "whale", new sliceType(["whale2"])), new emoji.ptr("\xF0\x9F\x90\x8A", "", "crocodile", new sliceType(["crocodile"])), new emoji.ptr("\xF0\x9F\x90\x86", "", "leopard", new sliceType(["leopard"])), new emoji.ptr("\xF0\x9F\x90\x85", "", "tiger", new sliceType(["tiger2"])), new emoji.ptr("\xF0\x9F\x90\x83", "", "water buffalo", new sliceType(["water_buffalo"])), new emoji.ptr("\xF0\x9F\x90\x82", "", "ox", new sliceType(["ox"])), new emoji.ptr("\xF0\x9F\x90\x84", "", "cow", new sliceType(["cow2"])), new emoji.ptr("\xF0\x9F\x90\xAA", "", "camel", new sliceType(["dromedary_camel"])), new emoji.ptr("\xF0\x9F\x90\xAB", "", "two-hump camel", new sliceType(["camel"])), new emoji.ptr("\xF0\x9F\x90\x98", "", "elephant", new sliceType(["elephant"])), new emoji.ptr("\xF0\x9F\x90\x90", "", "goat", new sliceType(["goat"])), new emoji.ptr("\xF0\x9F\x90\x8F", "", "ram", new sliceType(["ram"])), new emoji.ptr("\xF0\x9F\x90\x91", "", "sheep", new sliceType(["sheep"])), new emoji.ptr("\xF0\x9F\x90\x8E", "", "horse", new sliceType(["racehorse"])), new emoji.ptr("\xF0\x9F\x90\x96", "", "pig", new sliceType(["pig2"])), new emoji.ptr("\xF0\x9F\x90\x80", "", "rat", new sliceType(["rat"])), new emoji.ptr("\xF0\x9F\x90\x81", "", "mouse", new sliceType(["mouse2"])), new emoji.ptr("\xF0\x9F\x90\x93", "", "rooster", new sliceType(["rooster"])), new emoji.ptr("\xF0\x9F\xA6\x83", "", "turkey", new sliceType(["turkey"])), new emoji.ptr("\xF0\x9F\x95\x8A", "", "dove", new sliceType(["dove"])), new emoji.ptr("\xF0\x9F\x90\x95", "", "dog", new sliceType(["dog2"])), new emoji.ptr("\xF0\x9F\x90\xA9", "", "poodle", new sliceType(["poodle"])), new emoji.ptr("\xF0\x9F\x90\x88", "", "cat", new sliceType(["cat2"])), new emoji.ptr("\xF0\x9F\x90\x87", "", "rabbit", new sliceType(["rabbit2"])), new emoji.ptr("\xF0\x9F\x90\xBF", "", "chipmunk", new sliceType(["chipmunk"])), new emoji.ptr("\xF0\x9F\x90\xBE", "", "paw prints", new sliceType(["feet", "paw_prints"])), new emoji.ptr("\xF0\x9F\x90\x89", "", "dragon", new sliceType(["dragon"])), new emoji.ptr("\xF0\x9F\x90\xB2", "", "dragon face", new sliceType(["dragon_face"])), new emoji.ptr("\xF0\x9F\x8C\xB5", "", "cactus", new sliceType(["cactus"])), new emoji.ptr("\xF0\x9F\x8E\x84", "", "Christmas tree", new sliceType(["christmas_tree"])), new emoji.ptr("\xF0\x9F\x8C\xB2", "", "evergreen tree", new sliceType(["evergreen_tree"])), new emoji.ptr("\xF0\x9F\x8C\xB3", "", "deciduous tree", new sliceType(["deciduous_tree"])), new emoji.ptr("\xF0\x9F\x8C\xB4", "", "palm tree", new sliceType(["palm_tree"])), new emoji.ptr("\xF0\x9F\x8C\xB1", "", "seedling", new sliceType(["seedling"])), new emoji.ptr("\xF0\x9F\x8C\xBF", "", "herb", new sliceType(["herb"])), new emoji.ptr("\xE2\x98\x98", "", "shamrock", new sliceType(["shamrock"])), new emoji.ptr("\xF0\x9F\x8D\x80", "", "four leaf clover", new sliceType(["four_leaf_clover"])), new emoji.ptr("\xF0\x9F\x8E\x8D", "", "pine decoration", new sliceType(["bamboo"])), new emoji.ptr("\xF0\x9F\x8E\x8B", "", "tanabata tree", new sliceType(["tanabata_tree"])), new emoji.ptr("\xF0\x9F\x8D\x83", "", "leaf fluttering in wind", new sliceType(["leaves"])), new emoji.ptr("\xF0\x9F\x8D\x82", "", "fallen leaf", new sliceType(["fallen_leaf"])), new emoji.ptr("\xF0\x9F\x8D\x81", "", "maple leaf", new sliceType(["maple_leaf"])), new emoji.ptr("\xF0\x9F\x8C\xBE", "", "sheaf of rice", new sliceType(["ear_of_rice"])), new emoji.ptr("\xF0\x9F\x8C\xBA", "", "hibiscus", new sliceType(["hibiscus"])), new emoji.ptr("\xF0\x9F\x8C\xBB", "", "sunflower", new sliceType(["sunflower"])), new emoji.ptr("\xF0\x9F\x8C\xB9", "", "rose", new sliceType(["rose"])), new emoji.ptr("\xF0\x9F\x8C\xB7", "", "tulip", new sliceType(["tulip"])), new emoji.ptr("\xF0\x9F\x8C\xBC", "", "blossom", new sliceType(["blossom"])), new emoji.ptr("\xF0\x9F\x8C\xB8", "", "cherry blossom", new sliceType(["cherry_blossom"])), new emoji.ptr("\xF0\x9F\x92\x90", "", "bouquet", new sliceType(["bouquet"])), new emoji.ptr("\xF0\x9F\x8D\x84", "", "mushroom", new sliceType(["mushroom"])), new emoji.ptr("\xF0\x9F\x8C\xB0", "", "chestnut", new sliceType(["chestnut"])), new emoji.ptr("\xF0\x9F\x8E\x83", "", "jack-o-lantern", new sliceType(["jack_o_lantern"])), new emoji.ptr("\xF0\x9F\x90\x9A", "", "spiral shell", new sliceType(["shell"])), new emoji.ptr("\xF0\x9F\x95\xB8", "", "spider web", new sliceType(["spider_web"])), new emoji.ptr("\xF0\x9F\x8C\x8E", "", "globe showing Americas", new sliceType(["earth_americas"])), new emoji.ptr("\xF0\x9F\x8C\x8D", "", "globe showing Europe-Africa", new sliceType(["earth_africa"])), new emoji.ptr("\xF0\x9F\x8C\x8F", "", "globe showing Asia-Australia", new sliceType(["earth_asia"])), new emoji.ptr("\xF0\x9F\x8C\x95", "", "full moon", new sliceType(["full_moon"])), new emoji.ptr("\xF0\x9F\x8C\x96", "", "waning gibbous moon", new sliceType(["waning_gibbous_moon"])), new emoji.ptr("\xF0\x9F\x8C\x97", "", "last quarter moon", new sliceType(["last_quarter_moon"])), new emoji.ptr("\xF0\x9F\x8C\x98", "", "waning crescent moon", new sliceType(["waning_crescent_moon"])), new emoji.ptr("\xF0\x9F\x8C\x91", "", "new moon", new sliceType(["new_moon"])), new emoji.ptr("\xF0\x9F\x8C\x92", "", "waxing crescent moon", new sliceType(["waxing_crescent_moon"])), new emoji.ptr("\xF0\x9F\x8C\x93", "", "first quarter moon", new sliceType(["first_quarter_moon"])), new emoji.ptr("\xF0\x9F\x8C\x94", "", "waxing gibbous moon", new sliceType(["moon", "waxing_gibbous_moon"])), new emoji.ptr("\xF0\x9F\x8C\x9A", "", "new moon face", new sliceType(["new_moon_with_face"])), new emoji.ptr("\xF0\x9F\x8C\x9D", "", "full moon with face", new sliceType(["full_moon_with_face"])), new emoji.ptr("\xF0\x9F\x8C\x9B", "", "first quarter moon with face", new sliceType(["first_quarter_moon_with_face"])), new emoji.ptr("\xF0\x9F\x8C\x9C", "", "last quarter moon with face", new sliceType(["last_quarter_moon_with_face"])), new emoji.ptr("\xF0\x9F\x8C\x9E", "", "sun with face", new sliceType(["sun_with_face"])), new emoji.ptr("\xF0\x9F\x8C\x99", "", "crescent moon", new sliceType(["crescent_moon"])), new emoji.ptr("\xE2\xAD\x90\xEF\xB8\x8F", "", "white medium star", new sliceType(["star"])), new emoji.ptr("\xF0\x9F\x8C\x9F", "", "glowing star", new sliceType(["star2"])), new emoji.ptr("\xF0\x9F\x92\xAB", "", "dizzy", new sliceType(["dizzy"])), new emoji.ptr("\xE2\x9C\xA8", "", "sparkles", new sliceType(["sparkles"])), new emoji.ptr("\xE2\x98\x84\xEF\xB8\x8F", "", "comet", new sliceType(["comet"])), new emoji.ptr("\xE2\x98\x80\xEF\xB8\x8F", "", "sun", new sliceType(["sunny"])), new emoji.ptr("\xF0\x9F\x8C\xA4", "", "sun behind small cloud", new sliceType(["sun_behind_small_cloud"])), new emoji.ptr("\xE2\x9B\x85\xEF\xB8\x8F", "", "sun behind cloud", new sliceType(["partly_sunny"])), new emoji.ptr("\xF0\x9F\x8C\xA5", "", "sun behind large cloud", new sliceType(["sun_behind_large_cloud"])), new emoji.ptr("\xF0\x9F\x8C\xA6", "", "sun behind rain cloud", new sliceType(["sun_behind_rain_cloud"])), new emoji.ptr("\xE2\x98\x81\xEF\xB8\x8F", "", "cloud", new sliceType(["cloud"])), new emoji.ptr("\xF0\x9F\x8C\xA7", "", "cloud with rain", new sliceType(["cloud_with_rain"])), new emoji.ptr("\xE2\x9B\x88", "", "cloud with lightning and rain", new sliceType(["cloud_with_lightning_and_rain"])), new emoji.ptr("\xF0\x9F\x8C\xA9", "", "cloud with lightning", new sliceType(["cloud_with_lightning"])), new emoji.ptr("\xE2\x9A\xA1\xEF\xB8\x8F", "", "high voltage", new sliceType(["zap"])), new emoji.ptr("\xF0\x9F\x94\xA5", "", "fire", new sliceType(["fire"])), new emoji.ptr("\xF0\x9F\x92\xA5", "", "collision", new sliceType(["boom", "collision"])), new emoji.ptr("\xE2\x9D\x84\xEF\xB8\x8F", "", "snowflake", new sliceType(["snowflake"])), new emoji.ptr("\xF0\x9F\x8C\xA8", "", "cloud with snow", new sliceType(["cloud_with_snow"])), new emoji.ptr("\xE2\x98\x83\xEF\xB8\x8F", "", "snowman", new sliceType(["snowman_with_snow"])), new emoji.ptr("\xE2\x9B\x84\xEF\xB8\x8F", "", "snowman without snow", new sliceType(["snowman"])), new emoji.ptr("\xF0\x9F\x8C\xAC", "", "wind face", new sliceType(["wind_face"])), new emoji.ptr("\xF0\x9F\x92\xA8", "", "dashing away", new sliceType(["dash"])), new emoji.ptr("\xF0\x9F\x8C\xAA", "", "tornado", new sliceType(["tornado"])), new emoji.ptr("\xF0\x9F\x8C\xAB", "", "fog", new sliceType(["fog"])), new emoji.ptr("\xE2\x98\x82\xEF\xB8\x8F", "", "umbrella", new sliceType(["open_umbrella"])), new emoji.ptr("\xE2\x98\x94\xEF\xB8\x8F", "", "umbrella with rain drops", new sliceType(["umbrella"])), new emoji.ptr("\xF0\x9F\x92\xA7", "", "droplet", new sliceType(["droplet"])), new emoji.ptr("\xF0\x9F\x92\xA6", "", "sweat droplets", new sliceType(["sweat_drops"])), new emoji.ptr("\xF0\x9F\x8C\x8A", "", "water wave", new sliceType(["ocean"])), new emoji.ptr("\xF0\x9F\x8D\x8F", "", "green apple", new sliceType(["green_apple"])), new emoji.ptr("\xF0\x9F\x8D\x8E", "", "red apple", new sliceType(["apple"])), new emoji.ptr("\xF0\x9F\x8D\x90", "", "pear", new sliceType(["pear"])), new emoji.ptr("\xF0\x9F\x8D\x8A", "", "tangerine", new sliceType(["tangerine", "orange", "mandarin"])), new emoji.ptr("\xF0\x9F\x8D\x8B", "", "lemon", new sliceType(["lemon"])), new emoji.ptr("\xF0\x9F\x8D\x8C", "", "banana", new sliceType(["banana"])), new emoji.ptr("\xF0\x9F\x8D\x89", "", "watermelon", new sliceType(["watermelon"])), new emoji.ptr("\xF0\x9F\x8D\x87", "", "grapes", new sliceType(["grapes"])), new emoji.ptr("\xF0\x9F\x8D\x93", "", "strawberry", new sliceType(["strawberry"])), new emoji.ptr("\xF0\x9F\x8D\x88", "", "melon", new sliceType(["melon"])), new emoji.ptr("\xF0\x9F\x8D\x92", "", "cherries", new sliceType(["cherries"])), new emoji.ptr("\xF0\x9F\x8D\x91", "", "peach", new sliceType(["peach"])), new emoji.ptr("\xF0\x9F\x8D\x8D", "", "pineapple", new sliceType(["pineapple"])), new emoji.ptr("\xF0\x9F\x8D\x85", "", "tomato", new sliceType(["tomato"])), new emoji.ptr("\xF0\x9F\x8D\x86", "", "eggplant", new sliceType(["eggplant"])), new emoji.ptr("\xF0\x9F\x8C\xB6", "", "hot pepper", new sliceType(["hot_pepper"])), new emoji.ptr("\xF0\x9F\x8C\xBD", "", "ear of corn", new sliceType(["corn"])), new emoji.ptr("\xF0\x9F\x8D\xA0", "", "roasted sweet potato", new sliceType(["sweet_potato"])), new emoji.ptr("\xF0\x9F\x8D\xAF", "", "honey pot", new sliceType(["honey_pot"])), new emoji.ptr("\xF0\x9F\x8D\x9E", "", "bread", new sliceType(["bread"])), new emoji.ptr("\xF0\x9F\xA7\x80", "", "cheese wedge", new sliceType(["cheese"])), new emoji.ptr("\xF0\x9F\x8D\x97", "", "poultry leg", new sliceType(["poultry_leg"])), new emoji.ptr("\xF0\x9F\x8D\x96", "", "meat on bone", new sliceType(["meat_on_bone"])), new emoji.ptr("\xF0\x9F\x8D\xA4", "", "fried shrimp", new sliceType(["fried_shrimp"])), new emoji.ptr("\xF0\x9F\x8D\xB3", "", "cooking", new sliceType(["egg"])), new emoji.ptr("\xF0\x9F\x8D\x94", "", "hamburger", new sliceType(["hamburger"])), new emoji.ptr("\xF0\x9F\x8D\x9F", "", "french fries", new sliceType(["fries"])), new emoji.ptr("\xF0\x9F\x8C\xAD", "", "hot dog", new sliceType(["hotdog"])), new emoji.ptr("\xF0\x9F\x8D\x95", "", "pizza", new sliceType(["pizza"])), new emoji.ptr("\xF0\x9F\x8D\x9D", "", "spaghetti", new sliceType(["spaghetti"])), new emoji.ptr("\xF0\x9F\x8C\xAE", "", "taco", new sliceType(["taco"])), new emoji.ptr("\xF0\x9F\x8C\xAF", "", "burrito", new sliceType(["burrito"])), new emoji.ptr("\xF0\x9F\x8D\x9C", "", "steaming bowl", new sliceType(["ramen"])), new emoji.ptr("\xF0\x9F\x8D\xB2", "", "pot of food", new sliceType(["stew"])), new emoji.ptr("\xF0\x9F\x8D\xA5", "", "fish cake with swirl", new sliceType(["fish_cake"])), new emoji.ptr("\xF0\x9F\x8D\xA3", "", "sushi", new sliceType(["sushi"])), new emoji.ptr("\xF0\x9F\x8D\xB1", "", "bento box", new sliceType(["bento"])), new emoji.ptr("\xF0\x9F\x8D\x9B", "", "curry rice", new sliceType(["curry"])), new emoji.ptr("\xF0\x9F\x8D\x99", "", "rice ball", new sliceType(["rice_ball"])), new emoji.ptr("\xF0\x9F\x8D\x9A", "", "cooked rice", new sliceType(["rice"])), new emoji.ptr("\xF0\x9F\x8D\x98", "", "rice cracker", new sliceType(["rice_cracker"])), new emoji.ptr("\xF0\x9F\x8D\xA2", "", "oden", new sliceType(["oden"])), new emoji.ptr("\xF0\x9F\x8D\xA1", "", "dango", new sliceType(["dango"])), new emoji.ptr("\xF0\x9F\x8D\xA7", "", "shaved ice", new sliceType(["shaved_ice"])), new emoji.ptr("\xF0\x9F\x8D\xA8", "", "ice cream", new sliceType(["ice_cream"])), new emoji.ptr("\xF0\x9F\x8D\xA6", "", "soft ice cream", new sliceType(["icecream"])), new emoji.ptr("\xF0\x9F\x8D\xB0", "", "shortcake", new sliceType(["cake"])), new emoji.ptr("\xF0\x9F\x8E\x82", "", "birthday cake", new sliceType(["birthday"])), new emoji.ptr("\xF0\x9F\x8D\xAE", "", "custard", new sliceType(["custard"])), new emoji.ptr("\xF0\x9F\x8D\xAC", "", "candy", new sliceType(["candy"])), new emoji.ptr("\xF0\x9F\x8D\xAD", "", "lollipop", new sliceType(["lollipop"])), new emoji.ptr("\xF0\x9F\x8D\xAB", "", "chocolate bar", new sliceType(["chocolate_bar"])), new emoji.ptr("\xF0\x9F\x8D\xBF", "", "popcorn", new sliceType(["popcorn"])), new emoji.ptr("\xF0\x9F\x8D\xA9", "", "doughnut", new sliceType(["doughnut"])), new emoji.ptr("\xF0\x9F\x8D\xAA", "", "cookie", new sliceType(["cookie"])), new emoji.ptr("\xF0\x9F\x8D\xBA", "", "beer mug", new sliceType(["beer"])), new emoji.ptr("\xF0\x9F\x8D\xBB", "", "clinking beer mugs", new sliceType(["beers"])), new emoji.ptr("\xF0\x9F\x8D\xB7", "", "wine glass", new sliceType(["wine_glass"])), new emoji.ptr("\xF0\x9F\x8D\xB8", "", "cocktail glass", new sliceType(["cocktail"])), new emoji.ptr("\xF0\x9F\x8D\xB9", "", "tropical drink", new sliceType(["tropical_drink"])), new emoji.ptr("\xF0\x9F\x8D\xBE", "", "bottle with popping cork", new sliceType(["champagne"])), new emoji.ptr("\xF0\x9F\x8D\xB6", "", "sake", new sliceType(["sake"])), new emoji.ptr("\xF0\x9F\x8D\xB5", "", "teacup without handle", new sliceType(["tea"])), new emoji.ptr("\xE2\x98\x95\xEF\xB8\x8F", "", "hot beverage", new sliceType(["coffee"])), new emoji.ptr("\xF0\x9F\x8D\xBC", "", "baby bottle", new sliceType(["baby_bottle"])), new emoji.ptr("\xF0\x9F\x8D\xB4", "", "fork and knife", new sliceType(["fork_and_knife"])), new emoji.ptr("\xF0\x9F\x8D\xBD", "", "fork and knife with plate", new sliceType(["plate_with_cutlery"])), new emoji.ptr("\xE2\x9A\xBD\xEF\xB8\x8F", "", "soccer ball", new sliceType(["soccer"])), new emoji.ptr("\xF0\x9F\x8F\x80", "", "basketball", new sliceType(["basketball"])), new emoji.ptr("\xF0\x9F\x8F\x88", "", "american football", new sliceType(["football"])), new emoji.ptr("\xE2\x9A\xBE\xEF\xB8\x8F", "", "baseball", new sliceType(["baseball"])), new emoji.ptr("\xF0\x9F\x8E\xBE", "", "tennis", new sliceType(["tennis"])), new emoji.ptr("\xF0\x9F\x8F\x90", "", "volleyball", new sliceType(["volleyball"])), new emoji.ptr("\xF0\x9F\x8F\x89", "", "rugby football", new sliceType(["rugby_football"])), new emoji.ptr("\xF0\x9F\x8E\xB1", "", "pool 8 ball", new sliceType(["8ball"])), new emoji.ptr("\xF0\x9F\x8F\x93", "", "ping pong", new sliceType(["ping_pong"])), new emoji.ptr("\xF0\x9F\x8F\xB8", "", "badminton", new sliceType(["badminton"])), new emoji.ptr("\xF0\x9F\x8F\x92", "", "ice hockey", new sliceType(["ice_hockey"])), new emoji.ptr("\xF0\x9F\x8F\x91", "", "field hockey", new sliceType(["field_hockey"])), new emoji.ptr("\xF0\x9F\x8F\x8F", "", "cricket", new sliceType(["cricket"])), new emoji.ptr("\xF0\x9F\x8F\xB9", "", "bow and arrow", new sliceType(["bow_and_arrow"])), new emoji.ptr("\xE2\x9B\xB3\xEF\xB8\x8F", "", "flag in hole", new sliceType(["golf"])), new emoji.ptr("\xF0\x9F\x8E\xA3", "", "fishing pole", new sliceType(["fishing_pole_and_fish"])), new emoji.ptr("\xE2\x9B\xB8", "", "ice skate", new sliceType(["ice_skate"])), new emoji.ptr("\xF0\x9F\x8E\xBF", "", "skis", new sliceType(["ski"])), new emoji.ptr("\xE2\x9B\xB7", "", "skier", new sliceType(["skier"])), new emoji.ptr("\xF0\x9F\x8F\x82", "", "snowboarder", new sliceType(["snowboarder"])), new emoji.ptr("\xF0\x9F\x8F\x8B\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman lifting weights", new sliceType(["weight_lifting_woman"])), new emoji.ptr("\xF0\x9F\x8F\x8B\xEF\xB8\x8F", "", "person lifting weights", new sliceType(["weight_lifting_man"])), new emoji.ptr("\xE2\x9B\xB9\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman bouncing ball", new sliceType(["basketball_woman"])), new emoji.ptr("\xE2\x9B\xB9\xEF\xB8\x8F", "", "person bouncing ball", new sliceType(["basketball_man"])), new emoji.ptr("\xF0\x9F\x8F\x8C\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman golfing", new sliceType(["golfing_woman"])), new emoji.ptr("\xF0\x9F\x8F\x8C\xEF\xB8\x8F", "", "person golfing", new sliceType(["golfing_man"])), new emoji.ptr("\xF0\x9F\x8F\x84\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman surfing", new sliceType(["surfing_woman"])), new emoji.ptr("\xF0\x9F\x8F\x84", "", "person surfing", new sliceType(["surfing_man", "surfer"])), new emoji.ptr("\xF0\x9F\x8F\x8A\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman swimming", new sliceType(["swimming_woman"])), new emoji.ptr("\xF0\x9F\x8F\x8A", "", "person swimming", new sliceType(["swimming_man", "swimmer"])), new emoji.ptr("\xF0\x9F\x9A\xA3\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman rowing boat", new sliceType(["rowing_woman"])), new emoji.ptr("\xF0\x9F\x9A\xA3", "", "person rowing boat", new sliceType(["rowing_man", "rowboat"])), new emoji.ptr("\xF0\x9F\x8F\x87", "", "horse racing", new sliceType(["horse_racing"])), new emoji.ptr("\xF0\x9F\x9A\xB4\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman biking", new sliceType(["biking_woman"])), new emoji.ptr("\xF0\x9F\x9A\xB4", "", "person biking", new sliceType(["biking_man", "bicyclist"])), new emoji.ptr("\xF0\x9F\x9A\xB5\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", "", "woman mountain biking", new sliceType(["mountain_biking_woman"])), new emoji.ptr("\xF0\x9F\x9A\xB5", "", "person mountain biking", new sliceType(["mountain_biking_man", "mountain_bicyclist"])), new emoji.ptr("\xF0\x9F\x9B\x80", "", "person taking bath", new sliceType(["bath"])), new emoji.ptr("\xF0\x9F\x95\xB4", "", "man in business suit levitating", new sliceType(["business_suit_levitating"])), new emoji.ptr("\xF0\x9F\x8E\x97", "", "reminder ribbon", new sliceType(["reminder_ribbon"])), new emoji.ptr("\xF0\x9F\x8E\xBD", "", "running shirt", new sliceType(["running_shirt_with_sash"])), new emoji.ptr("\xF0\x9F\x8F\x85", "", "sports medal", new sliceType(["medal_sports"])), new emoji.ptr("\xF0\x9F\x8E\x96", "", "military medal", new sliceType(["medal_military"])), new emoji.ptr("\xF0\x9F\x8F\x86", "", "trophy", new sliceType(["trophy"])), new emoji.ptr("\xF0\x9F\x8F\xB5", "", "rosette", new sliceType(["rosette"])), new emoji.ptr("\xF0\x9F\x8E\xAF", "", "direct hit", new sliceType(["dart"])), new emoji.ptr("\xF0\x9F\x8E\xAB", "", "ticket", new sliceType(["ticket"])), new emoji.ptr("\xF0\x9F\x8E\x9F", "", "admission tickets", new sliceType(["tickets"])), new emoji.ptr("\xF0\x9F\x8E\xAD", "", "performing arts", new sliceType(["performing_arts"])), new emoji.ptr("\xF0\x9F\x8E\xA8", "", "artist palette", new sliceType(["art"])), new emoji.ptr("\xF0\x9F\x8E\xAA", "", "circus tent", new sliceType(["circus_tent"])), new emoji.ptr("\xF0\x9F\x8E\xAC", "", "clapper board", new sliceType(["clapper"])), new emoji.ptr("\xF0\x9F\x8E\xA4", "", "microphone", new sliceType(["microphone"])), new emoji.ptr("\xF0\x9F\x8E\xA7", "", "headphone", new sliceType(["headphones"])), new emoji.ptr("\xF0\x9F\x8E\xBC", "", "musical score", new sliceType(["musical_score"])), new emoji.ptr("\xF0\x9F\x8E\xB9", "", "musical keyboard", new sliceType(["musical_keyboard"])), new emoji.ptr("\xF0\x9F\x8E\xB7", "", "saxophone", new sliceType(["saxophone"])), new emoji.ptr("\xF0\x9F\x8E\xBA", "", "trumpet", new sliceType(["trumpet"])), new emoji.ptr("\xF0\x9F\x8E\xB8", "", "guitar", new sliceType(["guitar"])), new emoji.ptr("\xF0\x9F\x8E\xBB", "", "violin", new sliceType(["violin"])), new emoji.ptr("\xF0\x9F\x8E\xAE", "", "video game", new sliceType(["video_game"])), new emoji.ptr("\xF0\x9F\x8E\xB0", "", "slot machine", new sliceType(["slot_machine"])), new emoji.ptr("\xF0\x9F\x8E\xB2", "", "game die", new sliceType(["game_die"])), new emoji.ptr("\xF0\x9F\x8E\xB3", "", "bowling", new sliceType(["bowling"])), new emoji.ptr("\xF0\x9F\x9A\x97", "", "automobile", new sliceType(["car", "red_car"])), new emoji.ptr("\xF0\x9F\x9A\x95", "", "taxi", new sliceType(["taxi"])), new emoji.ptr("\xF0\x9F\x9A\x99", "", "sport utility vehicle", new sliceType(["blue_car"])), new emoji.ptr("\xF0\x9F\x9A\x8C", "", "bus", new sliceType(["bus"])), new emoji.ptr("\xF0\x9F\x9A\x8E", "", "trolleybus", new sliceType(["trolleybus"])), new emoji.ptr("\xF0\x9F\x8F\x8E", "", "racing car", new sliceType(["racing_car"])), new emoji.ptr("\xF0\x9F\x9A\x93", "", "police car", new sliceType(["police_car"])), new emoji.ptr("\xF0\x9F\x9A\x91", "", "ambulance", new sliceType(["ambulance"])), new emoji.ptr("\xF0\x9F\x9A\x92", "", "fire engine", new sliceType(["fire_engine"])), new emoji.ptr("\xF0\x9F\x9A\x90", "", "minibus", new sliceType(["minibus"])), new emoji.ptr("\xF0\x9F\x9A\x9A", "", "delivery truck", new sliceType(["truck"])), new emoji.ptr("\xF0\x9F\x9A\x9B", "", "articulated lorry", new sliceType(["articulated_lorry"])), new emoji.ptr("\xF0\x9F\x9A\x9C", "", "tractor", new sliceType(["tractor"])), new emoji.ptr("\xF0\x9F\x8F\x8D", "", "motorcycle", new sliceType(["motorcycle"])), new emoji.ptr("\xF0\x9F\x9A\xB2", "", "bicycle", new sliceType(["bike"])), new emoji.ptr("\xF0\x9F\x9A\xA8", "", "police car light", new sliceType(["rotating_light"])), new emoji.ptr("\xF0\x9F\x9A\x94", "", "oncoming police car", new sliceType(["oncoming_police_car"])), new emoji.ptr("\xF0\x9F\x9A\x8D", "", "oncoming bus", new sliceType(["oncoming_bus"])), new emoji.ptr("\xF0\x9F\x9A\x98", "", "oncoming automobile", new sliceType(["oncoming_automobile"])), new emoji.ptr("\xF0\x9F\x9A\x96", "", "oncoming taxi", new sliceType(["oncoming_taxi"])), new emoji.ptr("\xF0\x9F\x9A\xA1", "", "aerial tramway", new sliceType(["aerial_tramway"])), new emoji.ptr("\xF0\x9F\x9A\xA0", "", "mountain cableway", new sliceType(["mountain_cableway"])), new emoji.ptr("\xF0\x9F\x9A\x9F", "", "suspension railway", new sliceType(["suspension_railway"])), new emoji.ptr("\xF0\x9F\x9A\x83", "", "railway car", new sliceType(["railway_car"])), new emoji.ptr("\xF0\x9F\x9A\x8B", "", "tram car", new sliceType(["train"])), new emoji.ptr("\xF0\x9F\x9A\x9D", "", "monorail", new sliceType(["monorail"])), new emoji.ptr("\xF0\x9F\x9A\x84", "", "high-speed train", new sliceType(["bullettrain_side"])), new emoji.ptr("\xF0\x9F\x9A\x85", "", "high-speed train with bullet nose", new sliceType(["bullettrain_front"])), new emoji.ptr("\xF0\x9F\x9A\x88", "", "light rail", new sliceType(["light_rail"])), new emoji.ptr("\xF0\x9F\x9A\x9E", "", "mountain railway", new sliceType(["mountain_railway"])), new emoji.ptr("\xF0\x9F\x9A\x82", "", "locomotive", new sliceType(["steam_locomotive"])), new emoji.ptr("\xF0\x9F\x9A\x86", "", "train", new sliceType(["train2"])), new emoji.ptr("\xF0\x9F\x9A\x87", "", "metro", new sliceType(["metro"])), new emoji.ptr("\xF0\x9F\x9A\x8A", "", "tram", new sliceType(["tram"])), new emoji.ptr("\xF0\x9F\x9A\x89", "", "station", new sliceType(["station"])), new emoji.ptr("\xF0\x9F\x9A\x81", "", "helicopter", new sliceType(["helicopter"])), new emoji.ptr("\xF0\x9F\x9B\xA9", "", "small airplane", new sliceType(["small_airplane"])), new emoji.ptr("\xE2\x9C\x88\xEF\xB8\x8F", "", "airplane", new sliceType(["airplane"])), new emoji.ptr("\xF0\x9F\x9B\xAB", "", "airplane departure", new sliceType(["flight_departure"])), new emoji.ptr("\xF0\x9F\x9B\xAC", "", "airplane arrival", new sliceType(["flight_arrival"])), new emoji.ptr("\xE2\x9B\xB5\xEF\xB8\x8F", "", "sailboat", new sliceType(["boat", "sailboat"])), new emoji.ptr("\xF0\x9F\x9B\xA5", "", "motor boat", new sliceType(["motor_boat"])), new emoji.ptr("\xF0\x9F\x9A\xA4", "", "speedboat", new sliceType(["speedboat"])), new emoji.ptr("\xE2\x9B\xB4", "", "ferry", new sliceType(["ferry"])), new emoji.ptr("\xF0\x9F\x9B\xB3", "", "passenger ship", new sliceType(["passenger_ship"])), new emoji.ptr("\xF0\x9F\x9A\x80", "", "rocket", new sliceType(["rocket"])), new emoji.ptr("\xF0\x9F\x9B\xB0", "", "satellite", new sliceType(["artificial_satellite"])), new emoji.ptr("\xF0\x9F\x92\xBA", "", "seat", new sliceType(["seat"])), new emoji.ptr("\xE2\x9A\x93\xEF\xB8\x8F", "", "anchor", new sliceType(["anchor"])), new emoji.ptr("\xF0\x9F\x9A\xA7", "", "construction", new sliceType(["construction"])), new emoji.ptr("\xE2\x9B\xBD\xEF\xB8\x8F", "", "fuel pump", new sliceType(["fuelpump"])), new emoji.ptr("\xF0\x9F\x9A\x8F", "", "bus stop", new sliceType(["busstop"])), new emoji.ptr("\xF0\x9F\x9A\xA6", "", "vertical traffic light", new sliceType(["vertical_traffic_light"])), new emoji.ptr("\xF0\x9F\x9A\xA5", "", "horizontal traffic light", new sliceType(["traffic_light"])), new emoji.ptr("\xF0\x9F\x97\xBA", "", "world map", new sliceType(["world_map"])), new emoji.ptr("\xF0\x9F\x9A\xA2", "", "ship", new sliceType(["ship"])), new emoji.ptr("\xF0\x9F\x8E\xA1", "", "ferris wheel", new sliceType(["ferris_wheel"])), new emoji.ptr("\xF0\x9F\x8E\xA2", "", "roller coaster", new sliceType(["roller_coaster"])), new emoji.ptr("\xF0\x9F\x8E\xA0", "", "carousel horse", new sliceType(["carousel_horse"])), new emoji.ptr("\xF0\x9F\x8F\x97", "", "building construction", new sliceType(["building_construction"])), new emoji.ptr("\xF0\x9F\x8C\x81", "", "foggy", new sliceType(["foggy"])), new emoji.ptr("\xF0\x9F\x97\xBC", "", "Tokyo tower", new sliceType(["tokyo_tower"])), new emoji.ptr("\xF0\x9F\x8F\xAD", "", "factory", new sliceType(["factory"])), new emoji.ptr("\xE2\x9B\xB2\xEF\xB8\x8F", "", "fountain", new sliceType(["fountain"])), new emoji.ptr("\xF0\x9F\x8E\x91", "", "moon viewing ceremony", new sliceType(["rice_scene"])), new emoji.ptr("\xE2\x9B\xB0", "", "mountain", new sliceType(["mountain"])), new emoji.ptr("\xF0\x9F\x8F\x94", "", "snow-capped mountain", new sliceType(["mountain_snow"])), new emoji.ptr("\xF0\x9F\x97\xBB", "", "mount fuji", new sliceType(["mount_fuji"])), new emoji.ptr("\xF0\x9F\x8C\x8B", "", "volcano", new sliceType(["volcano"])), new emoji.ptr("\xF0\x9F\x97\xBE", "", "map of Japan", new sliceType(["japan"])), new emoji.ptr("\xF0\x9F\x8F\x95", "", "camping", new sliceType(["camping"])), new emoji.ptr("\xE2\x9B\xBA\xEF\xB8\x8F", "", "tent", new sliceType(["tent"])), new emoji.ptr("\xF0\x9F\x8F\x9E", "", "national park", new sliceType(["national_park"])), new emoji.ptr("\xF0\x9F\x9B\xA3", "", "motorway", new sliceType(["motorway"])), new emoji.ptr("\xF0\x9F\x9B\xA4", "", "railway track", new sliceType(["railway_track"])), new emoji.ptr("\xF0\x9F\x8C\x85", "", "sunrise", new sliceType(["sunrise"])), new emoji.ptr("\xF0\x9F\x8C\x84", "", "sunrise over mountains", new sliceType(["sunrise_over_mountains"])), new emoji.ptr("\xF0\x9F\x8F\x9C", "", "desert", new sliceType(["desert"])), new emoji.ptr("\xF0\x9F\x8F\x96", "", "beach with umbrella", new sliceType(["beach_umbrella"])), new emoji.ptr("\xF0\x9F\x8F\x9D", "", "desert island", new sliceType(["desert_island"])), new emoji.ptr("\xF0\x9F\x8C\x87", "", "sunset", new sliceType(["city_sunrise"])), new emoji.ptr("\xF0\x9F\x8C\x86", "", "cityscape at dusk", new sliceType(["city_sunset"])), new emoji.ptr("\xF0\x9F\x8F\x99", "", "cityscape", new sliceType(["cityscape"])), new emoji.ptr("\xF0\x9F\x8C\x83", "", "night with stars", new sliceType(["night_with_stars"])), new emoji.ptr("\xF0\x9F\x8C\x89", "", "bridge at night", new sliceType(["bridge_at_night"])), new emoji.ptr("\xF0\x9F\x8C\x8C", "", "milky way", new sliceType(["milky_way"])), new emoji.ptr("\xF0\x9F\x8C\xA0", "", "shooting star", new sliceType(["stars"])), new emoji.ptr("\xF0\x9F\x8E\x87", "", "sparkler", new sliceType(["sparkler"])), new emoji.ptr("\xF0\x9F\x8E\x86", "", "fireworks", new sliceType(["fireworks"])), new emoji.ptr("\xF0\x9F\x8C\x88", "", "rainbow", new sliceType(["rainbow"])), new emoji.ptr("\xF0\x9F\x8F\x98", "", "house", new sliceType(["houses"])), new emoji.ptr("\xF0\x9F\x8F\xB0", "", "castle", new sliceType(["european_castle"])), new emoji.ptr("\xF0\x9F\x8F\xAF", "", "Japanese castle", new sliceType(["japanese_castle"])), new emoji.ptr("\xF0\x9F\x8F\x9F", "", "stadium", new sliceType(["stadium"])), new emoji.ptr("\xF0\x9F\x97\xBD", "", "Statue of Liberty", new sliceType(["statue_of_liberty"])), new emoji.ptr("\xF0\x9F\x8F\xA0", "", "house", new sliceType(["house"])), new emoji.ptr("\xF0\x9F\x8F\xA1", "", "house with garden", new sliceType(["house_with_garden"])), new emoji.ptr("\xF0\x9F\x8F\x9A", "", "derelict house", new sliceType(["derelict_house"])), new emoji.ptr("\xF0\x9F\x8F\xA2", "", "office building", new sliceType(["office"])), new emoji.ptr("\xF0\x9F\x8F\xAC", "", "department store", new sliceType(["department_store"])), new emoji.ptr("\xF0\x9F\x8F\xA3", "", "Japanese post office", new sliceType(["post_office"])), new emoji.ptr("\xF0\x9F\x8F\xA4", "", "post office", new sliceType(["european_post_office"])), new emoji.ptr("\xF0\x9F\x8F\xA5", "", "hospital", new sliceType(["hospital"])), new emoji.ptr("\xF0\x9F\x8F\xA6", "", "bank", new sliceType(["bank"])), new emoji.ptr("\xF0\x9F\x8F\xA8", "", "hotel", new sliceType(["hotel"])), new emoji.ptr("\xF0\x9F\x8F\xAA", "", "convenience store", new sliceType(["convenience_store"])), new emoji.ptr("\xF0\x9F\x8F\xAB", "", "school", new sliceType(["school"])), new emoji.ptr("\xF0\x9F\x8F\xA9", "", "love hotel", new sliceType(["love_hotel"])), new emoji.ptr("\xF0\x9F\x92\x92", "", "wedding", new sliceType(["wedding"])), new emoji.ptr("\xF0\x9F\x8F\x9B", "", "classical building", new sliceType(["classical_building"])), new emoji.ptr("\xE2\x9B\xAA\xEF\xB8\x8F", "", "church", new sliceType(["church"])), new emoji.ptr("\xF0\x9F\x95\x8C", "", "mosque", new sliceType(["mosque"])), new emoji.ptr("\xF0\x9F\x95\x8D", "", "synagogue", new sliceType(["synagogue"])), new emoji.ptr("\xF0\x9F\x95\x8B", "", "kaaba", new sliceType(["kaaba"])), new emoji.ptr("\xE2\x9B\xA9", "", "shinto shrine", new sliceType(["shinto_shrine"])), new emoji.ptr("\xE2\x8C\x9A\xEF\xB8\x8F", "", "watch", new sliceType(["watch"])), new emoji.ptr("\xF0\x9F\x93\xB1", "", "mobile phone", new sliceType(["iphone"])), new emoji.ptr("\xF0\x9F\x93\xB2", "", "mobile phone with arrow", new sliceType(["calling"])), new emoji.ptr("\xF0\x9F\x92\xBB", "", "laptop computer", new sliceType(["computer"])), new emoji.ptr("\xE2\x8C\xA8\xEF\xB8\x8F", "", "keyboard", new sliceType(["keyboard"])), new emoji.ptr("\xF0\x9F\x96\xA5", "", "desktop computer", new sliceType(["desktop_computer"])), new emoji.ptr("\xF0\x9F\x96\xA8", "", "printer", new sliceType(["printer"])), new emoji.ptr("\xF0\x9F\x96\xB1", "", "computer mouse", new sliceType(["computer_mouse"])), new emoji.ptr("\xF0\x9F\x96\xB2", "", "trackball", new sliceType(["trackball"])), new emoji.ptr("\xF0\x9F\x95\xB9", "", "joystick", new sliceType(["joystick"])), new emoji.ptr("\xF0\x9F\x97\x9C", "", "clamp", new sliceType(["clamp"])), new emoji.ptr("\xF0\x9F\x92\xBD", "", "computer disk", new sliceType(["minidisc"])), new emoji.ptr("\xF0\x9F\x92\xBE", "", "floppy disk", new sliceType(["floppy_disk"])), new emoji.ptr("\xF0\x9F\x92\xBF", "", "optical disk", new sliceType(["cd"])), new emoji.ptr("\xF0\x9F\x93\x80", "", "dvd", new sliceType(["dvd"])), new emoji.ptr("\xF0\x9F\x93\xBC", "", "videocassette", new sliceType(["vhs"])), new emoji.ptr("\xF0\x9F\x93\xB7", "", "camera", new sliceType(["camera"])), new emoji.ptr("\xF0\x9F\x93\xB8", "", "camera with flash", new sliceType(["camera_flash"])), new emoji.ptr("\xF0\x9F\x93\xB9", "", "video camera", new sliceType(["video_camera"])), new emoji.ptr("\xF0\x9F\x8E\xA5", "", "movie camera", new sliceType(["movie_camera"])), new emoji.ptr("\xF0\x9F\x93\xBD", "", "film projector", new sliceType(["film_projector"])), new emoji.ptr("\xF0\x9F\x8E\x9E", "", "film frames", new sliceType(["film_strip"])), new emoji.ptr("\xF0\x9F\x93\x9E", "", "telephone receiver", new sliceType(["telephone_receiver"])), new emoji.ptr("\xE2\x98\x8E\xEF\xB8\x8F", "", "telephone", new sliceType(["phone", "telephone"])), new emoji.ptr("\xF0\x9F\x93\x9F", "", "pager", new sliceType(["pager"])), new emoji.ptr("\xF0\x9F\x93\xA0", "", "fax machine", new sliceType(["fax"])), new emoji.ptr("\xF0\x9F\x93\xBA", "", "television", new sliceType(["tv"])), new emoji.ptr("\xF0\x9F\x93\xBB", "", "radio", new sliceType(["radio"])), new emoji.ptr("\xF0\x9F\x8E\x99", "", "studio microphone", new sliceType(["studio_microphone"])), new emoji.ptr("\xF0\x9F\x8E\x9A", "", "level slider", new sliceType(["level_slider"])), new emoji.ptr("\xF0\x9F\x8E\x9B", "", "control knobs", new sliceType(["control_knobs"])), new emoji.ptr("\xE2\x8F\xB1", "", "stopwatch", new sliceType(["stopwatch"])), new emoji.ptr("\xE2\x8F\xB2", "", "timer clock", new sliceType(["timer_clock"])), new emoji.ptr("\xE2\x8F\xB0", "", "alarm clock", new sliceType(["alarm_clock"])), new emoji.ptr("\xF0\x9F\x95\xB0", "", "mantelpiece clock", new sliceType(["mantelpiece_clock"])), new emoji.ptr("\xE2\x8F\xB3", "", "hourglass with flowing sand", new sliceType(["hourglass_flowing_sand"])), new emoji.ptr("\xE2\x8C\x9B\xEF\xB8\x8F", "", "hourglass", new sliceType(["hourglass"])), new emoji.ptr("\xF0\x9F\x93\xA1", "", "satellite antenna", new sliceType(["satellite"])), new emoji.ptr("\xF0\x9F\x94\x8B", "", "battery", new sliceType(["battery"])), new emoji.ptr("\xF0\x9F\x94\x8C", "", "electric plug", new sliceType(["electric_plug"])), new emoji.ptr("\xF0\x9F\x92\xA1", "", "light bulb", new sliceType(["bulb"])), new emoji.ptr("\xF0\x9F\x94\xA6", "", "flashlight", new sliceType(["flashlight"])), new emoji.ptr("\xF0\x9F\x95\xAF", "", "candle", new sliceType(["candle"])), new emoji.ptr("\xF0\x9F\x97\x91", "", "wastebasket", new sliceType(["wastebasket"])), new emoji.ptr("\xF0\x9F\x9B\xA2", "", "oil drum", new sliceType(["oil_drum"])), new emoji.ptr("\xF0\x9F\x92\xB8", "", "money with wings", new sliceType(["money_with_wings"])), new emoji.ptr("\xF0\x9F\x92\xB5", "", "dollar banknote", new sliceType(["dollar"])), new emoji.ptr("\xF0\x9F\x92\xB4", "", "yen banknote", new sliceType(["yen"])), new emoji.ptr("\xF0\x9F\x92\xB6", "", "euro banknote", new sliceType(["euro"])), new emoji.ptr("\xF0\x9F\x92\xB7", "", "pound banknote", new sliceType(["pound"])), new emoji.ptr("\xF0\x9F\x92\xB0", "", "money bag", new sliceType(["moneybag"])), new emoji.ptr("\xF0\x9F\x92\xB3", "", "credit card", new sliceType(["credit_card"])), new emoji.ptr("\xF0\x9F\x92\x8E", "", "gem stone", new sliceType(["gem"])), new emoji.ptr("\xE2\x9A\x96", "", "balance scale", new sliceType(["balance_scale"])), new emoji.ptr("\xF0\x9F\x94\xA7", "", "wrench", new sliceType(["wrench"])), new emoji.ptr("\xF0\x9F\x94\xA8", "", "hammer", new sliceType(["hammer"])), new emoji.ptr("\xE2\x9A\x92", "", "hammer and pick", new sliceType(["hammer_and_pick"])), new emoji.ptr("\xF0\x9F\x9B\xA0", "", "hammer and wrench", new sliceType(["hammer_and_wrench"])), new emoji.ptr("\xE2\x9B\x8F", "", "pick", new sliceType(["pick"])), new emoji.ptr("\xF0\x9F\x94\xA9", "", "nut and bolt", new sliceType(["nut_and_bolt"])), new emoji.ptr("\xE2\x9A\x99", "", "gear", new sliceType(["gear"])), new emoji.ptr("\xE2\x9B\x93", "", "chains", new sliceType(["chains"])), new emoji.ptr("\xF0\x9F\x94\xAB", "", "pistol", new sliceType(["gun"])), new emoji.ptr("\xF0\x9F\x92\xA3", "", "bomb", new sliceType(["bomb"])), new emoji.ptr("\xF0\x9F\x94\xAA", "", "kitchen knife", new sliceType(["hocho", "knife"])), new emoji.ptr("\xF0\x9F\x97\xA1", "", "dagger", new sliceType(["dagger"])), new emoji.ptr("\xE2\x9A\x94", "", "crossed swords", new sliceType(["crossed_swords"])), new emoji.ptr("\xF0\x9F\x9B\xA1", "", "shield", new sliceType(["shield"])), new emoji.ptr("\xF0\x9F\x9A\xAC", "", "cigarette", new sliceType(["smoking"])), new emoji.ptr("\xE2\x9A\xB0", "", "coffin", new sliceType(["coffin"])), new emoji.ptr("\xE2\x9A\xB1", "", "funeral urn", new sliceType(["funeral_urn"])), new emoji.ptr("\xF0\x9F\x8F\xBA", "", "amphora", new sliceType(["amphora"])), new emoji.ptr("\xF0\x9F\x94\xAE", "", "crystal ball", new sliceType(["crystal_ball"])), new emoji.ptr("\xF0\x9F\x93\xBF", "", "prayer beads", new sliceType(["prayer_beads"])), new emoji.ptr("\xF0\x9F\x92\x88", "", "barber pole", new sliceType(["barber"])), new emoji.ptr("\xE2\x9A\x97", "", "alembic", new sliceType(["alembic"])), new emoji.ptr("\xF0\x9F\x94\xAD", "", "telescope", new sliceType(["telescope"])), new emoji.ptr("\xF0\x9F\x94\xAC", "", "microscope", new sliceType(["microscope"])), new emoji.ptr("\xF0\x9F\x95\xB3", "", "hole", new sliceType(["hole"])), new emoji.ptr("\xF0\x9F\x92\x8A", "", "pill", new sliceType(["pill"])), new emoji.ptr("\xF0\x9F\x92\x89", "", "syringe", new sliceType(["syringe"])), new emoji.ptr("\xF0\x9F\x8C\xA1", "", "thermometer", new sliceType(["thermometer"])), new emoji.ptr("\xF0\x9F\x9A\xBD", "", "toilet", new sliceType(["toilet"])), new emoji.ptr("\xF0\x9F\x9A\xBF", "", "shower", new sliceType(["shower"])), new emoji.ptr("\xF0\x9F\x9B\x81", "", "bathtub", new sliceType(["bathtub"])), new emoji.ptr("\xF0\x9F\x9B\x8E", "", "bellhop bell", new sliceType(["bellhop_bell"])), new emoji.ptr("\xF0\x9F\x94\x91", "", "key", new sliceType(["key"])), new emoji.ptr("\xF0\x9F\x97\x9D", "", "old key", new sliceType(["old_key"])), new emoji.ptr("\xF0\x9F\x9A\xAA", "", "door", new sliceType(["door"])), new emoji.ptr("\xF0\x9F\x9B\x8B", "", "couch and lamp", new sliceType(["couch_and_lamp"])), new emoji.ptr("\xF0\x9F\x9B\x8C", "", "person in bed", new sliceType(["sleeping_bed"])), new emoji.ptr("\xF0\x9F\x9B\x8F", "", "bed", new sliceType(["bed"])), new emoji.ptr("\xF0\x9F\x96\xBC", "", "framed picture", new sliceType(["framed_picture"])), new emoji.ptr("\xE2\x9B\xB1", "", "umbrella on ground", new sliceType(["parasol_on_ground"])), new emoji.ptr("\xF0\x9F\x97\xBF", "", "moai", new sliceType(["moyai"])), new emoji.ptr("\xF0\x9F\x9B\x8D", "", "shopping bags", new sliceType(["shopping"])), new emoji.ptr("\xF0\x9F\x8E\x81", "", "wrapped gift", new sliceType(["gift"])), new emoji.ptr("\xF0\x9F\x8E\x88", "", "balloon", new sliceType(["balloon"])), new emoji.ptr("\xF0\x9F\x8E\x8F", "", "carp streamer", new sliceType(["flags"])), new emoji.ptr("\xF0\x9F\x8E\x80", "", "ribbon", new sliceType(["ribbon"])), new emoji.ptr("\xF0\x9F\x8E\x8A", "", "confetti ball", new sliceType(["confetti_ball"])), new emoji.ptr("\xF0\x9F\x8E\x89", "", "party popper", new sliceType(["tada"])), new emoji.ptr("\xF0\x9F\x8E\x90", "", "wind chime", new sliceType(["wind_chime"])), new emoji.ptr("\xF0\x9F\x8F\xAE", "", "red paper lantern", new sliceType(["izakaya_lantern", "lantern"])), new emoji.ptr("\xF0\x9F\x8E\x8E", "", "Japanese dolls", new sliceType(["dolls"])), new emoji.ptr("\xE2\x9C\x89\xEF\xB8\x8F", "", "envelope", new sliceType(["email", "envelope"])), new emoji.ptr("\xF0\x9F\x93\xA9", "", "envelope with arrow", new sliceType(["envelope_with_arrow"])), new emoji.ptr("\xF0\x9F\x93\xA8", "", "incoming envelope", new sliceType(["incoming_envelope"])), new emoji.ptr("\xF0\x9F\x93\xA7", "", "e-mail", new sliceType(["e-mail"])), new emoji.ptr("\xF0\x9F\x92\x8C", "", "love letter", new sliceType(["love_letter"])), new emoji.ptr("\xF0\x9F\x93\xA5", "", "inbox tray", new sliceType(["inbox_tray"])), new emoji.ptr("\xF0\x9F\x93\xA4", "", "outbox tray", new sliceType(["outbox_tray"])), new emoji.ptr("\xF0\x9F\x93\xA6", "", "package", new sliceType(["package"])), new emoji.ptr("\xF0\x9F\x8F\xB7", "", "label", new sliceType(["label"])), new emoji.ptr("\xF0\x9F\x94\x96", "", "bookmark", new sliceType(["bookmark"])), new emoji.ptr("\xF0\x9F\x93\xAA", "", "closed mailbox with lowered flag", new sliceType(["mailbox_closed"])), new emoji.ptr("\xF0\x9F\x93\xAB", "", "closed mailbox with raised flag", new sliceType(["mailbox"])), new emoji.ptr("\xF0\x9F\x93\xAC", "", "open mailbox with raised flag", new sliceType(["mailbox_with_mail"])), new emoji.ptr("\xF0\x9F\x93\xAD", "", "open mailbox with lowered flag", new sliceType(["mailbox_with_no_mail"])), new emoji.ptr("\xF0\x9F\x93\xAE", "", "postbox", new sliceType(["postbox"])), new emoji.ptr("\xF0\x9F\x93\xAF", "", "postal horn", new sliceType(["postal_horn"])), new emoji.ptr("\xF0\x9F\x93\x9C", "", "scroll", new sliceType(["scroll"])), new emoji.ptr("\xF0\x9F\x93\x83", "", "page with curl", new sliceType(["page_with_curl"])), new emoji.ptr("\xF0\x9F\x93\x84", "", "page facing up", new sliceType(["page_facing_up"])), new emoji.ptr("\xF0\x9F\x93\x91", "", "bookmark tabs", new sliceType(["bookmark_tabs"])), new emoji.ptr("\xF0\x9F\x93\x8A", "", "bar chart", new sliceType(["bar_chart"])), new emoji.ptr("\xF0\x9F\x93\x88", "", "chart increasing", new sliceType(["chart_with_upwards_trend"])), new emoji.ptr("\xF0\x9F\x93\x89", "", "chart decreasing", new sliceType(["chart_with_downwards_trend"])), new emoji.ptr("\xF0\x9F\x97\x92", "", "spiral notepad", new sliceType(["spiral_notepad"])), new emoji.ptr("\xF0\x9F\x97\x93", "", "spiral calendar", new sliceType(["spiral_calendar"])), new emoji.ptr("\xF0\x9F\x93\x86", "", "tear-off calendar", new sliceType(["calendar"])), new emoji.ptr("\xF0\x9F\x93\x85", "", "calendar", new sliceType(["date"])), new emoji.ptr("\xF0\x9F\x93\x87", "", "card index", new sliceType(["card_index"])), new emoji.ptr("\xF0\x9F\x97\x83", "", "card file box", new sliceType(["card_file_box"])), new emoji.ptr("\xF0\x9F\x97\xB3", "", "ballot box with ballot", new sliceType(["ballot_box"])), new emoji.ptr("\xF0\x9F\x97\x84", "", "file cabinet", new sliceType(["file_cabinet"])), new emoji.ptr("\xF0\x9F\x93\x8B", "", "clipboard", new sliceType(["clipboard"])), new emoji.ptr("\xF0\x9F\x93\x81", "", "file folder", new sliceType(["file_folder"])), new emoji.ptr("\xF0\x9F\x93\x82", "", "open file folder", new sliceType(["open_file_folder"])), new emoji.ptr("\xF0\x9F\x97\x82", "", "card index dividers", new sliceType(["card_index_dividers"])), new emoji.ptr("\xF0\x9F\x97\x9E", "", "rolled-up newspaper", new sliceType(["newspaper_roll"])), new emoji.ptr("\xF0\x9F\x93\xB0", "", "newspaper", new sliceType(["newspaper"])), new emoji.ptr("\xF0\x9F\x93\x93", "", "notebook", new sliceType(["notebook"])), new emoji.ptr("\xF0\x9F\x93\x94", "", "notebook with decorative cover", new sliceType(["notebook_with_decorative_cover"])), new emoji.ptr("\xF0\x9F\x93\x92", "", "ledger", new sliceType(["ledger"])), new emoji.ptr("\xF0\x9F\x93\x95", "", "closed book", new sliceType(["closed_book"])), new emoji.ptr("\xF0\x9F\x93\x97", "", "green book", new sliceType(["green_book"])), new emoji.ptr("\xF0\x9F\x93\x98", "", "blue book", new sliceType(["blue_book"])), new emoji.ptr("\xF0\x9F\x93\x99", "", "orange book", new sliceType(["orange_book"])), new emoji.ptr("\xF0\x9F\x93\x9A", "", "books", new sliceType(["books"])), new emoji.ptr("\xF0\x9F\x93\x96", "", "open book", new sliceType(["book", "open_book"])), new emoji.ptr("\xF0\x9F\x94\x97", "", "link", new sliceType(["link"])), new emoji.ptr("\xF0\x9F\x93\x8E", "", "paperclip", new sliceType(["paperclip"])), new emoji.ptr("\xF0\x9F\x96\x87", "", "linked paperclips", new sliceType(["paperclips"])), new emoji.ptr("\xF0\x9F\x93\x90", "", "triangular ruler", new sliceType(["triangular_ruler"])), new emoji.ptr("\xF0\x9F\x93\x8F", "", "straight ruler", new sliceType(["straight_ruler"])), new emoji.ptr("\xE2\x9C\x82\xEF\xB8\x8F", "", "scissors", new sliceType(["scissors"])), new emoji.ptr("\xF0\x9F\x93\x8C", "", "pushpin", new sliceType(["pushpin"])), new emoji.ptr("\xF0\x9F\x93\x8D", "", "round pushpin", new sliceType(["round_pushpin"])), new emoji.ptr("\xF0\x9F\x9A\xA9", "", "triangular flag", new sliceType(["triangular_flag_on_post"])), new emoji.ptr("\xF0\x9F\x8E\x8C", "", "crossed flags", new sliceType(["crossed_flags"])), new emoji.ptr("\xF0\x9F\x8F\xB3\xEF\xB8\x8F", "", "white flag", new sliceType(["white_flag"])), new emoji.ptr("\xF0\x9F\x8F\xB4", "", "black flag", new sliceType(["black_flag"])), new emoji.ptr("\xF0\x9F\x8F\x81", "", "chequered flag", new sliceType(["checkered_flag"])), new emoji.ptr("\xF0\x9F\x8F\xB3\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x8C\x88", "", "rainbow flag", new sliceType(["rainbow_flag"])), new emoji.ptr("\xF0\x9F\x96\x8C", "", "paintbrush", new sliceType(["paintbrush"])), new emoji.ptr("\xF0\x9F\x96\x8D", "", "crayon", new sliceType(["crayon"])), new emoji.ptr("\xF0\x9F\x96\x8A", "", "pen", new sliceType(["pen"])), new emoji.ptr("\xF0\x9F\x96\x8B", "", "fountain pen", new sliceType(["fountain_pen"])), new emoji.ptr("\xE2\x9C\x92\xEF\xB8\x8F", "", "black nib", new sliceType(["black_nib"])), new emoji.ptr("\xF0\x9F\x93\x9D", "", "memo", new sliceType(["memo", "pencil"])), new emoji.ptr("\xE2\x9C\x8F\xEF\xB8\x8F", "", "pencil", new sliceType(["pencil2"])), new emoji.ptr("\xF0\x9F\x94\x8F", "", "locked with pen", new sliceType(["lock_with_ink_pen"])), new emoji.ptr("\xF0\x9F\x94\x90", "", "locked with key", new sliceType(["closed_lock_with_key"])), new emoji.ptr("\xF0\x9F\x94\x92", "", "locked", new sliceType(["lock"])), new emoji.ptr("\xF0\x9F\x94\x93", "", "unlocked", new sliceType(["unlock"])), new emoji.ptr("\xF0\x9F\x94\x8D", "", "left-pointing magnifying glass", new sliceType(["mag"])), new emoji.ptr("\xF0\x9F\x94\x8E", "", "right-pointing magnifying glass", new sliceType(["mag_right"])), new emoji.ptr("\xE2\x9D\xA4\xEF\xB8\x8F", "", "red heart", new sliceType(["heart"])), new emoji.ptr("\xF0\x9F\x92\x9B", "", "yellow heart", new sliceType(["yellow_heart"])), new emoji.ptr("\xF0\x9F\x92\x9A", "", "green heart", new sliceType(["green_heart"])), new emoji.ptr("\xF0\x9F\x92\x99", "", "blue heart", new sliceType(["blue_heart"])), new emoji.ptr("\xF0\x9F\x92\x9C", "", "purple heart", new sliceType(["purple_heart"])), new emoji.ptr("\xF0\x9F\x92\x94", "", "broken heart", new sliceType(["broken_heart"])), new emoji.ptr("\xE2\x9D\xA3\xEF\xB8\x8F", "", "heavy heart exclamation", new sliceType(["heavy_heart_exclamation"])), new emoji.ptr("\xF0\x9F\x92\x95", "", "two hearts", new sliceType(["two_hearts"])), new emoji.ptr("\xF0\x9F\x92\x9E", "", "revolving hearts", new sliceType(["revolving_hearts"])), new emoji.ptr("\xF0\x9F\x92\x93", "", "beating heart", new sliceType(["heartbeat"])), new emoji.ptr("\xF0\x9F\x92\x97", "", "growing heart", new sliceType(["heartpulse"])), new emoji.ptr("\xF0\x9F\x92\x96", "", "sparkling heart", new sliceType(["sparkling_heart"])), new emoji.ptr("\xF0\x9F\x92\x98", "", "heart with arrow", new sliceType(["cupid"])), new emoji.ptr("\xF0\x9F\x92\x9D", "", "heart with ribbon", new sliceType(["gift_heart"])), new emoji.ptr("\xF0\x9F\x92\x9F", "", "heart decoration", new sliceType(["heart_decoration"])), new emoji.ptr("\xE2\x98\xAE\xEF\xB8\x8F", "", "peace symbol", new sliceType(["peace_symbol"])), new emoji.ptr("\xE2\x9C\x9D\xEF\xB8\x8F", "", "latin cross", new sliceType(["latin_cross"])), new emoji.ptr("\xE2\x98\xAA\xEF\xB8\x8F", "", "star and crescent", new sliceType(["star_and_crescent"])), new emoji.ptr("\xF0\x9F\x95\x89", "", "om", new sliceType(["om"])), new emoji.ptr("\xE2\x98\xB8\xEF\xB8\x8F", "", "wheel of dharma", new sliceType(["wheel_of_dharma"])), new emoji.ptr("\xE2\x9C\xA1\xEF\xB8\x8F", "", "star of David", new sliceType(["star_of_david"])), new emoji.ptr("\xF0\x9F\x94\xAF", "", "dotted six-pointed star", new sliceType(["six_pointed_star"])), new emoji.ptr("\xF0\x9F\x95\x8E", "", "menorah", new sliceType(["menorah"])), new emoji.ptr("\xE2\x98\xAF\xEF\xB8\x8F", "", "yin yang", new sliceType(["yin_yang"])), new emoji.ptr("\xE2\x98\xA6\xEF\xB8\x8F", "", "orthodox cross", new sliceType(["orthodox_cross"])), new emoji.ptr("\xF0\x9F\x9B\x90", "", "place of worship", new sliceType(["place_of_worship"])), new emoji.ptr("\xE2\x9B\x8E", "", "Ophiuchus", new sliceType(["ophiuchus"])), new emoji.ptr("\xE2\x99\x88\xEF\xB8\x8F", "", "Aries", new sliceType(["aries"])), new emoji.ptr("\xE2\x99\x89\xEF\xB8\x8F", "", "Taurus", new sliceType(["taurus"])), new emoji.ptr("\xE2\x99\x8A\xEF\xB8\x8F", "", "Gemini", new sliceType(["gemini"])), new emoji.ptr("\xE2\x99\x8B\xEF\xB8\x8F", "", "Cancer", new sliceType(["cancer"])), new emoji.ptr("\xE2\x99\x8C\xEF\xB8\x8F", "", "Leo", new sliceType(["leo"])), new emoji.ptr("\xE2\x99\x8D\xEF\xB8\x8F", "", "Virgo", new sliceType(["virgo"])), new emoji.ptr("\xE2\x99\x8E\xEF\xB8\x8F", "", "Libra", new sliceType(["libra"])), new emoji.ptr("\xE2\x99\x8F\xEF\xB8\x8F", "", "Scorpius", new sliceType(["scorpius"])), new emoji.ptr("\xE2\x99\x90\xEF\xB8\x8F", "", "Sagittarius", new sliceType(["sagittarius"])), new emoji.ptr("\xE2\x99\x91\xEF\xB8\x8F", "", "Capricorn", new sliceType(["capricorn"])), new emoji.ptr("\xE2\x99\x92\xEF\xB8\x8F", "", "Aquarius", new sliceType(["aquarius"])), new emoji.ptr("\xE2\x99\x93\xEF\xB8\x8F", "", "Pisces", new sliceType(["pisces"])), new emoji.ptr("\xF0\x9F\x86\x94", "", "ID button", new sliceType(["id"])), new emoji.ptr("\xE2\x9A\x9B", "", "atom symbol", new sliceType(["atom_symbol"])), new emoji.ptr("\xF0\x9F\x88\xB3", "", "Japanese \xE2\x80\x9Cvacancy\xE2\x80\x9D button", new sliceType(["u7a7a"])), new emoji.ptr("\xF0\x9F\x88\xB9", "", "Japanese \xE2\x80\x9Cdiscount\xE2\x80\x9D button", new sliceType(["u5272"])), new emoji.ptr("\xE2\x98\xA2\xEF\xB8\x8F", "", "radioactive", new sliceType(["radioactive"])), new emoji.ptr("\xE2\x98\xA3\xEF\xB8\x8F", "", "biohazard", new sliceType(["biohazard"])), new emoji.ptr("\xF0\x9F\x93\xB4", "", "mobile phone off", new sliceType(["mobile_phone_off"])), new emoji.ptr("\xF0\x9F\x93\xB3", "", "vibration mode", new sliceType(["vibration_mode"])), new emoji.ptr("\xF0\x9F\x88\xB6", "", "Japanese \xE2\x80\x9Cnot free of charge\xE2\x80\x9D button", new sliceType(["u6709"])), new emoji.ptr("\xF0\x9F\x88\x9A\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Cfree of charge\xE2\x80\x9D button", new sliceType(["u7121"])), new emoji.ptr("\xF0\x9F\x88\xB8", "", "Japanese \xE2\x80\x9Capplication\xE2\x80\x9D button", new sliceType(["u7533"])), new emoji.ptr("\xF0\x9F\x88\xBA", "", "Japanese \xE2\x80\x9Copen for business\xE2\x80\x9D button", new sliceType(["u55b6"])), new emoji.ptr("\xF0\x9F\x88\xB7\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Cmonthly amount\xE2\x80\x9D button", new sliceType(["u6708"])), new emoji.ptr("\xE2\x9C\xB4\xEF\xB8\x8F", "", "eight-pointed star", new sliceType(["eight_pointed_black_star"])), new emoji.ptr("\xF0\x9F\x86\x9A", "", "VS button", new sliceType(["vs"])), new emoji.ptr("\xF0\x9F\x89\x91", "", "Japanese \xE2\x80\x9Cacceptable\xE2\x80\x9D button", new sliceType(["accept"])), new emoji.ptr("\xF0\x9F\x92\xAE", "", "white flower", new sliceType(["white_flower"])), new emoji.ptr("\xF0\x9F\x89\x90", "", "Japanese \xE2\x80\x9Cbargain\xE2\x80\x9D button", new sliceType(["ideograph_advantage"])), new emoji.ptr("\xE3\x8A\x99\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Csecret\xE2\x80\x9D button", new sliceType(["secret"])), new emoji.ptr("\xE3\x8A\x97\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Ccongratulations\xE2\x80\x9D button", new sliceType(["congratulations"])), new emoji.ptr("\xF0\x9F\x88\xB4", "", "Japanese \xE2\x80\x9Cpassing grade\xE2\x80\x9D button", new sliceType(["u5408"])), new emoji.ptr("\xF0\x9F\x88\xB5", "", "Japanese \xE2\x80\x9Cno vacancy\xE2\x80\x9D button", new sliceType(["u6e80"])), new emoji.ptr("\xF0\x9F\x88\xB2", "", "Japanese \xE2\x80\x9Cprohibited\xE2\x80\x9D button", new sliceType(["u7981"])), new emoji.ptr("\xF0\x9F\x85\xB0\xEF\xB8\x8F", "", "A button (blood type)", new sliceType(["a"])), new emoji.ptr("\xF0\x9F\x85\xB1\xEF\xB8\x8F", "", "B button (blood type)", new sliceType(["b"])), new emoji.ptr("\xF0\x9F\x86\x8E", "", "AB button (blood type)", new sliceType(["ab"])), new emoji.ptr("\xF0\x9F\x86\x91", "", "CL button", new sliceType(["cl"])), new emoji.ptr("\xF0\x9F\x85\xBE\xEF\xB8\x8F", "", "O button (blood type)", new sliceType(["o2"])), new emoji.ptr("\xF0\x9F\x86\x98", "", "SOS button", new sliceType(["sos"])), new emoji.ptr("\xE2\x9B\x94\xEF\xB8\x8F", "", "no entry", new sliceType(["no_entry"])), new emoji.ptr("\xF0\x9F\x93\x9B", "", "name badge", new sliceType(["name_badge"])), new emoji.ptr("\xF0\x9F\x9A\xAB", "", "prohibited", new sliceType(["no_entry_sign"])), new emoji.ptr("\xE2\x9D\x8C", "", "cross mark", new sliceType(["x"])), new emoji.ptr("\xE2\xAD\x95\xEF\xB8\x8F", "", "heavy large circle", new sliceType(["o"])), new emoji.ptr("\xF0\x9F\x92\xA2", "", "anger symbol", new sliceType(["anger"])), new emoji.ptr("\xE2\x99\xA8\xEF\xB8\x8F", "", "hot springs", new sliceType(["hotsprings"])), new emoji.ptr("\xF0\x9F\x9A\xB7", "", "no pedestrians", new sliceType(["no_pedestrians"])), new emoji.ptr("\xF0\x9F\x9A\xAF", "", "no littering", new sliceType(["do_not_litter"])), new emoji.ptr("\xF0\x9F\x9A\xB3", "", "no bicycles", new sliceType(["no_bicycles"])), new emoji.ptr("\xF0\x9F\x9A\xB1", "", "non-potable water", new sliceType(["non-potable_water"])), new emoji.ptr("\xF0\x9F\x94\x9E", "", "no one under eighteen", new sliceType(["underage"])), new emoji.ptr("\xF0\x9F\x93\xB5", "", "no mobile phones", new sliceType(["no_mobile_phones"])), new emoji.ptr("\xE2\x9D\x97\xEF\xB8\x8F", "", "exclamation mark", new sliceType(["exclamation", "heavy_exclamation_mark"])), new emoji.ptr("\xE2\x9D\x95", "", "white exclamation mark", new sliceType(["grey_exclamation"])), new emoji.ptr("\xE2\x9D\x93", "", "question mark", new sliceType(["question"])), new emoji.ptr("\xE2\x9D\x94", "", "white question mark", new sliceType(["grey_question"])), new emoji.ptr("\xE2\x80\xBC\xEF\xB8\x8F", "", "double exclamation mark", new sliceType(["bangbang"])), new emoji.ptr("\xE2\x81\x89\xEF\xB8\x8F", "", "exclamation question mark", new sliceType(["interrobang"])), new emoji.ptr("\xF0\x9F\x92\xAF", "", "hundred points", new sliceType(["100"])), new emoji.ptr("\xF0\x9F\x94\x85", "", "dim button", new sliceType(["low_brightness"])), new emoji.ptr("\xF0\x9F\x94\x86", "", "bright button", new sliceType(["high_brightness"])), new emoji.ptr("\xF0\x9F\x94\xB1", "", "trident emblem", new sliceType(["trident"])), new emoji.ptr("\xE2\x9A\x9C", "", "fleur-de-lis", new sliceType(["fleur_de_lis"])), new emoji.ptr("\xE3\x80\xBD\xEF\xB8\x8F", "", "part alternation mark", new sliceType(["part_alternation_mark"])), new emoji.ptr("\xE2\x9A\xA0\xEF\xB8\x8F", "", "warning", new sliceType(["warning"])), new emoji.ptr("\xF0\x9F\x9A\xB8", "", "children crossing", new sliceType(["children_crossing"])), new emoji.ptr("\xF0\x9F\x94\xB0", "", "Japanese symbol for beginner", new sliceType(["beginner"])), new emoji.ptr("\xE2\x99\xBB\xEF\xB8\x8F", "", "recycling symbol", new sliceType(["recycle"])), new emoji.ptr("\xF0\x9F\x88\xAF\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Creserved\xE2\x80\x9D button", new sliceType(["u6307"])), new emoji.ptr("\xF0\x9F\x92\xB9", "", "chart increasing with yen", new sliceType(["chart"])), new emoji.ptr("\xE2\x9D\x87\xEF\xB8\x8F", "", "sparkle", new sliceType(["sparkle"])), new emoji.ptr("\xE2\x9C\xB3\xEF\xB8\x8F", "", "eight-spoked asterisk", new sliceType(["eight_spoked_asterisk"])), new emoji.ptr("\xE2\x9D\x8E", "", "cross mark button", new sliceType(["negative_squared_cross_mark"])), new emoji.ptr("\xE2\x9C\x85", "", "white heavy check mark", new sliceType(["white_check_mark"])), new emoji.ptr("\xF0\x9F\x8C\x90", "", "globe with meridians", new sliceType(["globe_with_meridians"])), new emoji.ptr("\xE2\x93\x82\xEF\xB8\x8F", "", "circled M", new sliceType(["m"])), new emoji.ptr("\xF0\x9F\x92\xA0", "", "diamond with a dot", new sliceType(["diamond_shape_with_a_dot_inside"])), new emoji.ptr("\xF0\x9F\x8C\x80", "", "cyclone", new sliceType(["cyclone"])), new emoji.ptr("\xE2\x9E\xBF", "", "double curly loop", new sliceType(["loop"])), new emoji.ptr("\xF0\x9F\x8F\xA7", "", "ATM sign", new sliceType(["atm"])), new emoji.ptr("\xF0\x9F\x88\x82\xEF\xB8\x8F", "", "Japanese \xE2\x80\x9Cservice charge\xE2\x80\x9D button", new sliceType(["sa"])), new emoji.ptr("\xF0\x9F\x9B\x82", "", "passport control", new sliceType(["passport_control"])), new emoji.ptr("\xF0\x9F\x9B\x83", "", "customs", new sliceType(["customs"])), new emoji.ptr("\xF0\x9F\x9B\x84", "", "baggage claim", new sliceType(["baggage_claim"])), new emoji.ptr("\xF0\x9F\x9B\x85", "", "left luggage", new sliceType(["left_luggage"])), new emoji.ptr("\xE2\x99\xBF\xEF\xB8\x8F", "", "wheelchair symbol", new sliceType(["wheelchair"])), new emoji.ptr("\xF0\x9F\x9A\xAD", "", "no smoking", new sliceType(["no_smoking"])), new emoji.ptr("\xF0\x9F\x9A\xBE", "", "water closet", new sliceType(["wc"])), new emoji.ptr("\xF0\x9F\x85\xBF\xEF\xB8\x8F", "", "P button", new sliceType(["parking"])), new emoji.ptr("\xF0\x9F\x9A\xB0", "", "potable water", new sliceType(["potable_water"])), new emoji.ptr("\xF0\x9F\x9A\xB9", "", "men\xE2\x80\x99s room", new sliceType(["mens"])), new emoji.ptr("\xF0\x9F\x9A\xBA", "", "women\xE2\x80\x99s room", new sliceType(["womens"])), new emoji.ptr("\xF0\x9F\x9A\xBC", "", "baby symbol", new sliceType(["baby_symbol"])), new emoji.ptr("\xF0\x9F\x9A\xBB", "", "restroom", new sliceType(["restroom"])), new emoji.ptr("\xF0\x9F\x9A\xAE", "", "litter in bin sign", new sliceType(["put_litter_in_its_place"])), new emoji.ptr("\xF0\x9F\x8E\xA6", "", "cinema", new sliceType(["cinema"])), new emoji.ptr("\xF0\x9F\x93\xB6", "", "antenna bars", new sliceType(["signal_strength"])), new emoji.ptr("\xF0\x9F\x88\x81", "", "Japanese \xE2\x80\x9Chere\xE2\x80\x9D button", new sliceType(["koko"])), new emoji.ptr("\xF0\x9F\x94\xA4", "", "input latin letters", new sliceType(["abc"])), new emoji.ptr("\xF0\x9F\x94\xA1", "", "input latin lowercase", new sliceType(["abcd"])), new emoji.ptr("\xF0\x9F\x94\xA0", "", "input latin uppercase", new sliceType(["capital_abcd"])), new emoji.ptr("\xF0\x9F\x94\xA3", "", "input symbols", new sliceType(["symbols"])), new emoji.ptr("\xE2\x84\xB9\xEF\xB8\x8F", "", "information", new sliceType(["information_source"])), new emoji.ptr("\xF0\x9F\x86\x96", "", "NG button", new sliceType(["ng"])), new emoji.ptr("\xF0\x9F\x86\x97", "", "OK button", new sliceType(["ok"])), new emoji.ptr("\xF0\x9F\x86\x99", "", "UP! button", new sliceType(["up"])), new emoji.ptr("\xF0\x9F\x86\x92", "", "COOL button", new sliceType(["cool"])), new emoji.ptr("\xF0\x9F\x86\x95", "", "NEW button", new sliceType(["new"])), new emoji.ptr("\xF0\x9F\x86\x93", "", "FREE button", new sliceType(["free"])), new emoji.ptr("0\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 0", new sliceType(["zero"])), new emoji.ptr("1\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 1", new sliceType(["one"])), new emoji.ptr("2\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 2", new sliceType(["two"])), new emoji.ptr("3\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 3", new sliceType(["three"])), new emoji.ptr("4\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 4", new sliceType(["four"])), new emoji.ptr("5\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 5", new sliceType(["five"])), new emoji.ptr("6\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 6", new sliceType(["six"])), new emoji.ptr("7\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 7", new sliceType(["seven"])), new emoji.ptr("8\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 8", new sliceType(["eight"])), new emoji.ptr("9\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: 9", new sliceType(["nine"])), new emoji.ptr("\xF0\x9F\x94\x9F", "", "keycap 10", new sliceType(["keycap_ten"])), new emoji.ptr("\xF0\x9F\x94\xA2", "", "input numbers", new sliceType(["1234"])), new emoji.ptr("#\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: #", new sliceType(["hash"])), new emoji.ptr("*\xEF\xB8\x8F\xE2\x83\xA3", "", "keycap: *", new sliceType(["asterisk"])), new emoji.ptr("\xE2\x96\xB6\xEF\xB8\x8F", "", "play button", new sliceType(["arrow_forward"])), new emoji.ptr("\xE2\x8F\xB8", "", "pause button", new sliceType(["pause_button"])), new emoji.ptr("\xE2\x8F\xAF", "", "play or pause button", new sliceType(["play_or_pause_button"])), new emoji.ptr("\xE2\x8F\xB9", "", "stop button", new sliceType(["stop_button"])), new emoji.ptr("\xE2\x8F\xBA", "", "record button", new sliceType(["record_button"])), new emoji.ptr("\xE2\x8F\xAD", "", "next track button", new sliceType(["next_track_button"])), new emoji.ptr("\xE2\x8F\xAE", "", "last track button", new sliceType(["previous_track_button"])), new emoji.ptr("\xE2\x8F\xA9", "", "fast-forward button", new sliceType(["fast_forward"])), new emoji.ptr("\xE2\x8F\xAA", "", "fast reverse button", new sliceType(["rewind"])), new emoji.ptr("\xE2\x8F\xAB", "", "fast up button", new sliceType(["arrow_double_up"])), new emoji.ptr("\xE2\x8F\xAC", "", "fast down button", new sliceType(["arrow_double_down"])), new emoji.ptr("\xE2\x97\x80\xEF\xB8\x8F", "", "reverse button", new sliceType(["arrow_backward"])), new emoji.ptr("\xF0\x9F\x94\xBC", "", "up button", new sliceType(["arrow_up_small"])), new emoji.ptr("\xF0\x9F\x94\xBD", "", "down button", new sliceType(["arrow_down_small"])), new emoji.ptr("\xE2\x9E\xA1\xEF\xB8\x8F", "", "right arrow", new sliceType(["arrow_right"])), new emoji.ptr("\xE2\xAC\x85\xEF\xB8\x8F", "", "left arrow", new sliceType(["arrow_left"])), new emoji.ptr("\xE2\xAC\x86\xEF\xB8\x8F", "", "up arrow", new sliceType(["arrow_up"])), new emoji.ptr("\xE2\xAC\x87\xEF\xB8\x8F", "", "down arrow", new sliceType(["arrow_down"])), new emoji.ptr("\xE2\x86\x97\xEF\xB8\x8F", "", "up-right arrow", new sliceType(["arrow_upper_right"])), new emoji.ptr("\xE2\x86\x98\xEF\xB8\x8F", "", "down-right arrow", new sliceType(["arrow_lower_right"])), new emoji.ptr("\xE2\x86\x99\xEF\xB8\x8F", "", "down-left arrow", new sliceType(["arrow_lower_left"])), new emoji.ptr("\xE2\x86\x96\xEF\xB8\x8F", "", "up-left arrow", new sliceType(["arrow_upper_left"])), new emoji.ptr("\xE2\x86\x95\xEF\xB8\x8F", "", "up-down arrow", new sliceType(["arrow_up_down"])), new emoji.ptr("\xE2\x86\x94\xEF\xB8\x8F", "", "left-right arrow", new sliceType(["left_right_arrow"])), new emoji.ptr("\xE2\x86\xAA\xEF\xB8\x8F", "", "left arrow curving right", new sliceType(["arrow_right_hook"])), new emoji.ptr("\xE2\x86\xA9\xEF\xB8\x8F", "", "right arrow curving left", new sliceType(["leftwards_arrow_with_hook"])), new emoji.ptr("\xE2\xA4\xB4\xEF\xB8\x8F", "", "right arrow curving up", new sliceType(["arrow_heading_up"])), new emoji.ptr("\xE2\xA4\xB5\xEF\xB8\x8F", "", "right arrow curving down", new sliceType(["arrow_heading_down"])), new emoji.ptr("\xF0\x9F\x94\x80", "", "shuffle tracks button", new sliceType(["twisted_rightwards_arrows"])), new emoji.ptr("\xF0\x9F\x94\x81", "", "repeat button", new sliceType(["repeat"])), new emoji.ptr("\xF0\x9F\x94\x82", "", "repeat single button", new sliceType(["repeat_one"])), new emoji.ptr("\xF0\x9F\x94\x84", "", "anticlockwise arrows button", new sliceType(["arrows_counterclockwise"])), new emoji.ptr("\xF0\x9F\x94\x83", "", "clockwise vertical arrows", new sliceType(["arrows_clockwise"])), new emoji.ptr("\xF0\x9F\x8E\xB5", "", "musical note", new sliceType(["musical_note"])), new emoji.ptr("\xF0\x9F\x8E\xB6", "", "musical notes", new sliceType(["notes"])), new emoji.ptr("\xE3\x80\xB0\xEF\xB8\x8F", "", "wavy dash", new sliceType(["wavy_dash"])), new emoji.ptr("\xE2\x9E\xB0", "", "curly loop", new sliceType(["curly_loop"])), new emoji.ptr("\xE2\x9C\x94\xEF\xB8\x8F", "", "heavy check mark", new sliceType(["heavy_check_mark"])), new emoji.ptr("\xE2\x9E\x95", "", "heavy plus sign", new sliceType(["heavy_plus_sign"])), new emoji.ptr("\xE2\x9E\x96", "", "heavy minus sign", new sliceType(["heavy_minus_sign"])), new emoji.ptr("\xE2\x9E\x97", "", "heavy division sign", new sliceType(["heavy_division_sign"])), new emoji.ptr("\xE2\x9C\x96\xEF\xB8\x8F", "", "heavy multiplication x", new sliceType(["heavy_multiplication_x"])), new emoji.ptr("\xF0\x9F\x92\xB2", "", "heavy dollar sign", new sliceType(["heavy_dollar_sign"])), new emoji.ptr("\xF0\x9F\x92\xB1", "", "currency exchange", new sliceType(["currency_exchange"])), new emoji.ptr("\xE2\x84\xA2\xEF\xB8\x8F", "", "trade mark", new sliceType(["tm"])), new emoji.ptr("\xC2\xA9\xEF\xB8\x8F", "", "copyright", new sliceType(["copyright"])), new emoji.ptr("\xC2\xAE\xEF\xB8\x8F", "", "registered", new sliceType(["registered"])), new emoji.ptr("\xF0\x9F\x94\x9A", "", "END arrow", new sliceType(["end"])), new emoji.ptr("\xF0\x9F\x94\x99", "", "BACK arrow", new sliceType(["back"])), new emoji.ptr("\xF0\x9F\x94\x9B", "", "ON! arrow", new sliceType(["on"])), new emoji.ptr("\xF0\x9F\x94\x9D", "", "TOP arrow", new sliceType(["top"])), new emoji.ptr("\xF0\x9F\x94\x9C", "", "SOON arrow", new sliceType(["soon"])), new emoji.ptr("\xE2\x98\x91\xEF\xB8\x8F", "", "ballot box with check", new sliceType(["ballot_box_with_check"])), new emoji.ptr("\xF0\x9F\x94\x98", "", "radio button", new sliceType(["radio_button"])), new emoji.ptr("\xE2\x9A\xAA\xEF\xB8\x8F", "", "white circle", new sliceType(["white_circle"])), new emoji.ptr("\xE2\x9A\xAB\xEF\xB8\x8F", "", "black circle", new sliceType(["black_circle"])), new emoji.ptr("\xF0\x9F\x94\xB4", "", "red circle", new sliceType(["red_circle"])), new emoji.ptr("\xF0\x9F\x94\xB5", "", "blue circle", new sliceType(["large_blue_circle"])), new emoji.ptr("\xF0\x9F\x94\xBA", "", "red triangle pointed up", new sliceType(["small_red_triangle"])), new emoji.ptr("\xF0\x9F\x94\xBB", "", "red triangle pointed down", new sliceType(["small_red_triangle_down"])), new emoji.ptr("\xF0\x9F\x94\xB8", "", "small orange diamond", new sliceType(["small_orange_diamond"])), new emoji.ptr("\xF0\x9F\x94\xB9", "", "small blue diamond", new sliceType(["small_blue_diamond"])), new emoji.ptr("\xF0\x9F\x94\xB6", "", "large orange diamond", new sliceType(["large_orange_diamond"])), new emoji.ptr("\xF0\x9F\x94\xB7", "", "large blue diamond", new sliceType(["large_blue_diamond"])), new emoji.ptr("\xF0\x9F\x94\xB3", "", "white square button", new sliceType(["white_square_button"])), new emoji.ptr("\xF0\x9F\x94\xB2", "", "black square button", new sliceType(["black_square_button"])), new emoji.ptr("\xE2\x96\xAA\xEF\xB8\x8F", "", "black small square", new sliceType(["black_small_square"])), new emoji.ptr("\xE2\x96\xAB\xEF\xB8\x8F", "", "white small square", new sliceType(["white_small_square"])), new emoji.ptr("\xE2\x97\xBE\xEF\xB8\x8F", "", "black medium-small square", new sliceType(["black_medium_small_square"])), new emoji.ptr("\xE2\x97\xBD\xEF\xB8\x8F", "", "white medium-small square", new sliceType(["white_medium_small_square"])), new emoji.ptr("\xE2\x97\xBC\xEF\xB8\x8F", "", "black medium square", new sliceType(["black_medium_square"])), new emoji.ptr("\xE2\x97\xBB\xEF\xB8\x8F", "", "white medium square", new sliceType(["white_medium_square"])), new emoji.ptr("\xE2\xAC\x9B\xEF\xB8\x8F", "", "black large square", new sliceType(["black_large_square"])), new emoji.ptr("\xE2\xAC\x9C\xEF\xB8\x8F", "", "white large square", new sliceType(["white_large_square"])), new emoji.ptr("\xF0\x9F\x94\x87", "", "muted speaker", new sliceType(["mute"])), new emoji.ptr("\xF0\x9F\x94\x88", "", "speaker low volume", new sliceType(["speaker"])), new emoji.ptr("\xF0\x9F\x94\x89", "", "speaker medium volume", new sliceType(["sound"])), new emoji.ptr("\xF0\x9F\x94\x8A", "", "speaker high volume", new sliceType(["loud_sound"])), new emoji.ptr("\xF0\x9F\x94\x95", "", "bell with slash", new sliceType(["no_bell"])), new emoji.ptr("\xF0\x9F\x94\x94", "", "bell", new sliceType(["bell"])), new emoji.ptr("\xF0\x9F\x93\xA3", "", "megaphone", new sliceType(["mega"])), new emoji.ptr("\xF0\x9F\x93\xA2", "", "loudspeaker", new sliceType(["loudspeaker"])), new emoji.ptr("\xF0\x9F\x91\x81\xE2\x80\x8D\xF0\x9F\x97\xA8", "", "eye in speech bubble", new sliceType(["eye_speech_bubble"])), new emoji.ptr("\xF0\x9F\x92\xAC", "", "speech balloon", new sliceType(["speech_balloon"])), new emoji.ptr("\xF0\x9F\x92\xAD", "", "thought balloon", new sliceType(["thought_balloon"])), new emoji.ptr("\xF0\x9F\x97\xAF", "", "right anger bubble", new sliceType(["right_anger_bubble"])), new emoji.ptr("\xF0\x9F\x83\x8F", "", "joker", new sliceType(["black_joker"])), new emoji.ptr("\xF0\x9F\x80\x84\xEF\xB8\x8F", "", "mahjong red dragon", new sliceType(["mahjong"])), new emoji.ptr("\xF0\x9F\x8E\xB4", "", "flower playing cards", new sliceType(["flower_playing_cards"])), new emoji.ptr("\xE2\x99\xA0\xEF\xB8\x8F", "", "spade suit", new sliceType(["spades"])), new emoji.ptr("\xE2\x99\xA3\xEF\xB8\x8F", "", "club suit", new sliceType(["clubs"])), new emoji.ptr("\xE2\x99\xA5\xEF\xB8\x8F", "", "heart suit", new sliceType(["hearts"])), new emoji.ptr("\xE2\x99\xA6\xEF\xB8\x8F", "", "diamond suit", new sliceType(["diamonds"])), new emoji.ptr("\xF0\x9F\x95\x90", "", "one o\xE2\x80\x99clock", new sliceType(["clock1"])), new emoji.ptr("\xF0\x9F\x95\x91", "", "two o\xE2\x80\x99clock", new sliceType(["clock2"])), new emoji.ptr("\xF0\x9F\x95\x92", "", "three o\xE2\x80\x99clock", new sliceType(["clock3"])), new emoji.ptr("\xF0\x9F\x95\x93", "", "four o\xE2\x80\x99clock", new sliceType(["clock4"])), new emoji.ptr("\xF0\x9F\x95\x94", "", "five o\xE2\x80\x99clock", new sliceType(["clock5"])), new emoji.ptr("\xF0\x9F\x95\x95", "", "six o\xE2\x80\x99clock", new sliceType(["clock6"])), new emoji.ptr("\xF0\x9F\x95\x96", "", "seven o\xE2\x80\x99clock", new sliceType(["clock7"])), new emoji.ptr("\xF0\x9F\x95\x97", "", "eight o\xE2\x80\x99clock", new sliceType(["clock8"])), new emoji.ptr("\xF0\x9F\x95\x98", "", "nine o\xE2\x80\x99clock", new sliceType(["clock9"])), new emoji.ptr("\xF0\x9F\x95\x99", "", "ten o\xE2\x80\x99clock", new sliceType(["clock10"])), new emoji.ptr("\xF0\x9F\x95\x9A", "", "eleven o\xE2\x80\x99clock", new sliceType(["clock11"])), new emoji.ptr("\xF0\x9F\x95\x9B", "", "twelve o\xE2\x80\x99clock", new sliceType(["clock12"])), new emoji.ptr("\xF0\x9F\x95\x9C", "", "one-thirty", new sliceType(["clock130"])), new emoji.ptr("\xF0\x9F\x95\x9D", "", "two-thirty", new sliceType(["clock230"])), new emoji.ptr("\xF0\x9F\x95\x9E", "", "three-thirty", new sliceType(["clock330"])), new emoji.ptr("\xF0\x9F\x95\x9F", "", "four-thirty", new sliceType(["clock430"])), new emoji.ptr("\xF0\x9F\x95\xA0", "", "five-thirty", new sliceType(["clock530"])), new emoji.ptr("\xF0\x9F\x95\xA1", "", "six-thirty", new sliceType(["clock630"])), new emoji.ptr("\xF0\x9F\x95\xA2", "", "seven-thirty", new sliceType(["clock730"])), new emoji.ptr("\xF0\x9F\x95\xA3", "", "eight-thirty", new sliceType(["clock830"])), new emoji.ptr("\xF0\x9F\x95\xA4", "", "nine-thirty", new sliceType(["clock930"])), new emoji.ptr("\xF0\x9F\x95\xA5", "", "ten-thirty", new sliceType(["clock1030"])), new emoji.ptr("\xF0\x9F\x95\xA6", "", "eleven-thirty", new sliceType(["clock1130"])), new emoji.ptr("\xF0\x9F\x95\xA7", "", "twelve-thirty", new sliceType(["clock1230"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xAB", "", "Afghanistan", new sliceType(["afghanistan"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xBD", "", "\xC3\x85land Islands", new sliceType(["aland_islands"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB1", "", "Albania", new sliceType(["albania"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xBF", "", "Algeria", new sliceType(["algeria"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB8", "", "American Samoa", new sliceType(["american_samoa"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xA9", "", "Andorra", new sliceType(["andorra"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB4", "", "Angola", new sliceType(["angola"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xAE", "", "Anguilla", new sliceType(["anguilla"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB6", "", "Antarctica", new sliceType(["antarctica"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xAC", "", "Antigua & Barbuda", new sliceType(["antigua_barbuda"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB7", "", "Argentina", new sliceType(["argentina"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB2", "", "Armenia", new sliceType(["armenia"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xBC", "", "Aruba", new sliceType(["aruba"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xBA", "", "Australia", new sliceType(["australia"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xB9", "", "Austria", new sliceType(["austria"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xBF", "", "Azerbaijan", new sliceType(["azerbaijan"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB8", "", "Bahamas", new sliceType(["bahamas"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAD", "", "Bahrain", new sliceType(["bahrain"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xA9", "", "Bangladesh", new sliceType(["bangladesh"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xA7", "", "Barbados", new sliceType(["barbados"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xBE", "", "Belarus", new sliceType(["belarus"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAA", "", "Belgium", new sliceType(["belgium"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xBF", "", "Belize", new sliceType(["belize"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAF", "", "Benin", new sliceType(["benin"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB2", "", "Bermuda", new sliceType(["bermuda"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB9", "", "Bhutan", new sliceType(["bhutan"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB4", "", "Bolivia", new sliceType(["bolivia"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB6", "", "Caribbean Netherlands", new sliceType(["caribbean_netherlands"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xA6", "", "Bosnia & Herzegovina", new sliceType(["bosnia_herzegovina"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xBC", "", "Botswana", new sliceType(["botswana"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB7", "", "Brazil", new sliceType(["brazil"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB4", "", "British Indian Ocean Territory", new sliceType(["british_indian_ocean_territory"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xAC", "", "British Virgin Islands", new sliceType(["british_virgin_islands"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB3", "", "Brunei", new sliceType(["brunei"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAC", "", "Bulgaria", new sliceType(["bulgaria"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAB", "", "Burkina Faso", new sliceType(["burkina_faso"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xAE", "", "Burundi", new sliceType(["burundi"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBB", "", "Cape Verde", new sliceType(["cape_verde"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xAD", "", "Cambodia", new sliceType(["cambodia"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB2", "", "Cameroon", new sliceType(["cameroon"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xA6", "", "Canada", new sliceType(["canada"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xA8", "", "Canary Islands", new sliceType(["canary_islands"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xBE", "", "Cayman Islands", new sliceType(["cayman_islands"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xAB", "", "Central African Republic", new sliceType(["central_african_republic"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xA9", "", "Chad", new sliceType(["chad"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB1", "", "Chile", new sliceType(["chile"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB3", "", "China", new sliceType(["cn"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBD", "", "Christmas Island", new sliceType(["christmas_island"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xA8", "", "Cocos (Keeling) Islands", new sliceType(["cocos_islands"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB4", "", "Colombia", new sliceType(["colombia"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xB2", "", "Comoros", new sliceType(["comoros"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xAC", "", "Congo - Brazzaville", new sliceType(["congo_brazzaville"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xA9", "", "Congo - Kinshasa", new sliceType(["congo_kinshasa"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB0", "", "Cook Islands", new sliceType(["cook_islands"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xB7", "", "Costa Rica", new sliceType(["costa_rica"])), new emoji.ptr("\xF0\x9F\x87\xAD\xF0\x9F\x87\xB7", "", "Croatia", new sliceType(["croatia"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBA", "", "Cuba", new sliceType(["cuba"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBC", "", "Cura\xC3\xA7ao", new sliceType(["curacao"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBE", "", "Cyprus", new sliceType(["cyprus"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xBF", "", "Czech Republic", new sliceType(["czech_republic"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xB0", "", "Denmark", new sliceType(["denmark"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xAF", "", "Djibouti", new sliceType(["djibouti"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xB2", "", "Dominica", new sliceType(["dominica"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xB4", "", "Dominican Republic", new sliceType(["dominican_republic"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xA8", "", "Ecuador", new sliceType(["ecuador"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xAC", "", "Egypt", new sliceType(["egypt"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xBB", "", "El Salvador", new sliceType(["el_salvador"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB6", "", "Equatorial Guinea", new sliceType(["equatorial_guinea"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xB7", "", "Eritrea", new sliceType(["eritrea"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xAA", "", "Estonia", new sliceType(["estonia"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xB9", "", "Ethiopia", new sliceType(["ethiopia"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xBA", "", "European Union", new sliceType(["eu", "european_union"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xB0", "", "Falkland Islands", new sliceType(["falkland_islands"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xB4", "", "Faroe Islands", new sliceType(["faroe_islands"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xAF", "", "Fiji", new sliceType(["fiji"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xAE", "", "Finland", new sliceType(["finland"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xB7", "", "France", new sliceType(["fr"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xAB", "", "French Guiana", new sliceType(["french_guiana"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xAB", "", "French Polynesia", new sliceType(["french_polynesia"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xAB", "", "French Southern Territories", new sliceType(["french_southern_territories"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xA6", "", "Gabon", new sliceType(["gabon"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB2", "", "Gambia", new sliceType(["gambia"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xAA", "", "Georgia", new sliceType(["georgia"])), new emoji.ptr("\xF0\x9F\x87\xA9\xF0\x9F\x87\xAA", "", "Germany", new sliceType(["de"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xAD", "", "Ghana", new sliceType(["ghana"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xAE", "", "Gibraltar", new sliceType(["gibraltar"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB7", "", "Greece", new sliceType(["greece"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB1", "", "Greenland", new sliceType(["greenland"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xA9", "", "Grenada", new sliceType(["grenada"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB5", "", "Guadeloupe", new sliceType(["guadeloupe"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xBA", "", "Guam", new sliceType(["guam"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB9", "", "Guatemala", new sliceType(["guatemala"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xAC", "", "Guernsey", new sliceType(["guernsey"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB3", "", "Guinea", new sliceType(["guinea"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xBC", "", "Guinea-Bissau", new sliceType(["guinea_bissau"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xBE", "", "Guyana", new sliceType(["guyana"])), new emoji.ptr("\xF0\x9F\x87\xAD\xF0\x9F\x87\xB9", "", "Haiti", new sliceType(["haiti"])), new emoji.ptr("\xF0\x9F\x87\xAD\xF0\x9F\x87\xB3", "", "Honduras", new sliceType(["honduras"])), new emoji.ptr("\xF0\x9F\x87\xAD\xF0\x9F\x87\xB0", "", "Hong Kong SAR China", new sliceType(["hong_kong"])), new emoji.ptr("\xF0\x9F\x87\xAD\xF0\x9F\x87\xBA", "", "Hungary", new sliceType(["hungary"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB8", "", "Iceland", new sliceType(["iceland"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB3", "", "India", new sliceType(["india"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xA9", "", "Indonesia", new sliceType(["indonesia"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB7", "", "Iran", new sliceType(["iran"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB6", "", "Iraq", new sliceType(["iraq"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xAA", "", "Ireland", new sliceType(["ireland"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB2", "", "Isle of Man", new sliceType(["isle_of_man"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB1", "", "Israel", new sliceType(["israel"])), new emoji.ptr("\xF0\x9F\x87\xAE\xF0\x9F\x87\xB9", "", "Italy", new sliceType(["it"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xAE", "", "C\xC3\xB4te d\xE2\x80\x99Ivoire", new sliceType(["cote_divoire"])), new emoji.ptr("\xF0\x9F\x87\xAF\xF0\x9F\x87\xB2", "", "Jamaica", new sliceType(["jamaica"])), new emoji.ptr("\xF0\x9F\x87\xAF\xF0\x9F\x87\xB5", "", "Japan", new sliceType(["jp"])), new emoji.ptr("\xF0\x9F\x87\xAF\xF0\x9F\x87\xAA", "", "Jersey", new sliceType(["jersey"])), new emoji.ptr("\xF0\x9F\x87\xAF\xF0\x9F\x87\xB4", "", "Jordan", new sliceType(["jordan"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xBF", "", "Kazakhstan", new sliceType(["kazakhstan"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xAA", "", "Kenya", new sliceType(["kenya"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xAE", "", "Kiribati", new sliceType(["kiribati"])), new emoji.ptr("\xF0\x9F\x87\xBD\xF0\x9F\x87\xB0", "", "Kosovo", new sliceType(["kosovo"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xBC", "", "Kuwait", new sliceType(["kuwait"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xAC", "", "Kyrgyzstan", new sliceType(["kyrgyzstan"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xA6", "", "Laos", new sliceType(["laos"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xBB", "", "Latvia", new sliceType(["latvia"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xA7", "", "Lebanon", new sliceType(["lebanon"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xB8", "", "Lesotho", new sliceType(["lesotho"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xB7", "", "Liberia", new sliceType(["liberia"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xBE", "", "Libya", new sliceType(["libya"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xAE", "", "Liechtenstein", new sliceType(["liechtenstein"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xB9", "", "Lithuania", new sliceType(["lithuania"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xBA", "", "Luxembourg", new sliceType(["luxembourg"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB4", "", "Macau SAR China", new sliceType(["macau"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB0", "", "Macedonia", new sliceType(["macedonia"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xAC", "", "Madagascar", new sliceType(["madagascar"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBC", "", "Malawi", new sliceType(["malawi"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBE", "", "Malaysia", new sliceType(["malaysia"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBB", "", "Maldives", new sliceType(["maldives"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB1", "", "Mali", new sliceType(["mali"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB9", "", "Malta", new sliceType(["malta"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xAD", "", "Marshall Islands", new sliceType(["marshall_islands"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB6", "", "Martinique", new sliceType(["martinique"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB7", "", "Mauritania", new sliceType(["mauritania"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBA", "", "Mauritius", new sliceType(["mauritius"])), new emoji.ptr("\xF0\x9F\x87\xBE\xF0\x9F\x87\xB9", "", "Mayotte", new sliceType(["mayotte"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBD", "", "Mexico", new sliceType(["mexico"])), new emoji.ptr("\xF0\x9F\x87\xAB\xF0\x9F\x87\xB2", "", "Micronesia", new sliceType(["micronesia"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xA9", "", "Moldova", new sliceType(["moldova"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xA8", "", "Monaco", new sliceType(["monaco"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB3", "", "Mongolia", new sliceType(["mongolia"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xAA", "", "Montenegro", new sliceType(["montenegro"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB8", "", "Montserrat", new sliceType(["montserrat"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xA6", "", "Morocco", new sliceType(["morocco"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xBF", "", "Mozambique", new sliceType(["mozambique"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB2", "", "Myanmar (Burma)", new sliceType(["myanmar"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xA6", "", "Namibia", new sliceType(["namibia"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xB7", "", "Nauru", new sliceType(["nauru"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xB5", "", "Nepal", new sliceType(["nepal"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xB1", "", "Netherlands", new sliceType(["netherlands"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xA8", "", "New Caledonia", new sliceType(["new_caledonia"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xBF", "", "New Zealand", new sliceType(["new_zealand"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xAE", "", "Nicaragua", new sliceType(["nicaragua"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xAA", "", "Niger", new sliceType(["niger"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xAC", "", "Nigeria", new sliceType(["nigeria"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xBA", "", "Niue", new sliceType(["niue"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xAB", "", "Norfolk Island", new sliceType(["norfolk_island"])), new emoji.ptr("\xF0\x9F\x87\xB2\xF0\x9F\x87\xB5", "", "Northern Mariana Islands", new sliceType(["northern_mariana_islands"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xB5", "", "North Korea", new sliceType(["north_korea"])), new emoji.ptr("\xF0\x9F\x87\xB3\xF0\x9F\x87\xB4", "", "Norway", new sliceType(["norway"])), new emoji.ptr("\xF0\x9F\x87\xB4\xF0\x9F\x87\xB2", "", "Oman", new sliceType(["oman"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB0", "", "Pakistan", new sliceType(["pakistan"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xBC", "", "Palau", new sliceType(["palau"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB8", "", "Palestinian Territories", new sliceType(["palestinian_territories"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xA6", "", "Panama", new sliceType(["panama"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xAC", "", "Papua New Guinea", new sliceType(["papua_new_guinea"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xBE", "", "Paraguay", new sliceType(["paraguay"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xAA", "", "Peru", new sliceType(["peru"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xAD", "", "Philippines", new sliceType(["philippines"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB3", "", "Pitcairn Islands", new sliceType(["pitcairn_islands"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB1", "", "Poland", new sliceType(["poland"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB9", "", "Portugal", new sliceType(["portugal"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB7", "", "Puerto Rico", new sliceType(["puerto_rico"])), new emoji.ptr("\xF0\x9F\x87\xB6\xF0\x9F\x87\xA6", "", "Qatar", new sliceType(["qatar"])), new emoji.ptr("\xF0\x9F\x87\xB7\xF0\x9F\x87\xAA", "", "R\xC3\xA9union", new sliceType(["reunion"])), new emoji.ptr("\xF0\x9F\x87\xB7\xF0\x9F\x87\xB4", "", "Romania", new sliceType(["romania"])), new emoji.ptr("\xF0\x9F\x87\xB7\xF0\x9F\x87\xBA", "", "Russia", new sliceType(["ru"])), new emoji.ptr("\xF0\x9F\x87\xB7\xF0\x9F\x87\xBC", "", "Rwanda", new sliceType(["rwanda"])), new emoji.ptr("\xF0\x9F\x87\xA7\xF0\x9F\x87\xB1", "", "St. Barth\xC3\xA9lemy", new sliceType(["st_barthelemy"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xAD", "", "St. Helena", new sliceType(["st_helena"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xB3", "", "St. Kitts & Nevis", new sliceType(["st_kitts_nevis"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xA8", "", "St. Lucia", new sliceType(["st_lucia"])), new emoji.ptr("\xF0\x9F\x87\xB5\xF0\x9F\x87\xB2", "", "St. Pierre & Miquelon", new sliceType(["st_pierre_miquelon"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xA8", "", "St. Vincent & Grenadines", new sliceType(["st_vincent_grenadines"])), new emoji.ptr("\xF0\x9F\x87\xBC\xF0\x9F\x87\xB8", "", "Samoa", new sliceType(["samoa"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB2", "", "San Marino", new sliceType(["san_marino"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB9", "", "S\xC3\xA3o Tom\xC3\xA9 & Pr\xC3\xADncipe", new sliceType(["sao_tome_principe"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xA6", "", "Saudi Arabia", new sliceType(["saudi_arabia"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB3", "", "Senegal", new sliceType(["senegal"])), new emoji.ptr("\xF0\x9F\x87\xB7\xF0\x9F\x87\xB8", "", "Serbia", new sliceType(["serbia"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xA8", "", "Seychelles", new sliceType(["seychelles"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB1", "", "Sierra Leone", new sliceType(["sierra_leone"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xAC", "", "Singapore", new sliceType(["singapore"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xBD", "", "Sint Maarten", new sliceType(["sint_maarten"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB0", "", "Slovakia", new sliceType(["slovakia"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xAE", "", "Slovenia", new sliceType(["slovenia"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xA7", "", "Solomon Islands", new sliceType(["solomon_islands"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB4", "", "Somalia", new sliceType(["somalia"])), new emoji.ptr("\xF0\x9F\x87\xBF\xF0\x9F\x87\xA6", "", "South Africa", new sliceType(["south_africa"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xB8", "", "South Georgia & South Sandwich Islands", new sliceType(["south_georgia_south_sandwich_islands"])), new emoji.ptr("\xF0\x9F\x87\xB0\xF0\x9F\x87\xB7", "", "South Korea", new sliceType(["kr"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB8", "", "South Sudan", new sliceType(["south_sudan"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xB8", "", "Spain", new sliceType(["es"])), new emoji.ptr("\xF0\x9F\x87\xB1\xF0\x9F\x87\xB0", "", "Sri Lanka", new sliceType(["sri_lanka"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xA9", "", "Sudan", new sliceType(["sudan"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xB7", "", "Suriname", new sliceType(["suriname"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xBF", "", "Swaziland", new sliceType(["swaziland"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xAA", "", "Sweden", new sliceType(["sweden"])), new emoji.ptr("\xF0\x9F\x87\xA8\xF0\x9F\x87\xAD", "", "Switzerland", new sliceType(["switzerland"])), new emoji.ptr("\xF0\x9F\x87\xB8\xF0\x9F\x87\xBE", "", "Syria", new sliceType(["syria"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xBC", "", "Taiwan", new sliceType(["taiwan"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xAF", "", "Tajikistan", new sliceType(["tajikistan"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xBF", "", "Tanzania", new sliceType(["tanzania"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xAD", "", "Thailand", new sliceType(["thailand"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB1", "", "Timor-Leste", new sliceType(["timor_leste"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xAC", "", "Togo", new sliceType(["togo"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB0", "", "Tokelau", new sliceType(["tokelau"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB4", "", "Tonga", new sliceType(["tonga"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB9", "", "Trinidad & Tobago", new sliceType(["trinidad_tobago"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB3", "", "Tunisia", new sliceType(["tunisia"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB7", "", "Turkey", new sliceType(["tr"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xB2", "", "Turkmenistan", new sliceType(["turkmenistan"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xA8", "", "Turks & Caicos Islands", new sliceType(["turks_caicos_islands"])), new emoji.ptr("\xF0\x9F\x87\xB9\xF0\x9F\x87\xBB", "", "Tuvalu", new sliceType(["tuvalu"])), new emoji.ptr("\xF0\x9F\x87\xBA\xF0\x9F\x87\xAC", "", "Uganda", new sliceType(["uganda"])), new emoji.ptr("\xF0\x9F\x87\xBA\xF0\x9F\x87\xA6", "", "Ukraine", new sliceType(["ukraine"])), new emoji.ptr("\xF0\x9F\x87\xA6\xF0\x9F\x87\xAA", "", "United Arab Emirates", new sliceType(["united_arab_emirates"])), new emoji.ptr("\xF0\x9F\x87\xAC\xF0\x9F\x87\xA7", "", "United Kingdom", new sliceType(["gb", "uk"])), new emoji.ptr("\xF0\x9F\x87\xBA\xF0\x9F\x87\xB8", "", "United States", new sliceType(["us"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xAE", "", "U.S. Virgin Islands", new sliceType(["us_virgin_islands"])), new emoji.ptr("\xF0\x9F\x87\xBA\xF0\x9F\x87\xBE", "", "Uruguay", new sliceType(["uruguay"])), new emoji.ptr("\xF0\x9F\x87\xBA\xF0\x9F\x87\xBF", "", "Uzbekistan", new sliceType(["uzbekistan"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xBA", "", "Vanuatu", new sliceType(["vanuatu"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xA6", "", "Vatican City", new sliceType(["vatican_city"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xAA", "", "Venezuela", new sliceType(["venezuela"])), new emoji.ptr("\xF0\x9F\x87\xBB\xF0\x9F\x87\xB3", "", "Vietnam", new sliceType(["vietnam"])), new emoji.ptr("\xF0\x9F\x87\xBC\xF0\x9F\x87\xAB", "", "Wallis & Futuna", new sliceType(["wallis_futuna"])), new emoji.ptr("\xF0\x9F\x87\xAA\xF0\x9F\x87\xAD", "", "Western Sahara", new sliceType(["western_sahara"])), new emoji.ptr("\xF0\x9F\x87\xBE\xF0\x9F\x87\xAA", "", "Yemen", new sliceType(["yemen"])), new emoji.ptr("\xF0\x9F\x87\xBF\xF0\x9F\x87\xB2", "", "Zambia", new sliceType(["zambia"])), new emoji.ptr("\xF0\x9F\x87\xBF\xF0\x9F\x87\xBC", "", "Zimbabwe", new sliceType(["zimbabwe"]))]);
		categories = new sliceType(["Activity", "Flags", "Foods", "Nature", "Objects", "People", "Places", "Symbols"]);
		byCategory = new sliceType$2([new sliceType$1([allEmoji[448], allEmoji[449], allEmoji[450], allEmoji[451], allEmoji[452], allEmoji[453], allEmoji[454], allEmoji[455], allEmoji[456], allEmoji[457], allEmoji[458], allEmoji[459], allEmoji[460], allEmoji[461], allEmoji[462], allEmoji[463], allEmoji[464], allEmoji[465], allEmoji[466], allEmoji[467], allEmoji[468], allEmoji[469], allEmoji[470], allEmoji[471], allEmoji[472], allEmoji[473], allEmoji[474], allEmoji[475], allEmoji[476], allEmoji[477], allEmoji[478], allEmoji[479], allEmoji[480], allEmoji[481], allEmoji[482], allEmoji[483], allEmoji[484], allEmoji[485], allEmoji[486], allEmoji[487], allEmoji[488], allEmoji[489], allEmoji[490], allEmoji[491], allEmoji[492], allEmoji[493], allEmoji[494], allEmoji[495], allEmoji[496], allEmoji[497], allEmoji[498], allEmoji[499], allEmoji[500], allEmoji[501], allEmoji[502], allEmoji[503], allEmoji[504], allEmoji[505], allEmoji[506], allEmoji[507], allEmoji[508], allEmoji[509], allEmoji[510], allEmoji[511]]), new sliceType$1([allEmoji[1074], allEmoji[1075], allEmoji[1076], allEmoji[1077], allEmoji[1078], allEmoji[1079], allEmoji[1080], allEmoji[1081], allEmoji[1082], allEmoji[1083], allEmoji[1084], allEmoji[1085], allEmoji[1086], allEmoji[1087], allEmoji[1088], allEmoji[1089], allEmoji[1090], allEmoji[1091], allEmoji[1092], allEmoji[1093], allEmoji[1094], allEmoji[1095], allEmoji[1096], allEmoji[1097], allEmoji[1098], allEmoji[1099], allEmoji[1100], allEmoji[1101], allEmoji[1102], allEmoji[1103], allEmoji[1104], allEmoji[1105], allEmoji[1106], allEmoji[1107], allEmoji[1108], allEmoji[1109], allEmoji[1110], allEmoji[1111], allEmoji[1112], allEmoji[1113], allEmoji[1114], allEmoji[1115], allEmoji[1116], allEmoji[1117], allEmoji[1118], allEmoji[1119], allEmoji[1120], allEmoji[1121], allEmoji[1122], allEmoji[1123], allEmoji[1124], allEmoji[1125], allEmoji[1126], allEmoji[1127], allEmoji[1128], allEmoji[1129], allEmoji[1130], allEmoji[1131], allEmoji[1132], allEmoji[1133], allEmoji[1134], allEmoji[1135], allEmoji[1136], allEmoji[1137], allEmoji[1138], allEmoji[1139], allEmoji[1140], allEmoji[1141], allEmoji[1142], allEmoji[1143], allEmoji[1144], allEmoji[1145], allEmoji[1146], allEmoji[1147], allEmoji[1148], allEmoji[1149], allEmoji[1150], allEmoji[1151], allEmoji[1152], allEmoji[1153], allEmoji[1154], allEmoji[1155], allEmoji[1156], allEmoji[1157], allEmoji[1158], allEmoji[1159], allEmoji[1160], allEmoji[1161], allEmoji[1162], allEmoji[1163], allEmoji[1164], allEmoji[1165], allEmoji[1166], allEmoji[1167], allEmoji[1168], allEmoji[1169], allEmoji[1170], allEmoji[1171], allEmoji[1172], allEmoji[1173], allEmoji[1174], allEmoji[1175], allEmoji[1176], allEmoji[1177], allEmoji[1178], allEmoji[1179], allEmoji[1180], allEmoji[1181], allEmoji[1182], allEmoji[1183], allEmoji[1184], allEmoji[1185], allEmoji[1186], allEmoji[1187], allEmoji[1188], allEmoji[1189], allEmoji[1190], allEmoji[1191], allEmoji[1192], allEmoji[1193], allEmoji[1194], allEmoji[1195], allEmoji[1196], allEmoji[1197], allEmoji[1198], allEmoji[1199], allEmoji[1200], allEmoji[1201], allEmoji[1202], allEmoji[1203], allEmoji[1204], allEmoji[1205], allEmoji[1206], allEmoji[1207], allEmoji[1208], allEmoji[1209], allEmoji[1210], allEmoji[1211], allEmoji[1212], allEmoji[1213], allEmoji[1214], allEmoji[1215], allEmoji[1216], allEmoji[1217], allEmoji[1218], allEmoji[1219], allEmoji[1220], allEmoji[1221], allEmoji[1222], allEmoji[1223], allEmoji[1224], allEmoji[1225], allEmoji[1226], allEmoji[1227], allEmoji[1228], allEmoji[1229], allEmoji[1230], allEmoji[1231], allEmoji[1232], allEmoji[1233], allEmoji[1234], allEmoji[1235], allEmoji[1236], allEmoji[1237], allEmoji[1238], allEmoji[1239], allEmoji[1240], allEmoji[1241], allEmoji[1242], allEmoji[1243], allEmoji[1244], allEmoji[1245], allEmoji[1246], allEmoji[1247], allEmoji[1248], allEmoji[1249], allEmoji[1250], allEmoji[1251], allEmoji[1252], allEmoji[1253], allEmoji[1254], allEmoji[1255], allEmoji[1256], allEmoji[1257], allEmoji[1258], allEmoji[1259], allEmoji[1260], allEmoji[1261], allEmoji[1262], allEmoji[1263], allEmoji[1264], allEmoji[1265], allEmoji[1266], allEmoji[1267], allEmoji[1268], allEmoji[1269], allEmoji[1270], allEmoji[1271], allEmoji[1272], allEmoji[1273], allEmoji[1274], allEmoji[1275], allEmoji[1276], allEmoji[1277], allEmoji[1278], allEmoji[1279], allEmoji[1280], allEmoji[1281], allEmoji[1282], allEmoji[1283], allEmoji[1284], allEmoji[1285], allEmoji[1286], allEmoji[1287], allEmoji[1288], allEmoji[1289], allEmoji[1290], allEmoji[1291], allEmoji[1292], allEmoji[1293], allEmoji[1294], allEmoji[1295], allEmoji[1296], allEmoji[1297], allEmoji[1298], allEmoji[1299], allEmoji[1300], allEmoji[1301], allEmoji[1302], allEmoji[1303], allEmoji[1304], allEmoji[1305], allEmoji[1306], allEmoji[1307], allEmoji[1308], allEmoji[1309], allEmoji[1310], allEmoji[1311], allEmoji[1312], allEmoji[1313], allEmoji[1314], allEmoji[1315], allEmoji[1316], allEmoji[1317], allEmoji[1318], allEmoji[1319], allEmoji[1320]]), new sliceType$1([allEmoji[381], allEmoji[382], allEmoji[383], allEmoji[384], allEmoji[385], allEmoji[386], allEmoji[387], allEmoji[388], allEmoji[389], allEmoji[390], allEmoji[391], allEmoji[392], allEmoji[393], allEmoji[394], allEmoji[395], allEmoji[396], allEmoji[397], allEmoji[398], allEmoji[399], allEmoji[400], allEmoji[401], allEmoji[402], allEmoji[403], allEmoji[404], allEmoji[405], allEmoji[406], allEmoji[407], allEmoji[408], allEmoji[409], allEmoji[410], allEmoji[411], allEmoji[412], allEmoji[413], allEmoji[414], allEmoji[415], allEmoji[416], allEmoji[417], allEmoji[418], allEmoji[419], allEmoji[420], allEmoji[421], allEmoji[422], allEmoji[423], allEmoji[424], allEmoji[425], allEmoji[426], allEmoji[427], allEmoji[428], allEmoji[429], allEmoji[430], allEmoji[431], allEmoji[432], allEmoji[433], allEmoji[434], allEmoji[435], allEmoji[436], allEmoji[437], allEmoji[438], allEmoji[439], allEmoji[440], allEmoji[441], allEmoji[442], allEmoji[443], allEmoji[444], allEmoji[445], allEmoji[446], allEmoji[447]]), new sliceType$1([allEmoji[234], allEmoji[235], allEmoji[236], allEmoji[237], allEmoji[238], allEmoji[239], allEmoji[240], allEmoji[241], allEmoji[242], allEmoji[243], allEmoji[244], allEmoji[245], allEmoji[246], allEmoji[247], allEmoji[248], allEmoji[249], allEmoji[250], allEmoji[251], allEmoji[252], allEmoji[253], allEmoji[254], allEmoji[255], allEmoji[256], allEmoji[257], allEmoji[258], allEmoji[259], allEmoji[260], allEmoji[261], allEmoji[262], allEmoji[263], allEmoji[264], allEmoji[265], allEmoji[266], allEmoji[267], allEmoji[268], allEmoji[269], allEmoji[270], allEmoji[271], allEmoji[272], allEmoji[273], allEmoji[274], allEmoji[275], allEmoji[276], allEmoji[277], allEmoji[278], allEmoji[279], allEmoji[280], allEmoji[281], allEmoji[282], allEmoji[283], allEmoji[284], allEmoji[285], allEmoji[286], allEmoji[287], allEmoji[288], allEmoji[289], allEmoji[290], allEmoji[291], allEmoji[292], allEmoji[293], allEmoji[294], allEmoji[295], allEmoji[296], allEmoji[297], allEmoji[298], allEmoji[299], allEmoji[300], allEmoji[301], allEmoji[302], allEmoji[303], allEmoji[304], allEmoji[305], allEmoji[306], allEmoji[307], allEmoji[308], allEmoji[309], allEmoji[310], allEmoji[311], allEmoji[312], allEmoji[313], allEmoji[314], allEmoji[315], allEmoji[316], allEmoji[317], allEmoji[318], allEmoji[319], allEmoji[320], allEmoji[321], allEmoji[322], allEmoji[323], allEmoji[324], allEmoji[325], allEmoji[326], allEmoji[327], allEmoji[328], allEmoji[329], allEmoji[330], allEmoji[331], allEmoji[332], allEmoji[333], allEmoji[334], allEmoji[335], allEmoji[336], allEmoji[337], allEmoji[338], allEmoji[339], allEmoji[340], allEmoji[341], allEmoji[342], allEmoji[343], allEmoji[344], allEmoji[345], allEmoji[346], allEmoji[347], allEmoji[348], allEmoji[349], allEmoji[350], allEmoji[351], allEmoji[352], allEmoji[353], allEmoji[354], allEmoji[355], allEmoji[356], allEmoji[357], allEmoji[358], allEmoji[359], allEmoji[360], allEmoji[361], allEmoji[362], allEmoji[363], allEmoji[364], allEmoji[365], allEmoji[366], allEmoji[367], allEmoji[368], allEmoji[369], allEmoji[370], allEmoji[371], allEmoji[372], allEmoji[373], allEmoji[374], allEmoji[375], allEmoji[376], allEmoji[377], allEmoji[378], allEmoji[379], allEmoji[380]]), new sliceType$1([allEmoji[627], allEmoji[628], allEmoji[629], allEmoji[630], allEmoji[631], allEmoji[632], allEmoji[633], allEmoji[634], allEmoji[635], allEmoji[636], allEmoji[637], allEmoji[638], allEmoji[639], allEmoji[640], allEmoji[641], allEmoji[642], allEmoji[643], allEmoji[644], allEmoji[645], allEmoji[646], allEmoji[647], allEmoji[648], allEmoji[649], allEmoji[650], allEmoji[651], allEmoji[652], allEmoji[653], allEmoji[654], allEmoji[655], allEmoji[656], allEmoji[657], allEmoji[658], allEmoji[659], allEmoji[660], allEmoji[661], allEmoji[662], allEmoji[663], allEmoji[664], allEmoji[665], allEmoji[666], allEmoji[667], allEmoji[668], allEmoji[669], allEmoji[670], allEmoji[671], allEmoji[672], allEmoji[673], allEmoji[674], allEmoji[675], allEmoji[676], allEmoji[677], allEmoji[678], allEmoji[679], allEmoji[680], allEmoji[681], allEmoji[682], allEmoji[683], allEmoji[684], allEmoji[685], allEmoji[686], allEmoji[687], allEmoji[688], allEmoji[689], allEmoji[690], allEmoji[691], allEmoji[692], allEmoji[693], allEmoji[694], allEmoji[695], allEmoji[696], allEmoji[697], allEmoji[698], allEmoji[699], allEmoji[700], allEmoji[701], allEmoji[702], allEmoji[703], allEmoji[704], allEmoji[705], allEmoji[706], allEmoji[707], allEmoji[708], allEmoji[709], allEmoji[710], allEmoji[711], allEmoji[712], allEmoji[713], allEmoji[714], allEmoji[715], allEmoji[716], allEmoji[717], allEmoji[718], allEmoji[719], allEmoji[720], allEmoji[721], allEmoji[722], allEmoji[723], allEmoji[724], allEmoji[725], allEmoji[726], allEmoji[727], allEmoji[728], allEmoji[729], allEmoji[730], allEmoji[731], allEmoji[732], allEmoji[733], allEmoji[734], allEmoji[735], allEmoji[736], allEmoji[737], allEmoji[738], allEmoji[739], allEmoji[740], allEmoji[741], allEmoji[742], allEmoji[743], allEmoji[744], allEmoji[745], allEmoji[746], allEmoji[747], allEmoji[748], allEmoji[749], allEmoji[750], allEmoji[751], allEmoji[752], allEmoji[753], allEmoji[754], allEmoji[755], allEmoji[756], allEmoji[757], allEmoji[758], allEmoji[759], allEmoji[760], allEmoji[761], allEmoji[762], allEmoji[763], allEmoji[764], allEmoji[765], allEmoji[766], allEmoji[767], allEmoji[768], allEmoji[769], allEmoji[770], allEmoji[771], allEmoji[772], allEmoji[773], allEmoji[774], allEmoji[775], allEmoji[776], allEmoji[777], allEmoji[778], allEmoji[779], allEmoji[780], allEmoji[781], allEmoji[782], allEmoji[783], allEmoji[784], allEmoji[785], allEmoji[786], allEmoji[787], allEmoji[788], allEmoji[789], allEmoji[790], allEmoji[791], allEmoji[792], allEmoji[793], allEmoji[794], allEmoji[795], allEmoji[796], allEmoji[797], allEmoji[798], allEmoji[799], allEmoji[800], allEmoji[801], allEmoji[802], allEmoji[803], allEmoji[804]]), new sliceType$1([allEmoji[0], allEmoji[1], allEmoji[2], allEmoji[3], allEmoji[4], allEmoji[5], allEmoji[6], allEmoji[7], allEmoji[8], allEmoji[9], allEmoji[10], allEmoji[11], allEmoji[12], allEmoji[13], allEmoji[14], allEmoji[15], allEmoji[16], allEmoji[17], allEmoji[18], allEmoji[19], allEmoji[20], allEmoji[21], allEmoji[22], allEmoji[23], allEmoji[24], allEmoji[25], allEmoji[26], allEmoji[27], allEmoji[28], allEmoji[29], allEmoji[30], allEmoji[31], allEmoji[32], allEmoji[33], allEmoji[34], allEmoji[35], allEmoji[36], allEmoji[37], allEmoji[38], allEmoji[39], allEmoji[40], allEmoji[41], allEmoji[42], allEmoji[43], allEmoji[44], allEmoji[45], allEmoji[46], allEmoji[47], allEmoji[48], allEmoji[49], allEmoji[50], allEmoji[51], allEmoji[52], allEmoji[53], allEmoji[54], allEmoji[55], allEmoji[56], allEmoji[57], allEmoji[58], allEmoji[59], allEmoji[60], allEmoji[61], allEmoji[62], allEmoji[63], allEmoji[64], allEmoji[65], allEmoji[66], allEmoji[67], allEmoji[68], allEmoji[69], allEmoji[70], allEmoji[71], allEmoji[72], allEmoji[73], allEmoji[74], allEmoji[75], allEmoji[76], allEmoji[77], allEmoji[78], allEmoji[79], allEmoji[80], allEmoji[81], allEmoji[82], allEmoji[83], allEmoji[84], allEmoji[85], allEmoji[86], allEmoji[87], allEmoji[88], allEmoji[89], allEmoji[90], allEmoji[91], allEmoji[92], allEmoji[93], allEmoji[94], allEmoji[95], allEmoji[96], allEmoji[97], allEmoji[98], allEmoji[99], allEmoji[100], allEmoji[101], allEmoji[102], allEmoji[103], allEmoji[104], allEmoji[105], allEmoji[106], allEmoji[107], allEmoji[108], allEmoji[109], allEmoji[110], allEmoji[111], allEmoji[112], allEmoji[113], allEmoji[114], allEmoji[115], allEmoji[116], allEmoji[117], allEmoji[118], allEmoji[119], allEmoji[120], allEmoji[121], allEmoji[122], allEmoji[123], allEmoji[124], allEmoji[125], allEmoji[126], allEmoji[127], allEmoji[128], allEmoji[129], allEmoji[130], allEmoji[131], allEmoji[132], allEmoji[133], allEmoji[134], allEmoji[135], allEmoji[136], allEmoji[137], allEmoji[138], allEmoji[139], allEmoji[140], allEmoji[141], allEmoji[142], allEmoji[143], allEmoji[144], allEmoji[145], allEmoji[146], allEmoji[147], allEmoji[148], allEmoji[149], allEmoji[150], allEmoji[151], allEmoji[152], allEmoji[153], allEmoji[154], allEmoji[155], allEmoji[156], allEmoji[157], allEmoji[158], allEmoji[159], allEmoji[160], allEmoji[161], allEmoji[162], allEmoji[163], allEmoji[164], allEmoji[165], allEmoji[166], allEmoji[167], allEmoji[168], allEmoji[169], allEmoji[170], allEmoji[171], allEmoji[172], allEmoji[173], allEmoji[174], allEmoji[175], allEmoji[176], allEmoji[177], allEmoji[178], allEmoji[179], allEmoji[180], allEmoji[181], allEmoji[182], allEmoji[183], allEmoji[184], allEmoji[185], allEmoji[186], allEmoji[187], allEmoji[188], allEmoji[189], allEmoji[190], allEmoji[191], allEmoji[192], allEmoji[193], allEmoji[194], allEmoji[195], allEmoji[196], allEmoji[197], allEmoji[198], allEmoji[199], allEmoji[200], allEmoji[201], allEmoji[202], allEmoji[203], allEmoji[204], allEmoji[205], allEmoji[206], allEmoji[207], allEmoji[208], allEmoji[209], allEmoji[210], allEmoji[211], allEmoji[212], allEmoji[213], allEmoji[214], allEmoji[215], allEmoji[216], allEmoji[217], allEmoji[218], allEmoji[219], allEmoji[220], allEmoji[221], allEmoji[222], allEmoji[223], allEmoji[224], allEmoji[225], allEmoji[226], allEmoji[227], allEmoji[228], allEmoji[229], allEmoji[230], allEmoji[231], allEmoji[232], allEmoji[233]]), new sliceType$1([allEmoji[512], allEmoji[513], allEmoji[514], allEmoji[515], allEmoji[516], allEmoji[517], allEmoji[518], allEmoji[519], allEmoji[520], allEmoji[521], allEmoji[522], allEmoji[523], allEmoji[524], allEmoji[525], allEmoji[526], allEmoji[527], allEmoji[528], allEmoji[529], allEmoji[530], allEmoji[531], allEmoji[532], allEmoji[533], allEmoji[534], allEmoji[535], allEmoji[536], allEmoji[537], allEmoji[538], allEmoji[539], allEmoji[540], allEmoji[541], allEmoji[542], allEmoji[543], allEmoji[544], allEmoji[545], allEmoji[546], allEmoji[547], allEmoji[548], allEmoji[549], allEmoji[550], allEmoji[551], allEmoji[552], allEmoji[553], allEmoji[554], allEmoji[555], allEmoji[556], allEmoji[557], allEmoji[558], allEmoji[559], allEmoji[560], allEmoji[561], allEmoji[562], allEmoji[563], allEmoji[564], allEmoji[565], allEmoji[566], allEmoji[567], allEmoji[568], allEmoji[569], allEmoji[570], allEmoji[571], allEmoji[572], allEmoji[573], allEmoji[574], allEmoji[575], allEmoji[576], allEmoji[577], allEmoji[578], allEmoji[579], allEmoji[580], allEmoji[581], allEmoji[582], allEmoji[583], allEmoji[584], allEmoji[585], allEmoji[586], allEmoji[587], allEmoji[588], allEmoji[589], allEmoji[590], allEmoji[591], allEmoji[592], allEmoji[593], allEmoji[594], allEmoji[595], allEmoji[596], allEmoji[597], allEmoji[598], allEmoji[599], allEmoji[600], allEmoji[601], allEmoji[602], allEmoji[603], allEmoji[604], allEmoji[605], allEmoji[606], allEmoji[607], allEmoji[608], allEmoji[609], allEmoji[610], allEmoji[611], allEmoji[612], allEmoji[613], allEmoji[614], allEmoji[615], allEmoji[616], allEmoji[617], allEmoji[618], allEmoji[619], allEmoji[620], allEmoji[621], allEmoji[622], allEmoji[623], allEmoji[624], allEmoji[625], allEmoji[626]]), new sliceType$1([allEmoji[805], allEmoji[806], allEmoji[807], allEmoji[808], allEmoji[809], allEmoji[810], allEmoji[811], allEmoji[812], allEmoji[813], allEmoji[814], allEmoji[815], allEmoji[816], allEmoji[817], allEmoji[818], allEmoji[819], allEmoji[820], allEmoji[821], allEmoji[822], allEmoji[823], allEmoji[824], allEmoji[825], allEmoji[826], allEmoji[827], allEmoji[828], allEmoji[829], allEmoji[830], allEmoji[831], allEmoji[832], allEmoji[833], allEmoji[834], allEmoji[835], allEmoji[836], allEmoji[837], allEmoji[838], allEmoji[839], allEmoji[840], allEmoji[841], allEmoji[842], allEmoji[843], allEmoji[844], allEmoji[845], allEmoji[846], allEmoji[847], allEmoji[848], allEmoji[849], allEmoji[850], allEmoji[851], allEmoji[852], allEmoji[853], allEmoji[854], allEmoji[855], allEmoji[856], allEmoji[857], allEmoji[858], allEmoji[859], allEmoji[860], allEmoji[861], allEmoji[862], allEmoji[863], allEmoji[864], allEmoji[865], allEmoji[866], allEmoji[867], allEmoji[868], allEmoji[869], allEmoji[870], allEmoji[871], allEmoji[872], allEmoji[873], allEmoji[874], allEmoji[875], allEmoji[876], allEmoji[877], allEmoji[878], allEmoji[879], allEmoji[880], allEmoji[881], allEmoji[882], allEmoji[883], allEmoji[884], allEmoji[885], allEmoji[886], allEmoji[887], allEmoji[888], allEmoji[889], allEmoji[890], allEmoji[891], allEmoji[892], allEmoji[893], allEmoji[894], allEmoji[895], allEmoji[896], allEmoji[897], allEmoji[898], allEmoji[899], allEmoji[900], allEmoji[901], allEmoji[902], allEmoji[903], allEmoji[904], allEmoji[905], allEmoji[906], allEmoji[907], allEmoji[908], allEmoji[909], allEmoji[910], allEmoji[911], allEmoji[912], allEmoji[913], allEmoji[914], allEmoji[915], allEmoji[916], allEmoji[917], allEmoji[918], allEmoji[919], allEmoji[920], allEmoji[921], allEmoji[922], allEmoji[923], allEmoji[924], allEmoji[925], allEmoji[926], allEmoji[927], allEmoji[928], allEmoji[929], allEmoji[930], allEmoji[931], allEmoji[932], allEmoji[933], allEmoji[934], allEmoji[935], allEmoji[936], allEmoji[937], allEmoji[938], allEmoji[939], allEmoji[940], allEmoji[941], allEmoji[942], allEmoji[943], allEmoji[944], allEmoji[945], allEmoji[946], allEmoji[947], allEmoji[948], allEmoji[949], allEmoji[950], allEmoji[951], allEmoji[952], allEmoji[953], allEmoji[954], allEmoji[955], allEmoji[956], allEmoji[957], allEmoji[958], allEmoji[959], allEmoji[960], allEmoji[961], allEmoji[962], allEmoji[963], allEmoji[964], allEmoji[965], allEmoji[966], allEmoji[967], allEmoji[968], allEmoji[969], allEmoji[970], allEmoji[971], allEmoji[972], allEmoji[973], allEmoji[974], allEmoji[975], allEmoji[976], allEmoji[977], allEmoji[978], allEmoji[979], allEmoji[980], allEmoji[981], allEmoji[982], allEmoji[983], allEmoji[984], allEmoji[985], allEmoji[986], allEmoji[987], allEmoji[988], allEmoji[989], allEmoji[990], allEmoji[991], allEmoji[992], allEmoji[993], allEmoji[994], allEmoji[995], allEmoji[996], allEmoji[997], allEmoji[998], allEmoji[999], allEmoji[1000], allEmoji[1001], allEmoji[1002], allEmoji[1003], allEmoji[1004], allEmoji[1005], allEmoji[1006], allEmoji[1007], allEmoji[1008], allEmoji[1009], allEmoji[1010], allEmoji[1011], allEmoji[1012], allEmoji[1013], allEmoji[1014], allEmoji[1015], allEmoji[1016], allEmoji[1017], allEmoji[1018], allEmoji[1019], allEmoji[1020], allEmoji[1021], allEmoji[1022], allEmoji[1023], allEmoji[1024], allEmoji[1025], allEmoji[1026], allEmoji[1027], allEmoji[1028], allEmoji[1029], allEmoji[1030], allEmoji[1031], allEmoji[1032], allEmoji[1033], allEmoji[1034], allEmoji[1035], allEmoji[1036], allEmoji[1037], allEmoji[1038], allEmoji[1039], allEmoji[1040], allEmoji[1041], allEmoji[1042], allEmoji[1043], allEmoji[1044], allEmoji[1045], allEmoji[1046], allEmoji[1047], allEmoji[1048], allEmoji[1049], allEmoji[1050], allEmoji[1051], allEmoji[1052], allEmoji[1053], allEmoji[1054], allEmoji[1055], allEmoji[1056], allEmoji[1057], allEmoji[1058], allEmoji[1059], allEmoji[1060], allEmoji[1061], allEmoji[1062], allEmoji[1063], allEmoji[1064], allEmoji[1065], allEmoji[1066], allEmoji[1067], allEmoji[1068], allEmoji[1069], allEmoji[1070], allEmoji[1071], allEmoji[1072], allEmoji[1073]])]);
		tags = new sliceType(["911", "accessibility", "airport", "alphabet", "amazed", "america", "angel", "angry", "announcement", "annoyed", "applause", "approve", "archery", "attack", "aubergine", "autumn", "award", "bag", "bags", "bang", "bath", "bawling", "beach", "beach_umbrella", "beauty", "bicep", "bicycle", "billiards", "birthday", "blind", "block", "blonde", "blow", "blush", "boom", "bottle", "boy", "breakfast", "british", "bubbly", "bug", "bunny", "burger", "burma", "burn", "bury", "business", "cafe", "calendar", "call", "camping", "canada", "celebration", "chicken", "child", "china", "chocolates", "chop", "christmas", "cigarette", "classy", "cloud", "cold", "college", "comment", "confused", "console", "contest", "controller", "cool", "couple", "crap", "cream", "crown", "cruise", "crush", "cry", "cut", "cutlery", "dad", "danger", "date", "dead", "deaf", "desert", "design", "desktop", "dessert", "devil", "diamond", "dice", "dining", "dinner", "directory", "disapprove", "document", "dog", "dollar", "drama", "dress", "drink", "drinks", "earphones", "education", "email", "emergency", "engaged", "envelope", "environment", "espresso", "evil", "exercise", "explode", "fast", "father", "feet", "festival", "film", "finish", "flag", "flex", "flight", "flirt", "flower", "flowers", "forbidden", "formal", "fortune", "france", "french", "fresh", "fruit", "funeral", "gambling", "game", "gasp", "geek", "germany", "girls", "glasses", "global", "globe", "gold", "goodbye", "graduation", "graph", "green", "group", "gym", "haha", "halloween", "halt", "happy", "hat", "health", "hear", "heart", "helmet", "help", "highfive", "home", "hooray", "hope", "horns", "horror", "hospital", "hot", "hurt", "hush", "idea", "ignore", "ill", "impressed", "incoming", "information", "international", "investigate", "italy", "ivory", "japan", "joy", "karl", "keeling", "king", "kiss", "korea", "laboratory", "launch", "law", "leaf", "letter", "letters", "library", "lick", "light", "lightning", "limit", "lipstick", "listen", "location", "lock", "look", "loop", "love", "luck", "mad", "makeup", "manicure", "marathon", "marriage", "meat", "medicine", "meh", "metrics", "milestone", "milk", "mobile", "money", "monkey", "monster", "morning", "movie", "music", "mustache", "mute", "needle", "nervous", "newborn", "night", "noodle", "note", "notification", "number", "numbers", "off", "ok", "oops", "orbit", "paint", "pants", "parents", "party", "password", "pasta", "peace", "perfect", "pet", "phew", "phone", "photo", "piano", "pirate", "plant", "play", "please", "pleased", "podcast", "poison", "police", "pool", "power", "praise", "prank", "present", "press", "pride", "private", "prosper", "proud", "queen", "rain", "respect", "restroom", "retro", "return", "rich", "rock", "royal", "running", "russia", "sad", "save", "scared", "schedule", "science", "score", "screen", "sea", "search", "security", "see", "semaphore", "shiny", "ship", "shipping", "shirt", "shocked", "shoe", "shoot", "shower", "shuffle", "sick", "signal", "silence", "silly", "sing", "skating", "skyline", "sleeping", "sleuth", "slow", "smartphone", "smell", "smile", "smug", "sneaker", "sound", "spa", "space", "spain", "speechless", "speed", "spicy", "spock", "sport", "sports", "spring", "star", "stats", "stone", "stop", "strong", "struggling", "stunned", "subscription", "summer", "surprise", "sweat", "sweet", "swirl", "sync", "tag", "target", "taste", "team", "tear", "tears", "tempura", "thanks", "thanksgiving", "theater", "thinking", "thunder", "time", "tired", "toast", "toilet", "tongue", "tool", "tracks", "trademark", "train", "trash", "travel", "turkey", "ufo", "united", "university", "upset", "user", "users", "vacation", "victory", "video", "volume", "watch", "water", "wc", "weapon", "weather", "wedding", "whew", "whine", "wifi", "wind", "winner", "winter", "wip", "wish", "wood", "workout", "world", "wow", "yes", "zoom", "zzz"]);
		byTag = new sliceType$2([new sliceType$1([allEmoji[527]]), new sliceType$1([allEmoji[919]]), new sliceType$1([allEmoji[917]]), new sliceType$1([allEmoji[932]]), new sliceType$1([allEmoji[62]]), new sliceType$1([allEmoji[1308]]), new sliceType$1([allEmoji[8]]), new sliceType$1([allEmoji[39], allEmoji[71], allEmoji[878]]), new sliceType$1([allEmoji[1038]]), new sliceType$1([allEmoji[38]]), new sliceType$1([allEmoji[90]]), new sliceType$1([allEmoji[91]]), new sliceType$1([allEmoji[461]]), new sliceType$1([allEmoji[93]]), new sliceType$1([allEmoji[395]]), new sliceType$1([allEmoji[319]]), new sliceType$1([allEmoji[491]]), new sliceType$1([allEmoji[226], allEmoji[228]]), new sliceType$1([allEmoji[722]]), new sliceType$1([allEmoji[886]]), new sliceType$1([allEmoji[710]]), new sliceType$1([allEmoji[60]]), new sliceType$1([allEmoji[210], allEmoji[332]]), new sliceType$1([allEmoji[720]]), new sliceType$1([allEmoji[112], allEmoji[160]]), new sliceType$1([allEmoji[106]]), new sliceType$1([allEmoji[526]]), new sliceType$1([allEmoji[455]]), new sliceType$1([allEmoji[723], allEmoji[724]]), new sliceType$1([allEmoji[250]]), new sliceType$1([allEmoji[875]]), new sliceType$1([allEmoji[143]]), new sliceType$1([allEmoji[373]]), new sliceType$1([allEmoji[13]]), new sliceType$1([allEmoji[690]]), new sliceType$1([allEmoji[441]]), new sliceType$1([allEmoji[128]]), new sliceType$1([allEmoji[405], allEmoji[443]]), new sliceType$1([allEmoji[1307]]), new sliceType$1([allEmoji[441]]), new sliceType$1([allEmoji[267]]), new sliceType$1([allEmoji[165], allEmoji[166], allEmoji[238]]), new sliceType$1([allEmoji[406]]), new sliceType$1([allEmoji[1225]]), new sliceType$1([allEmoji[366]]), new sliceType$1([allEmoji[92]]), new sliceType$1([allEmoji[229]]), new sliceType$1([allEmoji[444]]), new sliceType$1([allEmoji[758]]), new sliceType$1([allEmoji[629], allEmoji[649]]), new sliceType$1([allEmoji[583]]), new sliceType$1([allEmoji[320]]), new sliceType$1([allEmoji[441], allEmoji[600]]), new sliceType$1([allEmoji[402]]), new sliceType$1([allEmoji[122], allEmoji[123], allEmoji[124], allEmoji[180]]), new sliceType$1([allEmoji[1120]]), new sliceType$1([allEmoji[818]]), new sliceType$1([allEmoji[691]]), new sliceType$1([allEmoji[142], allEmoji[370], allEmoji[723]]), new sliceType$1([allEmoji[695]]), new sliceType$1([allEmoji[221]]), new sliceType$1([allEmoji[358]]), new sliceType$1([allEmoji[368]]), new sliceType$1([allEmoji[222]]), new sliceType$1([allEmoji[1040]]), new sliceType$1([allEmoji[888]]), new sliceType$1([allEmoji[508]]), new sliceType$1([allEmoji[491]]), new sliceType$1([allEmoji[508]]), new sliceType$1([allEmoji[26]]), new sliceType$1([allEmoji[172], allEmoji[173]]), new sliceType$1([allEmoji[69]]), new sliceType$1([allEmoji[677]]), new sliceType$1([allEmoji[143]]), new sliceType$1([allEmoji[556]]), new sliceType$1([allEmoji[16]]), new sliceType$1([allEmoji[60]]), new sliceType$1([allEmoji[691], allEmoji[783]]), new sliceType$1([allEmoji[446]]), new sliceType$1([allEmoji[125]]), new sliceType$1([allEmoji[75], allEmoji[76]]), new sliceType$1([allEmoji[171], allEmoji[172], allEmoji[173]]), new sliceType$1([allEmoji[75]]), new sliceType$1([allEmoji[251]]), new sliceType$1([allEmoji[286]]), new sliceType$1([allEmoji[497]]), new sliceType$1([allEmoji[630]]), new sliceType$1([allEmoji[427]]), new sliceType$1([allEmoji[70], allEmoji[71]]), new sliceType$1([allEmoji[679]]), new sliceType$1([allEmoji[510]]), new sliceType$1([allEmoji[447]]), new sliceType$1([allEmoji[447]]), new sliceType$1([allEmoji[764]]), new sliceType$1([allEmoji[92]]), new sliceType$1([allEmoji[748], allEmoji[750], allEmoji[797]]), new sliceType$1([allEmoji[300]]), new sliceType$1([allEmoji[672], allEmoji[677]]), new sliceType$1([allEmoji[496]]), new sliceType$1([allEmoji[164]]), new sliceType$1([allEmoji[436], allEmoji[439]]), new sliceType$1([allEmoji[437]]), new sliceType$1([allEmoji[501]]), new sliceType$1([allEmoji[222]]), new sliceType$1([allEmoji[736]]), new sliceType$1([allEmoji[527], allEmoji[872]]), new sliceType$1([allEmoji[232]]), new sliceType$1([allEmoji[736]]), new sliceType$1([allEmoji[901]]), new sliceType$1([allEmoji[444]]), new sliceType$1([allEmoji[70], allEmoji[71]]), new sliceType$1([allEmoji[169], allEmoji[170]]), new sliceType$1([allEmoji[367]]), new sliceType$1([allEmoji[373]]), new sliceType$1([allEmoji[125]]), new sliceType$1([allEmoji[214]]), new sliceType$1([allEmoji[600]]), new sliceType$1([allEmoji[499], allEmoji[646], allEmoji[929]]), new sliceType$1([allEmoji[790]]), new sliceType$1([allEmoji[1157], allEmoji[1307], allEmoji[1308]]), new sliceType$1([allEmoji[106]]), new sliceType$1([allEmoji[548], allEmoji[549]]), new sliceType$1([allEmoji[9], allEmoji[17]]), new sliceType$1([allEmoji[324], allEmoji[325], allEmoji[327]]), new sliceType$1([allEmoji[328]]), new sliceType$1([allEmoji[875]]), new sliceType$1([allEmoji[208]]), new sliceType$1([allEmoji[699]]), new sliceType$1([allEmoji[1150]]), new sliceType$1([allEmoji[1150]]), new sliceType$1([allEmoji[941]]), new sliceType$1([allEmoji[381], allEmoji[386], allEmoji[389], allEmoji[391]]), new sliceType$1([allEmoji[696]]), new sliceType$1([allEmoji[510]]), new sliceType$1([allEmoji[78]]), new sliceType$1([allEmoji[62]]), new sliceType$1([allEmoji[25]]), new sliceType$1([allEmoji[1157]]), new sliceType$1([allEmoji[126]]), new sliceType$1([allEmoji[25], allEmoji[230]]), new sliceType$1([allEmoji[908]]), new sliceType$1([allEmoji[334], allEmoji[335], allEmoji[336]]), new sliceType$1([allEmoji[489]]), new sliceType$1([allEmoji[95]]), new sliceType$1([allEmoji[222]]), new sliceType$1([allEmoji[753], allEmoji[754]]), new sliceType$1([allEmoji[443], allEmoji[901]]), new sliceType$1([allEmoji[121]]), new sliceType$1([allEmoji[468], allEmoji[469]]), new sliceType$1([allEmoji[4], allEmoji[7]]), new sliceType$1([allEmoji[74], allEmoji[331]]), new sliceType$1([allEmoji[150], allEmoji[151]]), new sliceType$1([allEmoji[0], allEmoji[4], allEmoji[5], allEmoji[7]]), new sliceType$1([allEmoji[221]]), new sliceType$1([allEmoji[706], allEmoji[707]]), new sliceType$1([allEmoji[115]]), new sliceType$1([allEmoji[817]]), new sliceType$1([allEmoji[137]]), new sliceType$1([allEmoji[872]]), new sliceType$1([allEmoji[103]]), new sliceType$1([allEmoji[180]]), new sliceType$1([allEmoji[89]]), new sliceType$1([allEmoji[107]]), new sliceType$1([allEmoji[70], allEmoji[71]]), new sliceType$1([allEmoji[50], allEmoji[86]]), new sliceType$1([allEmoji[707]]), new sliceType$1([allEmoji[6]]), new sliceType$1([allEmoji[66]]), new sliceType$1([allEmoji[63], allEmoji[252]]), new sliceType$1([allEmoji[667]]), new sliceType$1([allEmoji[250]]), new sliceType$1([allEmoji[64]]), new sliceType$1([allEmoji[49]]), new sliceType$1([allEmoji[629]]), new sliceType$1([allEmoji[149]]), new sliceType$1([allEmoji[334], allEmoji[335], allEmoji[336], allEmoji[908]]), new sliceType$1([allEmoji[704]]), new sliceType$1([allEmoji[1182]]), new sliceType$1([allEmoji[1183]]), new sliceType$1([allEmoji[1185]]), new sliceType$1([allEmoji[4], allEmoji[5]]), new sliceType$1([allEmoji[572]]), new sliceType$1([allEmoji[1122]]), new sliceType$1([allEmoji[223]]), new sliceType$1([allEmoji[113]]), new sliceType$1([allEmoji[1280]]), new sliceType$1([allEmoji[704]]), new sliceType$1([allEmoji[557]]), new sliceType$1([allEmoji[135]]), new sliceType$1([allEmoji[318]]), new sliceType$1([allEmoji[732]]), new sliceType$1([allEmoji[934]]), new sliceType$1([allEmoji[776]]), new sliceType$1([allEmoji[14]]), new sliceType$1([allEmoji[667]]), new sliceType$1([allEmoji[365]]), new sliceType$1([allEmoji[873]]), new sliceType$1([allEmoji[213]]), new sliceType$1([allEmoji[115]]), new sliceType$1([allEmoji[784], allEmoji[785]]), new sliceType$1([allEmoji[713]]), new sliceType$1([allEmoji[118]]), new sliceType$1([allEmoji[986]]), new sliceType$1([allEmoji[16], allEmoji[805], allEmoji[817]]), new sliceType$1([allEmoji[315]]), new sliceType$1([allEmoji[38]]), new sliceType$1([allEmoji[212]]), new sliceType$1([allEmoji[112]]), new sliceType$1([allEmoji[169], allEmoji[170], allEmoji[488]]), new sliceType$1([allEmoji[144], allEmoji[232], allEmoji[620]]), new sliceType$1([allEmoji[402]]), new sliceType$1([allEmoji[706]]), new sliceType$1([allEmoji[30], allEmoji[32]]), new sliceType$1([allEmoji[752], allEmoji[753], allEmoji[754]]), new sliceType$1([allEmoji[790]]), new sliceType$1([allEmoji[445]]), new sliceType$1([allEmoji[628]]), new sliceType$1([allEmoji[673]]), new sliceType$1([allEmoji[250], allEmoji[251], allEmoji[252]]), new sliceType$1([allEmoji[72]]), new sliceType$1([allEmoji[660]]), new sliceType$1([allEmoji[929]]), new sliceType$1([allEmoji[501], allEmoji[991]]), new sliceType$1([allEmoji[125]]), new sliceType$1([allEmoji[29], allEmoji[252], allEmoji[850]]), new sliceType$1([allEmoji[707]]), new sliceType$1([allEmoji[37], allEmoji[52], allEmoji[57]]), new sliceType$1([allEmoji[122]]), new sliceType$1([allEmoji[350]]), new sliceType$1([allEmoji[413]]), new sliceType$1([allEmoji[797]]), new sliceType$1([allEmoji[1036]]), new sliceType$1([allEmoji[955]]), new sliceType$1([allEmoji[954]]), new sliceType$1([allEmoji[850], allEmoji[1035]]), new sliceType$1([allEmoji[91]]), new sliceType$1([allEmoji[51]]), new sliceType$1([allEmoji[558]]), new sliceType$1([allEmoji[497]]), new sliceType$1([allEmoji[207]]), new sliceType$1([allEmoji[180]]), new sliceType$1([allEmoji[428], allEmoji[724], allEmoji[728]]), new sliceType$1([allEmoji[713]]), new sliceType$1([allEmoji[410]]), new sliceType$1([allEmoji[102], allEmoji[298]]), new sliceType$1([allEmoji[892]]), new sliceType$1([allEmoji[234], allEmoji[235], allEmoji[237]]), new sliceType$1([allEmoji[57]]), new sliceType$1([allEmoji[649]]), new sliceType$1([allEmoji[643], allEmoji[644]]), new sliceType$1([allEmoji[503]]), new sliceType$1([allEmoji[76]]), new sliceType$1([allEmoji[312]]), new sliceType$1([allEmoji[508]]), new sliceType$1([allEmoji[107]]), new sliceType$1([allEmoji[5], allEmoji[13]]), new sliceType$1([allEmoji[654], allEmoji[655]]), new sliceType$1([allEmoji[75]]), new sliceType$1([allEmoji[135]]), new sliceType$1([allEmoji[455]]), new sliceType$1([allEmoji[94], allEmoji[665]]), new sliceType$1([allEmoji[90]]), new sliceType$1([allEmoji[21], allEmoji[22]]), new sliceType$1([allEmoji[723]]), new sliceType$1([allEmoji[767], allEmoji[768]]), new sliceType$1([allEmoji[791]]), new sliceType$1([allEmoji[801]]), new sliceType$1([allEmoji[108]]), new sliceType$1([allEmoji[10]]), new sliceType$1([allEmoji[223]]), new sliceType$1([allEmoji[233], allEmoji[377]]), new sliceType$1([allEmoji[146], allEmoji[147]]), new sliceType$1([allEmoji[921]]), new sliceType$1([allEmoji[78]]), new sliceType$1([allEmoji[982]]), new sliceType$1([allEmoji[24]]), new sliceType$1([allEmoji[506]]), new sliceType$1([allEmoji[143], allEmoji[223]]), new sliceType$1([allEmoji[219]]), new sliceType$1([allEmoji[1256]]), new sliceType$1([allEmoji[36], allEmoji[56], allEmoji[60], allEmoji[87], allEmoji[158]]), new sliceType$1([allEmoji[639]]), new sliceType$1([allEmoji[51]]), new sliceType$1([allEmoji[757], allEmoji[758]]), new sliceType$1([allEmoji[704]]), new sliceType$1([allEmoji[892]]), new sliceType$1([allEmoji[630]]), new sliceType$1([allEmoji[278], allEmoji[332], allEmoji[380]]), new sliceType$1([allEmoji[803]]), new sliceType$1([allEmoji[800], allEmoji[801], allEmoji[802]]), new sliceType$1([allEmoji[118]]), new sliceType$1([allEmoji[564]]), new sliceType$1([allEmoji[354]]), new sliceType$1([allEmoji[554], allEmoji[557], allEmoji[560]]), new sliceType$1([allEmoji[739]]), new sliceType$1([allEmoji[208]]), new sliceType$1([allEmoji[50], allEmoji[51]]), new sliceType$1([allEmoji[215], allEmoji[216]]), new sliceType$1([allEmoji[689]]), new sliceType$1([allEmoji[485]]), new sliceType$1([allEmoji[985]]), new sliceType$1([allEmoji[64], allEmoji[65]]), new sliceType$1([allEmoji[664]]), new sliceType$1([allEmoji[29], allEmoji[53], allEmoji[63]]), new sliceType$1([allEmoji[21]]), new sliceType$1([allEmoji[500]]), new sliceType$1([allEmoji[464]]), new sliceType$1([allEmoji[594]]), new sliceType$1([allEmoji[68]]), new sliceType$1([allEmoji[140], allEmoji[141]]), new sliceType$1([allEmoji[266], allEmoji[273]]), new sliceType$1([allEmoji[628]]), new sliceType$1([allEmoji[116]]), new sliceType$1([allEmoji[0]]), new sliceType$1([allEmoji[28], allEmoji[48]]), new sliceType$1([allEmoji[219]]), new sliceType$1([allEmoji[115], allEmoji[1031], allEmoji[1036]]), new sliceType$1([allEmoji[162], allEmoji[163]]), new sliceType$1([allEmoji[558]]), new sliceType$1([allEmoji[1282]]), new sliceType$1([allEmoji[53]]), new sliceType$1([allEmoji[292]]), new sliceType$1([allEmoji[396]]), new sliceType$1([allEmoji[108]]), new sliceType$1([allEmoji[219]]), new sliceType$1([allEmoji[448], allEmoji[449], allEmoji[450], allEmoji[451], allEmoji[452]]), new sliceType$1([allEmoji[327]]), new sliceType$1([allEmoji[353]]), new sliceType$1([allEmoji[752]]), new sliceType$1([allEmoji[721]]), new sliceType$1([allEmoji[103], allEmoji[150], allEmoji[151]]), new sliceType$1([allEmoji[106]]), new sliceType$1([allEmoji[44]]), new sliceType$1([allEmoji[55]]), new sliceType$1([allEmoji[678]]), new sliceType$1([allEmoji[349], allEmoji[440]]), new sliceType$1([allEmoji[49]]), new sliceType$1([allEmoji[57]]), new sliceType$1([allEmoji[430]]), new sliceType$1([allEmoji[911]]), new sliceType$1([allEmoji[988]]), new sliceType$1([allEmoji[740]]), new sliceType$1([allEmoji[493]]), new sliceType$1([allEmoji[114]]), new sliceType$1([allEmoji[121]]), new sliceType$1([allEmoji[56], allEmoji[87]]), new sliceType$1([allEmoji[3]]), new sliceType$1([allEmoji[404]]), new sliceType$1([allEmoji[146], allEmoji[147]]), new sliceType$1([allEmoji[297]]), new sliceType$1([allEmoji[496]]), new sliceType$1([allEmoji[1041]]), new sliceType$1([allEmoji[365]]), new sliceType$1([allEmoji[627], allEmoji[662], allEmoji[663]]), new sliceType$1([allEmoji[47], allEmoji[58]]), new sliceType$1([allEmoji[400]]), new sliceType$1([allEmoji[921], allEmoji[927]]), new sliceType$1([allEmoji[14]]), new sliceType$1([allEmoji[681], allEmoji[682]]), new sliceType$1([allEmoji[214]]), new sliceType$1([allEmoji[1001]]), new sliceType$1([allEmoji[538], allEmoji[539], allEmoji[542]]), new sliceType$1([allEmoji[670]]), new sliceType$1([allEmoji[566]]), new sliceType$1([allEmoji[1300]]), new sliceType$1([allEmoji[77]]), new sliceType$1([allEmoji[1308]]), new sliceType$1([allEmoji[222]]), new sliceType$1([allEmoji[46]]), new sliceType$1([allEmoji[120]]), new sliceType$1([allEmoji[121]]), new sliceType$1([allEmoji[440]]), new sliceType$1([allEmoji[102]]), new sliceType$1([allEmoji[646]]), new sliceType$1([allEmoji[1031], allEmoji[1033], allEmoji[1034], allEmoji[1035]]), new sliceType$1([allEmoji[118]]), new sliceType$1([allEmoji[378], allEmoji[379]]), new sliceType$1([allEmoji[709]]), new sliceType$1([allEmoji[689]]), new sliceType$1([allEmoji[233], allEmoji[356], allEmoji[358], allEmoji[368], allEmoji[377]]), new sliceType$1([allEmoji[144], allEmoji[232]]), new sliceType$1([allEmoji[15]]), new sliceType$1([allEmoji[46]]), new sliceType$1([allEmoji[930]]), new sliceType$1([allEmoji[373]]), new sliceType$1([allEmoji[489], allEmoji[491]]), new sliceType$1([allEmoji[368], allEmoji[370], allEmoji[371]]), new sliceType$1([allEmoji[561], allEmoji[898]]), new sliceType$1([allEmoji[107]]), new sliceType$1([allEmoji[309], allEmoji[310]]), new sliceType$1([allEmoji[106], allEmoji[169], allEmoji[170], allEmoji[379], allEmoji[468], allEmoji[469]]), new sliceType$1([allEmoji[334], allEmoji[335], allEmoji[336], allEmoji[908]]), new sliceType$1([allEmoji[49]]), new sliceType$1([allEmoji[938]]), new sliceType$1([allEmoji[803]]), new sliceType$1([allEmoji[67]])]);
		byName = $makeMap($String.keyFor, [{ k: "\xF0\x9F\x98\x80", v: allEmoji[0] }, { k: ":grinning:", v: allEmoji[0] }, { k: "\xF0\x9F\x98\xAC", v: allEmoji[1] }, { k: ":grimacing:", v: allEmoji[1] }, { k: "\xF0\x9F\x98\x81", v: allEmoji[2] }, { k: ":grin:", v: allEmoji[2] }, { k: "\xF0\x9F\x98\x82", v: allEmoji[3] }, { k: ":joy:", v: allEmoji[3] }, { k: "\xF0\x9F\x98\x83", v: allEmoji[4] }, { k: ":smiley:", v: allEmoji[4] }, { k: "\xF0\x9F\x98\x84", v: allEmoji[5] }, { k: ":smile:", v: allEmoji[5] }, { k: "\xF0\x9F\x98\x85", v: allEmoji[6] }, { k: ":sweat_smile:", v: allEmoji[6] }, { k: "\xF0\x9F\x98\x86", v: allEmoji[7] }, { k: ":laughing:", v: allEmoji[7] }, { k: ":satisfied:", v: allEmoji[7] }, { k: "\xF0\x9F\x98\x87", v: allEmoji[8] }, { k: ":innocent:", v: allEmoji[8] }, { k: "\xF0\x9F\x98\x89", v: allEmoji[9] }, { k: ":wink:", v: allEmoji[9] }, { k: "\xF0\x9F\x98\x8A", v: allEmoji[10] }, { k: ":blush:", v: allEmoji[10] }, { k: "\xF0\x9F\x99\x82", v: allEmoji[11] }, { k: ":slightly_smiling_face:", v: allEmoji[11] }, { k: "\xF0\x9F\x99\x83", v: allEmoji[12] }, { k: ":upside_down_face:", v: allEmoji[12] }, { k: "\xE2\x98\xBA\xEF\xB8\x8F", v: allEmoji[13] }, { k: ":relaxed:", v: allEmoji[13] }, { k: "\xF0\x9F\x98\x8B", v: allEmoji[14] }, { k: ":yum:", v: allEmoji[14] }, { k: "\xF0\x9F\x98\x8C", v: allEmoji[15] }, { k: ":relieved:", v: allEmoji[15] }, { k: "\xF0\x9F\x98\x8D", v: allEmoji[16] }, { k: ":heart_eyes:", v: allEmoji[16] }, { k: "\xF0\x9F\x98\x98", v: allEmoji[17] }, { k: ":kissing_heart:", v: allEmoji[17] }, { k: "\xF0\x9F\x98\x97", v: allEmoji[18] }, { k: ":kissing:", v: allEmoji[18] }, { k: "\xF0\x9F\x98\x99", v: allEmoji[19] }, { k: ":kissing_smiling_eyes:", v: allEmoji[19] }, { k: "\xF0\x9F\x98\x9A", v: allEmoji[20] }, { k: ":kissing_closed_eyes:", v: allEmoji[20] }, { k: "\xF0\x9F\x98\x9C", v: allEmoji[21] }, { k: ":stuck_out_tongue_winking_eye:", v: allEmoji[21] }, { k: "\xF0\x9F\x98\x9D", v: allEmoji[22] }, { k: ":stuck_out_tongue_closed_eyes:", v: allEmoji[22] }, { k: "\xF0\x9F\x98\x9B", v: allEmoji[23] }, { k: ":stuck_out_tongue:", v: allEmoji[23] }, { k: "\xF0\x9F\xA4\x91", v: allEmoji[24] }, { k: ":money_mouth_face:", v: allEmoji[24] }, { k: "\xF0\x9F\xA4\x93", v: allEmoji[25] }, { k: ":nerd_face:", v: allEmoji[25] }, { k: "\xF0\x9F\x98\x8E", v: allEmoji[26] }, { k: ":sunglasses:", v: allEmoji[26] }, { k: "\xF0\x9F\xA4\x97", v: allEmoji[27] }, { k: ":hugs:", v: allEmoji[27] }, { k: "\xF0\x9F\x98\x8F", v: allEmoji[28] }, { k: ":smirk:", v: allEmoji[28] }, { k: "\xF0\x9F\x98\xB6", v: allEmoji[29] }, { k: ":no_mouth:", v: allEmoji[29] }, { k: "\xF0\x9F\x98\x90", v: allEmoji[30] }, { k: ":neutral_face:", v: allEmoji[30] }, { k: "\xF0\x9F\x98\x91", v: allEmoji[31] }, { k: ":expressionless:", v: allEmoji[31] }, { k: "\xF0\x9F\x98\x92", v: allEmoji[32] }, { k: ":unamused:", v: allEmoji[32] }, { k: "\xF0\x9F\x99\x84", v: allEmoji[33] }, { k: ":roll_eyes:", v: allEmoji[33] }, { k: "\xF0\x9F\xA4\x94", v: allEmoji[34] }, { k: ":thinking:", v: allEmoji[34] }, { k: "\xF0\x9F\x98\xB3", v: allEmoji[35] }, { k: ":flushed:", v: allEmoji[35] }, { k: "\xF0\x9F\x98\x9E", v: allEmoji[36] }, { k: ":disappointed:", v: allEmoji[36] }, { k: "\xF0\x9F\x98\x9F", v: allEmoji[37] }, { k: ":worried:", v: allEmoji[37] }, { k: "\xF0\x9F\x98\xA0", v: allEmoji[38] }, { k: ":angry:", v: allEmoji[38] }, { k: "\xF0\x9F\x98\xA1", v: allEmoji[39] }, { k: ":rage:", v: allEmoji[39] }, { k: ":pout:", v: allEmoji[39] }, { k: "\xF0\x9F\x98\x94", v: allEmoji[40] }, { k: ":pensive:", v: allEmoji[40] }, { k: "\xF0\x9F\x98\x95", v: allEmoji[41] }, { k: ":confused:", v: allEmoji[41] }, { k: "\xF0\x9F\x99\x81", v: allEmoji[42] }, { k: ":slightly_frowning_face:", v: allEmoji[42] }, { k: "\xE2\x98\xB9\xEF\xB8\x8F", v: allEmoji[43] }, { k: ":frowning_face:", v: allEmoji[43] }, { k: "\xF0\x9F\x98\xA3", v: allEmoji[44] }, { k: ":persevere:", v: allEmoji[44] }, { k: "\xF0\x9F\x98\x96", v: allEmoji[45] }, { k: ":confounded:", v: allEmoji[45] }, { k: "\xF0\x9F\x98\xAB", v: allEmoji[46] }, { k: ":tired_face:", v: allEmoji[46] }, { k: "\xF0\x9F\x98\xA9", v: allEmoji[47] }, { k: ":weary:", v: allEmoji[47] }, { k: "\xF0\x9F\x98\xA4", v: allEmoji[48] }, { k: ":triumph:", v: allEmoji[48] }, { k: "\xF0\x9F\x98\xAE", v: allEmoji[49] }, { k: ":open_mouth:", v: allEmoji[49] }, { k: "\xF0\x9F\x98\xB1", v: allEmoji[50] }, { k: ":scream:", v: allEmoji[50] }, { k: "\xF0\x9F\x98\xA8", v: allEmoji[51] }, { k: ":fearful:", v: allEmoji[51] }, { k: "\xF0\x9F\x98\xB0", v: allEmoji[52] }, { k: ":cold_sweat:", v: allEmoji[52] }, { k: "\xF0\x9F\x98\xAF", v: allEmoji[53] }, { k: ":hushed:", v: allEmoji[53] }, { k: "\xF0\x9F\x98\xA6", v: allEmoji[54] }, { k: ":frowning:", v: allEmoji[54] }, { k: "\xF0\x9F\x98\xA7", v: allEmoji[55] }, { k: ":anguished:", v: allEmoji[55] }, { k: "\xF0\x9F\x98\xA2", v: allEmoji[56] }, { k: ":cry:", v: allEmoji[56] }, { k: "\xF0\x9F\x98\xA5", v: allEmoji[57] }, { k: ":disappointed_relieved:", v: allEmoji[57] }, { k: "\xF0\x9F\x98\xAA", v: allEmoji[58] }, { k: ":sleepy:", v: allEmoji[58] }, { k: "\xF0\x9F\x98\x93", v: allEmoji[59] }, { k: ":sweat:", v: allEmoji[59] }, { k: "\xF0\x9F\x98\xAD", v: allEmoji[60] }, { k: ":sob:", v: allEmoji[60] }, { k: "\xF0\x9F\x98\xB5", v: allEmoji[61] }, { k: ":dizzy_face:", v: allEmoji[61] }, { k: "\xF0\x9F\x98\xB2", v: allEmoji[62] }, { k: ":astonished:", v: allEmoji[62] }, { k: "\xF0\x9F\xA4\x90", v: allEmoji[63] }, { k: ":zipper_mouth_face:", v: allEmoji[63] }, { k: "\xF0\x9F\x98\xB7", v: allEmoji[64] }, { k: ":mask:", v: allEmoji[64] }, { k: "\xF0\x9F\xA4\x92", v: allEmoji[65] }, { k: ":face_with_thermometer:", v: allEmoji[65] }, { k: "\xF0\x9F\xA4\x95", v: allEmoji[66] }, { k: ":face_with_head_bandage:", v: allEmoji[66] }, { k: "\xF0\x9F\x98\xB4", v: allEmoji[67] }, { k: ":sleeping:", v: allEmoji[67] }, { k: "\xF0\x9F\x92\xA4", v: allEmoji[68] }, { k: ":zzz:", v: allEmoji[68] }, { k: "\xF0\x9F\x92\xA9", v: allEmoji[69] }, { k: ":hankey:", v: allEmoji[69] }, { k: ":poop:", v: allEmoji[69] }, { k: ":shit:", v: allEmoji[69] }, { k: "\xF0\x9F\x98\x88", v: allEmoji[70] }, { k: ":smiling_imp:", v: allEmoji[70] }, { k: "\xF0\x9F\x91\xBF", v: allEmoji[71] }, { k: ":imp:", v: allEmoji[71] }, { k: "\xF0\x9F\x91\xB9", v: allEmoji[72] }, { k: ":japanese_ogre:", v: allEmoji[72] }, { k: "\xF0\x9F\x91\xBA", v: allEmoji[73] }, { k: ":japanese_goblin:", v: allEmoji[73] }, { k: "\xF0\x9F\x91\xBB", v: allEmoji[74] }, { k: ":ghost:", v: allEmoji[74] }, { k: "\xF0\x9F\x92\x80", v: allEmoji[75] }, { k: ":skull:", v: allEmoji[75] }, { k: "\xE2\x98\xA0\xEF\xB8\x8F", v: allEmoji[76] }, { k: ":skull_and_crossbones:", v: allEmoji[76] }, { k: "\xF0\x9F\x91\xBD", v: allEmoji[77] }, { k: ":alien:", v: allEmoji[77] }, { k: "\xF0\x9F\x91\xBE", v: allEmoji[78] }, { k: ":space_invader:", v: allEmoji[78] }, { k: "\xF0\x9F\xA4\x96", v: allEmoji[79] }, { k: ":robot:", v: allEmoji[79] }, { k: "\xF0\x9F\x98\xBA", v: allEmoji[80] }, { k: ":smiley_cat:", v: allEmoji[80] }, { k: "\xF0\x9F\x98\xB8", v: allEmoji[81] }, { k: ":smile_cat:", v: allEmoji[81] }, { k: "\xF0\x9F\x98\xB9", v: allEmoji[82] }, { k: ":joy_cat:", v: allEmoji[82] }, { k: "\xF0\x9F\x98\xBB", v: allEmoji[83] }, { k: ":heart_eyes_cat:", v: allEmoji[83] }, { k: "\xF0\x9F\x98\xBC", v: allEmoji[84] }, { k: ":smirk_cat:", v: allEmoji[84] }, { k: "\xF0\x9F\x98\xBD", v: allEmoji[85] }, { k: ":kissing_cat:", v: allEmoji[85] }, { k: "\xF0\x9F\x99\x80", v: allEmoji[86] }, { k: ":scream_cat:", v: allEmoji[86] }, { k: "\xF0\x9F\x98\xBF", v: allEmoji[87] }, { k: ":crying_cat_face:", v: allEmoji[87] }, { k: "\xF0\x9F\x98\xBE", v: allEmoji[88] }, { k: ":pouting_cat:", v: allEmoji[88] }, { k: "\xF0\x9F\x99\x8C", v: allEmoji[89] }, { k: ":raised_hands:", v: allEmoji[89] }, { k: "\xF0\x9F\x91\x8F", v: allEmoji[90] }, { k: ":clap:", v: allEmoji[90] }, { k: "\xF0\x9F\x91\x8D", v: allEmoji[91] }, { k: ":+1:", v: allEmoji[91] }, { k: ":thumbsup:", v: allEmoji[91] }, { k: "\xF0\x9F\x91\x8E", v: allEmoji[92] }, { k: ":-1:", v: allEmoji[92] }, { k: ":thumbsdown:", v: allEmoji[92] }, { k: "\xF0\x9F\x91\x8A", v: allEmoji[93] }, { k: ":facepunch:", v: allEmoji[93] }, { k: ":punch:", v: allEmoji[93] }, { k: "\xE2\x9C\x8A", v: allEmoji[94] }, { k: ":fist:", v: allEmoji[94] }, { k: "\xF0\x9F\x91\x8B", v: allEmoji[95] }, { k: ":wave:", v: allEmoji[95] }, { k: "\xF0\x9F\x91\x88", v: allEmoji[96] }, { k: ":point_left:", v: allEmoji[96] }, { k: "\xF0\x9F\x91\x89", v: allEmoji[97] }, { k: ":point_right:", v: allEmoji[97] }, { k: "\xF0\x9F\x91\x86", v: allEmoji[98] }, { k: ":point_up_2:", v: allEmoji[98] }, { k: "\xF0\x9F\x91\x87", v: allEmoji[99] }, { k: ":point_down:", v: allEmoji[99] }, { k: "\xF0\x9F\x91\x8C", v: allEmoji[100] }, { k: ":ok_hand:", v: allEmoji[100] }, { k: "\xE2\x98\x9D\xEF\xB8\x8F", v: allEmoji[101] }, { k: ":point_up:", v: allEmoji[101] }, { k: "\xE2\x9C\x8C\xEF\xB8\x8F", v: allEmoji[102] }, { k: ":v:", v: allEmoji[102] }, { k: "\xE2\x9C\x8B", v: allEmoji[103] }, { k: ":hand:", v: allEmoji[103] }, { k: ":raised_hand:", v: allEmoji[103] }, { k: "\xF0\x9F\x96\x90", v: allEmoji[104] }, { k: ":raised_hand_with_fingers_splayed:", v: allEmoji[104] }, { k: "\xF0\x9F\x91\x90", v: allEmoji[105] }, { k: ":open_hands:", v: allEmoji[105] }, { k: "\xF0\x9F\x92\xAA", v: allEmoji[106] }, { k: ":muscle:", v: allEmoji[106] }, { k: "\xF0\x9F\x99\x8F", v: allEmoji[107] }, { k: ":pray:", v: allEmoji[107] }, { k: "\xF0\x9F\x96\x96", v: allEmoji[108] }, { k: ":vulcan_salute:", v: allEmoji[108] }, { k: "\xF0\x9F\xA4\x98", v: allEmoji[109] }, { k: ":metal:", v: allEmoji[109] }, { k: "\xF0\x9F\x96\x95", v: allEmoji[110] }, { k: ":middle_finger:", v: allEmoji[110] }, { k: ":fu:", v: allEmoji[110] }, { k: "\xE2\x9C\x8D\xEF\xB8\x8F", v: allEmoji[111] }, { k: ":writing_hand:", v: allEmoji[111] }, { k: "\xF0\x9F\x92\x85", v: allEmoji[112] }, { k: ":nail_care:", v: allEmoji[112] }, { k: "\xF0\x9F\x91\x84", v: allEmoji[113] }, { k: ":lips:", v: allEmoji[113] }, { k: "\xF0\x9F\x91\x85", v: allEmoji[114] }, { k: ":tongue:", v: allEmoji[114] }, { k: "\xF0\x9F\x91\x82", v: allEmoji[115] }, { k: ":ear:", v: allEmoji[115] }, { k: "\xF0\x9F\x91\x83", v: allEmoji[116] }, { k: ":nose:", v: allEmoji[116] }, { k: "\xF0\x9F\x91\x81", v: allEmoji[117] }, { k: ":eye:", v: allEmoji[117] }, { k: "\xF0\x9F\x91\x80", v: allEmoji[118] }, { k: ":eyes:", v: allEmoji[118] }, { k: "\xF0\x9F\x97\xA3", v: allEmoji[119] }, { k: ":speaking_head:", v: allEmoji[119] }, { k: "\xF0\x9F\x91\xA4", v: allEmoji[120] }, { k: ":bust_in_silhouette:", v: allEmoji[120] }, { k: "\xF0\x9F\x91\xA5", v: allEmoji[121] }, { k: ":busts_in_silhouette:", v: allEmoji[121] }, { k: "\xF0\x9F\x91\xB6", v: allEmoji[122] }, { k: ":baby:", v: allEmoji[122] }, { k: "\xF0\x9F\x91\xA6", v: allEmoji[123] }, { k: ":boy:", v: allEmoji[123] }, { k: "\xF0\x9F\x91\xA7", v: allEmoji[124] }, { k: ":girl:", v: allEmoji[124] }, { k: "\xF0\x9F\x91\xA8", v: allEmoji[125] }, { k: ":man:", v: allEmoji[125] }, { k: "\xF0\x9F\x91\xA9", v: allEmoji[126] }, { k: ":woman:", v: allEmoji[126] }, { k: "\xF0\x9F\x91\xB1\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[127] }, { k: ":blonde_woman:", v: allEmoji[127] }, { k: "\xF0\x9F\x91\xB1", v: allEmoji[128] }, { k: ":blonde_man:", v: allEmoji[128] }, { k: ":person_with_blond_hair:", v: allEmoji[128] }, { k: "\xF0\x9F\x91\xB4", v: allEmoji[129] }, { k: ":older_man:", v: allEmoji[129] }, { k: "\xF0\x9F\x91\xB5", v: allEmoji[130] }, { k: ":older_woman:", v: allEmoji[130] }, { k: "\xF0\x9F\x91\xB2", v: allEmoji[131] }, { k: ":man_with_gua_pi_mao:", v: allEmoji[131] }, { k: "\xF0\x9F\x91\xB3\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[132] }, { k: ":woman_with_turban:", v: allEmoji[132] }, { k: "\xF0\x9F\x91\xB3", v: allEmoji[133] }, { k: ":man_with_turban:", v: allEmoji[133] }, { k: "\xF0\x9F\x91\xAE\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[134] }, { k: ":policewoman:", v: allEmoji[134] }, { k: "\xF0\x9F\x91\xAE", v: allEmoji[135] }, { k: ":policeman:", v: allEmoji[135] }, { k: ":cop:", v: allEmoji[135] }, { k: "\xF0\x9F\x91\xB7\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[136] }, { k: ":construction_worker_woman:", v: allEmoji[136] }, { k: "\xF0\x9F\x91\xB7", v: allEmoji[137] }, { k: ":construction_worker_man:", v: allEmoji[137] }, { k: ":construction_worker:", v: allEmoji[137] }, { k: "\xF0\x9F\x92\x82\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[138] }, { k: ":guardswoman:", v: allEmoji[138] }, { k: "\xF0\x9F\x92\x82", v: allEmoji[139] }, { k: ":guardsman:", v: allEmoji[139] }, { k: "\xF0\x9F\x95\xB5\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[140] }, { k: ":female_detective:", v: allEmoji[140] }, { k: "\xF0\x9F\x95\xB5\xEF\xB8\x8F", v: allEmoji[141] }, { k: ":male_detective:", v: allEmoji[141] }, { k: ":detective:", v: allEmoji[141] }, { k: "\xF0\x9F\x8E\x85", v: allEmoji[142] }, { k: ":santa:", v: allEmoji[142] }, { k: "\xF0\x9F\x91\xB8", v: allEmoji[143] }, { k: ":princess:", v: allEmoji[143] }, { k: "\xF0\x9F\x91\xB0", v: allEmoji[144] }, { k: ":bride_with_veil:", v: allEmoji[144] }, { k: "\xF0\x9F\x91\xBC", v: allEmoji[145] }, { k: ":angel:", v: allEmoji[145] }, { k: "\xF0\x9F\x99\x87\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[146] }, { k: ":bowing_woman:", v: allEmoji[146] }, { k: "\xF0\x9F\x99\x87", v: allEmoji[147] }, { k: ":bowing_man:", v: allEmoji[147] }, { k: ":bow:", v: allEmoji[147] }, { k: "\xF0\x9F\x92\x81", v: allEmoji[148] }, { k: ":tipping_hand_woman:", v: allEmoji[148] }, { k: ":information_desk_person:", v: allEmoji[148] }, { k: "\xF0\x9F\x92\x81\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[149] }, { k: ":tipping_hand_man:", v: allEmoji[149] }, { k: "\xF0\x9F\x99\x85", v: allEmoji[150] }, { k: ":no_good_woman:", v: allEmoji[150] }, { k: ":no_good:", v: allEmoji[150] }, { k: ":ng_woman:", v: allEmoji[150] }, { k: "\xF0\x9F\x99\x85\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[151] }, { k: ":no_good_man:", v: allEmoji[151] }, { k: ":ng_man:", v: allEmoji[151] }, { k: "\xF0\x9F\x99\x86", v: allEmoji[152] }, { k: ":ok_woman:", v: allEmoji[152] }, { k: "\xF0\x9F\x99\x86\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[153] }, { k: ":ok_man:", v: allEmoji[153] }, { k: "\xF0\x9F\x99\x8B", v: allEmoji[154] }, { k: ":raising_hand_woman:", v: allEmoji[154] }, { k: ":raising_hand:", v: allEmoji[154] }, { k: "\xF0\x9F\x99\x8B\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[155] }, { k: ":raising_hand_man:", v: allEmoji[155] }, { k: "\xF0\x9F\x99\x8E", v: allEmoji[156] }, { k: ":pouting_woman:", v: allEmoji[156] }, { k: ":person_with_pouting_face:", v: allEmoji[156] }, { k: "\xF0\x9F\x99\x8E\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[157] }, { k: ":pouting_man:", v: allEmoji[157] }, { k: "\xF0\x9F\x99\x8D", v: allEmoji[158] }, { k: ":frowning_woman:", v: allEmoji[158] }, { k: ":person_frowning:", v: allEmoji[158] }, { k: "\xF0\x9F\x99\x8D\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[159] }, { k: ":frowning_man:", v: allEmoji[159] }, { k: "\xF0\x9F\x92\x87", v: allEmoji[160] }, { k: ":haircut_woman:", v: allEmoji[160] }, { k: ":haircut:", v: allEmoji[160] }, { k: "\xF0\x9F\x92\x87\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[161] }, { k: ":haircut_man:", v: allEmoji[161] }, { k: "\xF0\x9F\x92\x86", v: allEmoji[162] }, { k: ":massage_woman:", v: allEmoji[162] }, { k: ":massage:", v: allEmoji[162] }, { k: "\xF0\x9F\x92\x86\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[163] }, { k: ":massage_man:", v: allEmoji[163] }, { k: "\xF0\x9F\x92\x83", v: allEmoji[164] }, { k: ":dancer:", v: allEmoji[164] }, { k: "\xF0\x9F\x91\xAF", v: allEmoji[165] }, { k: ":dancing_women:", v: allEmoji[165] }, { k: ":dancers:", v: allEmoji[165] }, { k: "\xF0\x9F\x91\xAF\xE2\x80\x8D\xE2\x99\x82\xEF\xB8\x8F", v: allEmoji[166] }, { k: ":dancing_men:", v: allEmoji[166] }, { k: "\xF0\x9F\x9A\xB6\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[167] }, { k: ":walking_woman:", v: allEmoji[167] }, { k: "\xF0\x9F\x9A\xB6", v: allEmoji[168] }, { k: ":walking_man:", v: allEmoji[168] }, { k: ":walking:", v: allEmoji[168] }, { k: "\xF0\x9F\x8F\x83\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[169] }, { k: ":running_woman:", v: allEmoji[169] }, { k: "\xF0\x9F\x8F\x83", v: allEmoji[170] }, { k: ":running_man:", v: allEmoji[170] }, { k: ":runner:", v: allEmoji[170] }, { k: ":running:", v: allEmoji[170] }, { k: "\xF0\x9F\x91\xAB", v: allEmoji[171] }, { k: ":couple:", v: allEmoji[171] }, { k: "\xF0\x9F\x91\xAD", v: allEmoji[172] }, { k: ":two_women_holding_hands:", v: allEmoji[172] }, { k: "\xF0\x9F\x91\xAC", v: allEmoji[173] }, { k: ":two_men_holding_hands:", v: allEmoji[173] }, { k: "\xF0\x9F\x92\x91", v: allEmoji[174] }, { k: ":couple_with_heart_woman_man:", v: allEmoji[174] }, { k: ":couple_with_heart:", v: allEmoji[174] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x91\xA9", v: allEmoji[175] }, { k: ":couple_with_heart_woman_woman:", v: allEmoji[175] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x91\xA8", v: allEmoji[176] }, { k: ":couple_with_heart_man_man:", v: allEmoji[176] }, { k: "\xF0\x9F\x92\x8F", v: allEmoji[177] }, { k: ":couplekiss_man_woman:", v: allEmoji[177] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x92\x8B\xE2\x80\x8D\xF0\x9F\x91\xA9", v: allEmoji[178] }, { k: ":couplekiss_woman_woman:", v: allEmoji[178] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xE2\x9D\xA4\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x92\x8B\xE2\x80\x8D\xF0\x9F\x91\xA8", v: allEmoji[179] }, { k: ":couplekiss_man_man:", v: allEmoji[179] }, { k: "\xF0\x9F\x91\xAA", v: allEmoji[180] }, { k: ":family_man_woman_boy:", v: allEmoji[180] }, { k: ":family:", v: allEmoji[180] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[181] }, { k: ":family_man_woman_girl:", v: allEmoji[181] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[182] }, { k: ":family_man_woman_girl_boy:", v: allEmoji[182] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[183] }, { k: ":family_man_woman_boy_boy:", v: allEmoji[183] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[184] }, { k: ":family_man_woman_girl_girl:", v: allEmoji[184] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[185] }, { k: ":family_woman_woman_boy:", v: allEmoji[185] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[186] }, { k: ":family_woman_woman_girl:", v: allEmoji[186] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[187] }, { k: ":family_woman_woman_girl_boy:", v: allEmoji[187] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[188] }, { k: ":family_woman_woman_boy_boy:", v: allEmoji[188] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[189] }, { k: ":family_woman_woman_girl_girl:", v: allEmoji[189] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[190] }, { k: ":family_man_man_boy:", v: allEmoji[190] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[191] }, { k: ":family_man_man_girl:", v: allEmoji[191] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[192] }, { k: ":family_man_man_girl_boy:", v: allEmoji[192] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[193] }, { k: ":family_man_man_boy_boy:", v: allEmoji[193] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[194] }, { k: ":family_man_man_girl_girl:", v: allEmoji[194] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[195] }, { k: ":family_woman_boy:", v: allEmoji[195] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[196] }, { k: ":family_woman_girl:", v: allEmoji[196] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[197] }, { k: ":family_woman_girl_boy:", v: allEmoji[197] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[198] }, { k: ":family_woman_boy_boy:", v: allEmoji[198] }, { k: "\xF0\x9F\x91\xA9\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[199] }, { k: ":family_woman_girl_girl:", v: allEmoji[199] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[200] }, { k: ":family_man_boy:", v: allEmoji[200] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[201] }, { k: ":family_man_girl:", v: allEmoji[201] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[202] }, { k: ":family_man_girl_boy:", v: allEmoji[202] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA6\xE2\x80\x8D\xF0\x9F\x91\xA6", v: allEmoji[203] }, { k: ":family_man_boy_boy:", v: allEmoji[203] }, { k: "\xF0\x9F\x91\xA8\xE2\x80\x8D\xF0\x9F\x91\xA7\xE2\x80\x8D\xF0\x9F\x91\xA7", v: allEmoji[204] }, { k: ":family_man_girl_girl:", v: allEmoji[204] }, { k: "\xF0\x9F\x91\x9A", v: allEmoji[205] }, { k: ":womans_clothes:", v: allEmoji[205] }, { k: "\xF0\x9F\x91\x95", v: allEmoji[206] }, { k: ":shirt:", v: allEmoji[206] }, { k: ":tshirt:", v: allEmoji[206] }, { k: "\xF0\x9F\x91\x96", v: allEmoji[207] }, { k: ":jeans:", v: allEmoji[207] }, { k: "\xF0\x9F\x91\x94", v: allEmoji[208] }, { k: ":necktie:", v: allEmoji[208] }, { k: "\xF0\x9F\x91\x97", v: allEmoji[209] }, { k: ":dress:", v: allEmoji[209] }, { k: "\xF0\x9F\x91\x99", v: allEmoji[210] }, { k: ":bikini:", v: allEmoji[210] }, { k: "\xF0\x9F\x91\x98", v: allEmoji[211] }, { k: ":kimono:", v: allEmoji[211] }, { k: "\xF0\x9F\x92\x84", v: allEmoji[212] }, { k: ":lipstick:", v: allEmoji[212] }, { k: "\xF0\x9F\x92\x8B", v: allEmoji[213] }, { k: ":kiss:", v: allEmoji[213] }, { k: "\xF0\x9F\x91\xA3", v: allEmoji[214] }, { k: ":footprints:", v: allEmoji[214] }, { k: "\xF0\x9F\x91\xA0", v: allEmoji[215] }, { k: ":high_heel:", v: allEmoji[215] }, { k: "\xF0\x9F\x91\xA1", v: allEmoji[216] }, { k: ":sandal:", v: allEmoji[216] }, { k: "\xF0\x9F\x91\xA2", v: allEmoji[217] }, { k: ":boot:", v: allEmoji[217] }, { k: "\xF0\x9F\x91\x9E", v: allEmoji[218] }, { k: ":mans_shoe:", v: allEmoji[218] }, { k: ":shoe:", v: allEmoji[218] }, { k: "\xF0\x9F\x91\x9F", v: allEmoji[219] }, { k: ":athletic_shoe:", v: allEmoji[219] }, { k: "\xF0\x9F\x91\x92", v: allEmoji[220] }, { k: ":womans_hat:", v: allEmoji[220] }, { k: "\xF0\x9F\x8E\xA9", v: allEmoji[221] }, { k: ":tophat:", v: allEmoji[221] }, { k: "\xF0\x9F\x8E\x93", v: allEmoji[222] }, { k: ":mortar_board:", v: allEmoji[222] }, { k: "\xF0\x9F\x91\x91", v: allEmoji[223] }, { k: ":crown:", v: allEmoji[223] }, { k: "\xE2\x9B\x91", v: allEmoji[224] }, { k: ":rescue_worker_helmet:", v: allEmoji[224] }, { k: "\xF0\x9F\x8E\x92", v: allEmoji[225] }, { k: ":school_satchel:", v: allEmoji[225] }, { k: "\xF0\x9F\x91\x9D", v: allEmoji[226] }, { k: ":pouch:", v: allEmoji[226] }, { k: "\xF0\x9F\x91\x9B", v: allEmoji[227] }, { k: ":purse:", v: allEmoji[227] }, { k: "\xF0\x9F\x91\x9C", v: allEmoji[228] }, { k: ":handbag:", v: allEmoji[228] }, { k: "\xF0\x9F\x92\xBC", v: allEmoji[229] }, { k: ":briefcase:", v: allEmoji[229] }, { k: "\xF0\x9F\x91\x93", v: allEmoji[230] }, { k: ":eyeglasses:", v: allEmoji[230] }, { k: "\xF0\x9F\x95\xB6", v: allEmoji[231] }, { k: ":dark_sunglasses:", v: allEmoji[231] }, { k: "\xF0\x9F\x92\x8D", v: allEmoji[232] }, { k: ":ring:", v: allEmoji[232] }, { k: "\xF0\x9F\x8C\x82", v: allEmoji[233] }, { k: ":closed_umbrella:", v: allEmoji[233] }, { k: "\xF0\x9F\x90\xB6", v: allEmoji[234] }, { k: ":dog:", v: allEmoji[234] }, { k: "\xF0\x9F\x90\xB1", v: allEmoji[235] }, { k: ":cat:", v: allEmoji[235] }, { k: "\xF0\x9F\x90\xAD", v: allEmoji[236] }, { k: ":mouse:", v: allEmoji[236] }, { k: "\xF0\x9F\x90\xB9", v: allEmoji[237] }, { k: ":hamster:", v: allEmoji[237] }, { k: "\xF0\x9F\x90\xB0", v: allEmoji[238] }, { k: ":rabbit:", v: allEmoji[238] }, { k: "\xF0\x9F\x90\xBB", v: allEmoji[239] }, { k: ":bear:", v: allEmoji[239] }, { k: "\xF0\x9F\x90\xBC", v: allEmoji[240] }, { k: ":panda_face:", v: allEmoji[240] }, { k: "\xF0\x9F\x90\xA8", v: allEmoji[241] }, { k: ":koala:", v: allEmoji[241] }, { k: "\xF0\x9F\x90\xAF", v: allEmoji[242] }, { k: ":tiger:", v: allEmoji[242] }, { k: "\xF0\x9F\xA6\x81", v: allEmoji[243] }, { k: ":lion:", v: allEmoji[243] }, { k: "\xF0\x9F\x90\xAE", v: allEmoji[244] }, { k: ":cow:", v: allEmoji[244] }, { k: "\xF0\x9F\x90\xB7", v: allEmoji[245] }, { k: ":pig:", v: allEmoji[245] }, { k: "\xF0\x9F\x90\xBD", v: allEmoji[246] }, { k: ":pig_nose:", v: allEmoji[246] }, { k: "\xF0\x9F\x90\xB8", v: allEmoji[247] }, { k: ":frog:", v: allEmoji[247] }, { k: "\xF0\x9F\x90\x99", v: allEmoji[248] }, { k: ":octopus:", v: allEmoji[248] }, { k: "\xF0\x9F\x90\xB5", v: allEmoji[249] }, { k: ":monkey_face:", v: allEmoji[249] }, { k: "\xF0\x9F\x99\x88", v: allEmoji[250] }, { k: ":see_no_evil:", v: allEmoji[250] }, { k: "\xF0\x9F\x99\x89", v: allEmoji[251] }, { k: ":hear_no_evil:", v: allEmoji[251] }, { k: "\xF0\x9F\x99\x8A", v: allEmoji[252] }, { k: ":speak_no_evil:", v: allEmoji[252] }, { k: "\xF0\x9F\x90\x92", v: allEmoji[253] }, { k: ":monkey:", v: allEmoji[253] }, { k: "\xF0\x9F\x90\x94", v: allEmoji[254] }, { k: ":chicken:", v: allEmoji[254] }, { k: "\xF0\x9F\x90\xA7", v: allEmoji[255] }, { k: ":penguin:", v: allEmoji[255] }, { k: "\xF0\x9F\x90\xA6", v: allEmoji[256] }, { k: ":bird:", v: allEmoji[256] }, { k: "\xF0\x9F\x90\xA4", v: allEmoji[257] }, { k: ":baby_chick:", v: allEmoji[257] }, { k: "\xF0\x9F\x90\xA3", v: allEmoji[258] }, { k: ":hatching_chick:", v: allEmoji[258] }, { k: "\xF0\x9F\x90\xA5", v: allEmoji[259] }, { k: ":hatched_chick:", v: allEmoji[259] }, { k: "\xF0\x9F\x90\xBA", v: allEmoji[260] }, { k: ":wolf:", v: allEmoji[260] }, { k: "\xF0\x9F\x90\x97", v: allEmoji[261] }, { k: ":boar:", v: allEmoji[261] }, { k: "\xF0\x9F\x90\xB4", v: allEmoji[262] }, { k: ":horse:", v: allEmoji[262] }, { k: "\xF0\x9F\xA6\x84", v: allEmoji[263] }, { k: ":unicorn:", v: allEmoji[263] }, { k: "\xF0\x9F\x90\x9D", v: allEmoji[264] }, { k: ":bee:", v: allEmoji[264] }, { k: ":honeybee:", v: allEmoji[264] }, { k: "\xF0\x9F\x90\x9B", v: allEmoji[265] }, { k: ":bug:", v: allEmoji[265] }, { k: "\xF0\x9F\x90\x8C", v: allEmoji[266] }, { k: ":snail:", v: allEmoji[266] }, { k: "\xF0\x9F\x90\x9E", v: allEmoji[267] }, { k: ":beetle:", v: allEmoji[267] }, { k: "\xF0\x9F\x90\x9C", v: allEmoji[268] }, { k: ":ant:", v: allEmoji[268] }, { k: "\xF0\x9F\x95\xB7", v: allEmoji[269] }, { k: ":spider:", v: allEmoji[269] }, { k: "\xF0\x9F\xA6\x82", v: allEmoji[270] }, { k: ":scorpion:", v: allEmoji[270] }, { k: "\xF0\x9F\xA6\x80", v: allEmoji[271] }, { k: ":crab:", v: allEmoji[271] }, { k: "\xF0\x9F\x90\x8D", v: allEmoji[272] }, { k: ":snake:", v: allEmoji[272] }, { k: "\xF0\x9F\x90\xA2", v: allEmoji[273] }, { k: ":turtle:", v: allEmoji[273] }, { k: "\xF0\x9F\x90\xA0", v: allEmoji[274] }, { k: ":tropical_fish:", v: allEmoji[274] }, { k: "\xF0\x9F\x90\x9F", v: allEmoji[275] }, { k: ":fish:", v: allEmoji[275] }, { k: "\xF0\x9F\x90\xA1", v: allEmoji[276] }, { k: ":blowfish:", v: allEmoji[276] }, { k: "\xF0\x9F\x90\xAC", v: allEmoji[277] }, { k: ":dolphin:", v: allEmoji[277] }, { k: ":flipper:", v: allEmoji[277] }, { k: "\xF0\x9F\x90\xB3", v: allEmoji[278] }, { k: ":whale:", v: allEmoji[278] }, { k: "\xF0\x9F\x90\x8B", v: allEmoji[279] }, { k: ":whale2:", v: allEmoji[279] }, { k: "\xF0\x9F\x90\x8A", v: allEmoji[280] }, { k: ":crocodile:", v: allEmoji[280] }, { k: "\xF0\x9F\x90\x86", v: allEmoji[281] }, { k: ":leopard:", v: allEmoji[281] }, { k: "\xF0\x9F\x90\x85", v: allEmoji[282] }, { k: ":tiger2:", v: allEmoji[282] }, { k: "\xF0\x9F\x90\x83", v: allEmoji[283] }, { k: ":water_buffalo:", v: allEmoji[283] }, { k: "\xF0\x9F\x90\x82", v: allEmoji[284] }, { k: ":ox:", v: allEmoji[284] }, { k: "\xF0\x9F\x90\x84", v: allEmoji[285] }, { k: ":cow2:", v: allEmoji[285] }, { k: "\xF0\x9F\x90\xAA", v: allEmoji[286] }, { k: ":dromedary_camel:", v: allEmoji[286] }, { k: "\xF0\x9F\x90\xAB", v: allEmoji[287] }, { k: ":camel:", v: allEmoji[287] }, { k: "\xF0\x9F\x90\x98", v: allEmoji[288] }, { k: ":elephant:", v: allEmoji[288] }, { k: "\xF0\x9F\x90\x90", v: allEmoji[289] }, { k: ":goat:", v: allEmoji[289] }, { k: "\xF0\x9F\x90\x8F", v: allEmoji[290] }, { k: ":ram:", v: allEmoji[290] }, { k: "\xF0\x9F\x90\x91", v: allEmoji[291] }, { k: ":sheep:", v: allEmoji[291] }, { k: "\xF0\x9F\x90\x8E", v: allEmoji[292] }, { k: ":racehorse:", v: allEmoji[292] }, { k: "\xF0\x9F\x90\x96", v: allEmoji[293] }, { k: ":pig2:", v: allEmoji[293] }, { k: "\xF0\x9F\x90\x80", v: allEmoji[294] }, { k: ":rat:", v: allEmoji[294] }, { k: "\xF0\x9F\x90\x81", v: allEmoji[295] }, { k: ":mouse2:", v: allEmoji[295] }, { k: "\xF0\x9F\x90\x93", v: allEmoji[296] }, { k: ":rooster:", v: allEmoji[296] }, { k: "\xF0\x9F\xA6\x83", v: allEmoji[297] }, { k: ":turkey:", v: allEmoji[297] }, { k: "\xF0\x9F\x95\x8A", v: allEmoji[298] }, { k: ":dove:", v: allEmoji[298] }, { k: "\xF0\x9F\x90\x95", v: allEmoji[299] }, { k: ":dog2:", v: allEmoji[299] }, { k: "\xF0\x9F\x90\xA9", v: allEmoji[300] }, { k: ":poodle:", v: allEmoji[300] }, { k: "\xF0\x9F\x90\x88", v: allEmoji[301] }, { k: ":cat2:", v: allEmoji[301] }, { k: "\xF0\x9F\x90\x87", v: allEmoji[302] }, { k: ":rabbit2:", v: allEmoji[302] }, { k: "\xF0\x9F\x90\xBF", v: allEmoji[303] }, { k: ":chipmunk:", v: allEmoji[303] }, { k: "\xF0\x9F\x90\xBE", v: allEmoji[304] }, { k: ":feet:", v: allEmoji[304] }, { k: ":paw_prints:", v: allEmoji[304] }, { k: "\xF0\x9F\x90\x89", v: allEmoji[305] }, { k: ":dragon:", v: allEmoji[305] }, { k: "\xF0\x9F\x90\xB2", v: allEmoji[306] }, { k: ":dragon_face:", v: allEmoji[306] }, { k: "\xF0\x9F\x8C\xB5", v: allEmoji[307] }, { k: ":cactus:", v: allEmoji[307] }, { k: "\xF0\x9F\x8E\x84", v: allEmoji[308] }, { k: ":christmas_tree:", v: allEmoji[308] }, { k: "\xF0\x9F\x8C\xB2", v: allEmoji[309] }, { k: ":evergreen_tree:", v: allEmoji[309] }, { k: "\xF0\x9F\x8C\xB3", v: allEmoji[310] }, { k: ":deciduous_tree:", v: allEmoji[310] }, { k: "\xF0\x9F\x8C\xB4", v: allEmoji[311] }, { k: ":palm_tree:", v: allEmoji[311] }, { k: "\xF0\x9F\x8C\xB1", v: allEmoji[312] }, { k: ":seedling:", v: allEmoji[312] }, { k: "\xF0\x9F\x8C\xBF", v: allEmoji[313] }, { k: ":herb:", v: allEmoji[313] }, { k: "\xE2\x98\x98", v: allEmoji[314] }, { k: ":shamrock:", v: allEmoji[314] }, { k: "\xF0\x9F\x8D\x80", v: allEmoji[315] }, { k: ":four_leaf_clover:", v: allEmoji[315] }, { k: "\xF0\x9F\x8E\x8D", v: allEmoji[316] }, { k: ":bamboo:", v: allEmoji[316] }, { k: "\xF0\x9F\x8E\x8B", v: allEmoji[317] }, { k: ":tanabata_tree:", v: allEmoji[317] }, { k: "\xF0\x9F\x8D\x83", v: allEmoji[318] }, { k: ":leaves:", v: allEmoji[318] }, { k: "\xF0\x9F\x8D\x82", v: allEmoji[319] }, { k: ":fallen_leaf:", v: allEmoji[319] }, { k: "\xF0\x9F\x8D\x81", v: allEmoji[320] }, { k: ":maple_leaf:", v: allEmoji[320] }, { k: "\xF0\x9F\x8C\xBE", v: allEmoji[321] }, { k: ":ear_of_rice:", v: allEmoji[321] }, { k: "\xF0\x9F\x8C\xBA", v: allEmoji[322] }, { k: ":hibiscus:", v: allEmoji[322] }, { k: "\xF0\x9F\x8C\xBB", v: allEmoji[323] }, { k: ":sunflower:", v: allEmoji[323] }, { k: "\xF0\x9F\x8C\xB9", v: allEmoji[324] }, { k: ":rose:", v: allEmoji[324] }, { k: "\xF0\x9F\x8C\xB7", v: allEmoji[325] }, { k: ":tulip:", v: allEmoji[325] }, { k: "\xF0\x9F\x8C\xBC", v: allEmoji[326] }, { k: ":blossom:", v: allEmoji[326] }, { k: "\xF0\x9F\x8C\xB8", v: allEmoji[327] }, { k: ":cherry_blossom:", v: allEmoji[327] }, { k: "\xF0\x9F\x92\x90", v: allEmoji[328] }, { k: ":bouquet:", v: allEmoji[328] }, { k: "\xF0\x9F\x8D\x84", v: allEmoji[329] }, { k: ":mushroom:", v: allEmoji[329] }, { k: "\xF0\x9F\x8C\xB0", v: allEmoji[330] }, { k: ":chestnut:", v: allEmoji[330] }, { k: "\xF0\x9F\x8E\x83", v: allEmoji[331] }, { k: ":jack_o_lantern:", v: allEmoji[331] }, { k: "\xF0\x9F\x90\x9A", v: allEmoji[332] }, { k: ":shell:", v: allEmoji[332] }, { k: "\xF0\x9F\x95\xB8", v: allEmoji[333] }, { k: ":spider_web:", v: allEmoji[333] }, { k: "\xF0\x9F\x8C\x8E", v: allEmoji[334] }, { k: ":earth_americas:", v: allEmoji[334] }, { k: "\xF0\x9F\x8C\x8D", v: allEmoji[335] }, { k: ":earth_africa:", v: allEmoji[335] }, { k: "\xF0\x9F\x8C\x8F", v: allEmoji[336] }, { k: ":earth_asia:", v: allEmoji[336] }, { k: "\xF0\x9F\x8C\x95", v: allEmoji[337] }, { k: ":full_moon:", v: allEmoji[337] }, { k: "\xF0\x9F\x8C\x96", v: allEmoji[338] }, { k: ":waning_gibbous_moon:", v: allEmoji[338] }, { k: "\xF0\x9F\x8C\x97", v: allEmoji[339] }, { k: ":last_quarter_moon:", v: allEmoji[339] }, { k: "\xF0\x9F\x8C\x98", v: allEmoji[340] }, { k: ":waning_crescent_moon:", v: allEmoji[340] }, { k: "\xF0\x9F\x8C\x91", v: allEmoji[341] }, { k: ":new_moon:", v: allEmoji[341] }, { k: "\xF0\x9F\x8C\x92", v: allEmoji[342] }, { k: ":waxing_crescent_moon:", v: allEmoji[342] }, { k: "\xF0\x9F\x8C\x93", v: allEmoji[343] }, { k: ":first_quarter_moon:", v: allEmoji[343] }, { k: "\xF0\x9F\x8C\x94", v: allEmoji[344] }, { k: ":moon:", v: allEmoji[344] }, { k: ":waxing_gibbous_moon:", v: allEmoji[344] }, { k: "\xF0\x9F\x8C\x9A", v: allEmoji[345] }, { k: ":new_moon_with_face:", v: allEmoji[345] }, { k: "\xF0\x9F\x8C\x9D", v: allEmoji[346] }, { k: ":full_moon_with_face:", v: allEmoji[346] }, { k: "\xF0\x9F\x8C\x9B", v: allEmoji[347] }, { k: ":first_quarter_moon_with_face:", v: allEmoji[347] }, { k: "\xF0\x9F\x8C\x9C", v: allEmoji[348] }, { k: ":last_quarter_moon_with_face:", v: allEmoji[348] }, { k: "\xF0\x9F\x8C\x9E", v: allEmoji[349] }, { k: ":sun_with_face:", v: allEmoji[349] }, { k: "\xF0\x9F\x8C\x99", v: allEmoji[350] }, { k: ":crescent_moon:", v: allEmoji[350] }, { k: "\xE2\xAD\x90\xEF\xB8\x8F", v: allEmoji[351] }, { k: ":star:", v: allEmoji[351] }, { k: "\xF0\x9F\x8C\x9F", v: allEmoji[352] }, { k: ":star2:", v: allEmoji[352] }, { k: "\xF0\x9F\x92\xAB", v: allEmoji[353] }, { k: ":dizzy:", v: allEmoji[353] }, { k: "\xE2\x9C\xA8", v: allEmoji[354] }, { k: ":sparkles:", v: allEmoji[354] }, { k: "\xE2\x98\x84\xEF\xB8\x8F", v: allEmoji[355] }, { k: ":comet:", v: allEmoji[355] }, { k: "\xE2\x98\x80\xEF\xB8\x8F", v: allEmoji[356] }, { k: ":sunny:", v: allEmoji[356] }, { k: "\xF0\x9F\x8C\xA4", v: allEmoji[357] }, { k: ":sun_behind_small_cloud:", v: allEmoji[357] }, { k: "\xE2\x9B\x85\xEF\xB8\x8F", v: allEmoji[358] }, { k: ":partly_sunny:", v: allEmoji[358] }, { k: "\xF0\x9F\x8C\xA5", v: allEmoji[359] }, { k: ":sun_behind_large_cloud:", v: allEmoji[359] }, { k: "\xF0\x9F\x8C\xA6", v: allEmoji[360] }, { k: ":sun_behind_rain_cloud:", v: allEmoji[360] }, { k: "\xE2\x98\x81\xEF\xB8\x8F", v: allEmoji[361] }, { k: ":cloud:", v: allEmoji[361] }, { k: "\xF0\x9F\x8C\xA7", v: allEmoji[362] }, { k: ":cloud_with_rain:", v: allEmoji[362] }, { k: "\xE2\x9B\x88", v: allEmoji[363] }, { k: ":cloud_with_lightning_and_rain:", v: allEmoji[363] }, { k: "\xF0\x9F\x8C\xA9", v: allEmoji[364] }, { k: ":cloud_with_lightning:", v: allEmoji[364] }, { k: "\xE2\x9A\xA1\xEF\xB8\x8F", v: allEmoji[365] }, { k: ":zap:", v: allEmoji[365] }, { k: "\xF0\x9F\x94\xA5", v: allEmoji[366] }, { k: ":fire:", v: allEmoji[366] }, { k: "\xF0\x9F\x92\xA5", v: allEmoji[367] }, { k: ":boom:", v: allEmoji[367] }, { k: ":collision:", v: allEmoji[367] }, { k: "\xE2\x9D\x84\xEF\xB8\x8F", v: allEmoji[368] }, { k: ":snowflake:", v: allEmoji[368] }, { k: "\xF0\x9F\x8C\xA8", v: allEmoji[369] }, { k: ":cloud_with_snow:", v: allEmoji[369] }, { k: "\xE2\x98\x83\xEF\xB8\x8F", v: allEmoji[370] }, { k: ":snowman_with_snow:", v: allEmoji[370] }, { k: "\xE2\x9B\x84\xEF\xB8\x8F", v: allEmoji[371] }, { k: ":snowman:", v: allEmoji[371] }, { k: "\xF0\x9F\x8C\xAC", v: allEmoji[372] }, { k: ":wind_face:", v: allEmoji[372] }, { k: "\xF0\x9F\x92\xA8", v: allEmoji[373] }, { k: ":dash:", v: allEmoji[373] }, { k: "\xF0\x9F\x8C\xAA", v: allEmoji[374] }, { k: ":tornado:", v: allEmoji[374] }, { k: "\xF0\x9F\x8C\xAB", v: allEmoji[375] }, { k: ":fog:", v: allEmoji[375] }, { k: "\xE2\x98\x82\xEF\xB8\x8F", v: allEmoji[376] }, { k: ":open_umbrella:", v: allEmoji[376] }, { k: "\xE2\x98\x94\xEF\xB8\x8F", v: allEmoji[377] }, { k: ":umbrella:", v: allEmoji[377] }, { k: "\xF0\x9F\x92\xA7", v: allEmoji[378] }, { k: ":droplet:", v: allEmoji[378] }, { k: "\xF0\x9F\x92\xA6", v: allEmoji[379] }, { k: ":sweat_drops:", v: allEmoji[379] }, { k: "\xF0\x9F\x8C\x8A", v: allEmoji[380] }, { k: ":ocean:", v: allEmoji[380] }, { k: "\xF0\x9F\x8D\x8F", v: allEmoji[381] }, { k: ":green_apple:", v: allEmoji[381] }, { k: "\xF0\x9F\x8D\x8E", v: allEmoji[382] }, { k: ":apple:", v: allEmoji[382] }, { k: "\xF0\x9F\x8D\x90", v: allEmoji[383] }, { k: ":pear:", v: allEmoji[383] }, { k: "\xF0\x9F\x8D\x8A", v: allEmoji[384] }, { k: ":tangerine:", v: allEmoji[384] }, { k: ":orange:", v: allEmoji[384] }, { k: ":mandarin:", v: allEmoji[384] }, { k: "\xF0\x9F\x8D\x8B", v: allEmoji[385] }, { k: ":lemon:", v: allEmoji[385] }, { k: "\xF0\x9F\x8D\x8C", v: allEmoji[386] }, { k: ":banana:", v: allEmoji[386] }, { k: "\xF0\x9F\x8D\x89", v: allEmoji[387] }, { k: ":watermelon:", v: allEmoji[387] }, { k: "\xF0\x9F\x8D\x87", v: allEmoji[388] }, { k: ":grapes:", v: allEmoji[388] }, { k: "\xF0\x9F\x8D\x93", v: allEmoji[389] }, { k: ":strawberry:", v: allEmoji[389] }, { k: "\xF0\x9F\x8D\x88", v: allEmoji[390] }, { k: ":melon:", v: allEmoji[390] }, { k: "\xF0\x9F\x8D\x92", v: allEmoji[391] }, { k: ":cherries:", v: allEmoji[391] }, { k: "\xF0\x9F\x8D\x91", v: allEmoji[392] }, { k: ":peach:", v: allEmoji[392] }, { k: "\xF0\x9F\x8D\x8D", v: allEmoji[393] }, { k: ":pineapple:", v: allEmoji[393] }, { k: "\xF0\x9F\x8D\x85", v: allEmoji[394] }, { k: ":tomato:", v: allEmoji[394] }, { k: "\xF0\x9F\x8D\x86", v: allEmoji[395] }, { k: ":eggplant:", v: allEmoji[395] }, { k: "\xF0\x9F\x8C\xB6", v: allEmoji[396] }, { k: ":hot_pepper:", v: allEmoji[396] }, { k: "\xF0\x9F\x8C\xBD", v: allEmoji[397] }, { k: ":corn:", v: allEmoji[397] }, { k: "\xF0\x9F\x8D\xA0", v: allEmoji[398] }, { k: ":sweet_potato:", v: allEmoji[398] }, { k: "\xF0\x9F\x8D\xAF", v: allEmoji[399] }, { k: ":honey_pot:", v: allEmoji[399] }, { k: "\xF0\x9F\x8D\x9E", v: allEmoji[400] }, { k: ":bread:", v: allEmoji[400] }, { k: "\xF0\x9F\xA7\x80", v: allEmoji[401] }, { k: ":cheese:", v: allEmoji[401] }, { k: "\xF0\x9F\x8D\x97", v: allEmoji[402] }, { k: ":poultry_leg:", v: allEmoji[402] }, { k: "\xF0\x9F\x8D\x96", v: allEmoji[403] }, { k: ":meat_on_bone:", v: allEmoji[403] }, { k: "\xF0\x9F\x8D\xA4", v: allEmoji[404] }, { k: ":fried_shrimp:", v: allEmoji[404] }, { k: "\xF0\x9F\x8D\xB3", v: allEmoji[405] }, { k: ":egg:", v: allEmoji[405] }, { k: "\xF0\x9F\x8D\x94", v: allEmoji[406] }, { k: ":hamburger:", v: allEmoji[406] }, { k: "\xF0\x9F\x8D\x9F", v: allEmoji[407] }, { k: ":fries:", v: allEmoji[407] }, { k: "\xF0\x9F\x8C\xAD", v: allEmoji[408] }, { k: ":hotdog:", v: allEmoji[408] }, { k: "\xF0\x9F\x8D\x95", v: allEmoji[409] }, { k: ":pizza:", v: allEmoji[409] }, { k: "\xF0\x9F\x8D\x9D", v: allEmoji[410] }, { k: ":spaghetti:", v: allEmoji[410] }, { k: "\xF0\x9F\x8C\xAE", v: allEmoji[411] }, { k: ":taco:", v: allEmoji[411] }, { k: "\xF0\x9F\x8C\xAF", v: allEmoji[412] }, { k: ":burrito:", v: allEmoji[412] }, { k: "\xF0\x9F\x8D\x9C", v: allEmoji[413] }, { k: ":ramen:", v: allEmoji[413] }, { k: "\xF0\x9F\x8D\xB2", v: allEmoji[414] }, { k: ":stew:", v: allEmoji[414] }, { k: "\xF0\x9F\x8D\xA5", v: allEmoji[415] }, { k: ":fish_cake:", v: allEmoji[415] }, { k: "\xF0\x9F\x8D\xA3", v: allEmoji[416] }, { k: ":sushi:", v: allEmoji[416] }, { k: "\xF0\x9F\x8D\xB1", v: allEmoji[417] }, { k: ":bento:", v: allEmoji[417] }, { k: "\xF0\x9F\x8D\x9B", v: allEmoji[418] }, { k: ":curry:", v: allEmoji[418] }, { k: "\xF0\x9F\x8D\x99", v: allEmoji[419] }, { k: ":rice_ball:", v: allEmoji[419] }, { k: "\xF0\x9F\x8D\x9A", v: allEmoji[420] }, { k: ":rice:", v: allEmoji[420] }, { k: "\xF0\x9F\x8D\x98", v: allEmoji[421] }, { k: ":rice_cracker:", v: allEmoji[421] }, { k: "\xF0\x9F\x8D\xA2", v: allEmoji[422] }, { k: ":oden:", v: allEmoji[422] }, { k: "\xF0\x9F\x8D\xA1", v: allEmoji[423] }, { k: ":dango:", v: allEmoji[423] }, { k: "\xF0\x9F\x8D\xA7", v: allEmoji[424] }, { k: ":shaved_ice:", v: allEmoji[424] }, { k: "\xF0\x9F\x8D\xA8", v: allEmoji[425] }, { k: ":ice_cream:", v: allEmoji[425] }, { k: "\xF0\x9F\x8D\xA6", v: allEmoji[426] }, { k: ":icecream:", v: allEmoji[426] }, { k: "\xF0\x9F\x8D\xB0", v: allEmoji[427] }, { k: ":cake:", v: allEmoji[427] }, { k: "\xF0\x9F\x8E\x82", v: allEmoji[428] }, { k: ":birthday:", v: allEmoji[428] }, { k: "\xF0\x9F\x8D\xAE", v: allEmoji[429] }, { k: ":custard:", v: allEmoji[429] }, { k: "\xF0\x9F\x8D\xAC", v: allEmoji[430] }, { k: ":candy:", v: allEmoji[430] }, { k: "\xF0\x9F\x8D\xAD", v: allEmoji[431] }, { k: ":lollipop:", v: allEmoji[431] }, { k: "\xF0\x9F\x8D\xAB", v: allEmoji[432] }, { k: ":chocolate_bar:", v: allEmoji[432] }, { k: "\xF0\x9F\x8D\xBF", v: allEmoji[433] }, { k: ":popcorn:", v: allEmoji[433] }, { k: "\xF0\x9F\x8D\xA9", v: allEmoji[434] }, { k: ":doughnut:", v: allEmoji[434] }, { k: "\xF0\x9F\x8D\xAA", v: allEmoji[435] }, { k: ":cookie:", v: allEmoji[435] }, { k: "\xF0\x9F\x8D\xBA", v: allEmoji[436] }, { k: ":beer:", v: allEmoji[436] }, { k: "\xF0\x9F\x8D\xBB", v: allEmoji[437] }, { k: ":beers:", v: allEmoji[437] }, { k: "\xF0\x9F\x8D\xB7", v: allEmoji[438] }, { k: ":wine_glass:", v: allEmoji[438] }, { k: "\xF0\x9F\x8D\xB8", v: allEmoji[439] }, { k: ":cocktail:", v: allEmoji[439] }, { k: "\xF0\x9F\x8D\xB9", v: allEmoji[440] }, { k: ":tropical_drink:", v: allEmoji[440] }, { k: "\xF0\x9F\x8D\xBE", v: allEmoji[441] }, { k: ":champagne:", v: allEmoji[441] }, { k: "\xF0\x9F\x8D\xB6", v: allEmoji[442] }, { k: ":sake:", v: allEmoji[442] }, { k: "\xF0\x9F\x8D\xB5", v: allEmoji[443] }, { k: ":tea:", v: allEmoji[443] }, { k: "\xE2\x98\x95\xEF\xB8\x8F", v: allEmoji[444] }, { k: ":coffee:", v: allEmoji[444] }, { k: "\xF0\x9F\x8D\xBC", v: allEmoji[445] }, { k: ":baby_bottle:", v: allEmoji[445] }, { k: "\xF0\x9F\x8D\xB4", v: allEmoji[446] }, { k: ":fork_and_knife:", v: allEmoji[446] }, { k: "\xF0\x9F\x8D\xBD", v: allEmoji[447] }, { k: ":plate_with_cutlery:", v: allEmoji[447] }, { k: "\xE2\x9A\xBD\xEF\xB8\x8F", v: allEmoji[448] }, { k: ":soccer:", v: allEmoji[448] }, { k: "\xF0\x9F\x8F\x80", v: allEmoji[449] }, { k: ":basketball:", v: allEmoji[449] }, { k: "\xF0\x9F\x8F\x88", v: allEmoji[450] }, { k: ":football:", v: allEmoji[450] }, { k: "\xE2\x9A\xBE\xEF\xB8\x8F", v: allEmoji[451] }, { k: ":baseball:", v: allEmoji[451] }, { k: "\xF0\x9F\x8E\xBE", v: allEmoji[452] }, { k: ":tennis:", v: allEmoji[452] }, { k: "\xF0\x9F\x8F\x90", v: allEmoji[453] }, { k: ":volleyball:", v: allEmoji[453] }, { k: "\xF0\x9F\x8F\x89", v: allEmoji[454] }, { k: ":rugby_football:", v: allEmoji[454] }, { k: "\xF0\x9F\x8E\xB1", v: allEmoji[455] }, { k: ":8ball:", v: allEmoji[455] }, { k: "\xF0\x9F\x8F\x93", v: allEmoji[456] }, { k: ":ping_pong:", v: allEmoji[456] }, { k: "\xF0\x9F\x8F\xB8", v: allEmoji[457] }, { k: ":badminton:", v: allEmoji[457] }, { k: "\xF0\x9F\x8F\x92", v: allEmoji[458] }, { k: ":ice_hockey:", v: allEmoji[458] }, { k: "\xF0\x9F\x8F\x91", v: allEmoji[459] }, { k: ":field_hockey:", v: allEmoji[459] }, { k: "\xF0\x9F\x8F\x8F", v: allEmoji[460] }, { k: ":cricket:", v: allEmoji[460] }, { k: "\xF0\x9F\x8F\xB9", v: allEmoji[461] }, { k: ":bow_and_arrow:", v: allEmoji[461] }, { k: "\xE2\x9B\xB3\xEF\xB8\x8F", v: allEmoji[462] }, { k: ":golf:", v: allEmoji[462] }, { k: "\xF0\x9F\x8E\xA3", v: allEmoji[463] }, { k: ":fishing_pole_and_fish:", v: allEmoji[463] }, { k: "\xE2\x9B\xB8", v: allEmoji[464] }, { k: ":ice_skate:", v: allEmoji[464] }, { k: "\xF0\x9F\x8E\xBF", v: allEmoji[465] }, { k: ":ski:", v: allEmoji[465] }, { k: "\xE2\x9B\xB7", v: allEmoji[466] }, { k: ":skier:", v: allEmoji[466] }, { k: "\xF0\x9F\x8F\x82", v: allEmoji[467] }, { k: ":snowboarder:", v: allEmoji[467] }, { k: "\xF0\x9F\x8F\x8B\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[468] }, { k: ":weight_lifting_woman:", v: allEmoji[468] }, { k: "\xF0\x9F\x8F\x8B\xEF\xB8\x8F", v: allEmoji[469] }, { k: ":weight_lifting_man:", v: allEmoji[469] }, { k: "\xE2\x9B\xB9\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[470] }, { k: ":basketball_woman:", v: allEmoji[470] }, { k: "\xE2\x9B\xB9\xEF\xB8\x8F", v: allEmoji[471] }, { k: ":basketball_man:", v: allEmoji[471] }, { k: "\xF0\x9F\x8F\x8C\xEF\xB8\x8F\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[472] }, { k: ":golfing_woman:", v: allEmoji[472] }, { k: "\xF0\x9F\x8F\x8C\xEF\xB8\x8F", v: allEmoji[473] }, { k: ":golfing_man:", v: allEmoji[473] }, { k: "\xF0\x9F\x8F\x84\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[474] }, { k: ":surfing_woman:", v: allEmoji[474] }, { k: "\xF0\x9F\x8F\x84", v: allEmoji[475] }, { k: ":surfing_man:", v: allEmoji[475] }, { k: ":surfer:", v: allEmoji[475] }, { k: "\xF0\x9F\x8F\x8A\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[476] }, { k: ":swimming_woman:", v: allEmoji[476] }, { k: "\xF0\x9F\x8F\x8A", v: allEmoji[477] }, { k: ":swimming_man:", v: allEmoji[477] }, { k: ":swimmer:", v: allEmoji[477] }, { k: "\xF0\x9F\x9A\xA3\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[478] }, { k: ":rowing_woman:", v: allEmoji[478] }, { k: "\xF0\x9F\x9A\xA3", v: allEmoji[479] }, { k: ":rowing_man:", v: allEmoji[479] }, { k: ":rowboat:", v: allEmoji[479] }, { k: "\xF0\x9F\x8F\x87", v: allEmoji[480] }, { k: ":horse_racing:", v: allEmoji[480] }, { k: "\xF0\x9F\x9A\xB4\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[481] }, { k: ":biking_woman:", v: allEmoji[481] }, { k: "\xF0\x9F\x9A\xB4", v: allEmoji[482] }, { k: ":biking_man:", v: allEmoji[482] }, { k: ":bicyclist:", v: allEmoji[482] }, { k: "\xF0\x9F\x9A\xB5\xE2\x80\x8D\xE2\x99\x80\xEF\xB8\x8F", v: allEmoji[483] }, { k: ":mountain_biking_woman:", v: allEmoji[483] }, { k: "\xF0\x9F\x9A\xB5", v: allEmoji[484] }, { k: ":mountain_biking_man:", v: allEmoji[484] }, { k: ":mountain_bicyclist:", v: allEmoji[484] }, { k: "\xF0\x9F\x9B\x80", v: allEmoji[485] }, { k: ":bath:", v: allEmoji[485] }, { k: "\xF0\x9F\x95\xB4", v: allEmoji[486] }, { k: ":business_suit_levitating:", v: allEmoji[486] }, { k: "\xF0\x9F\x8E\x97", v: allEmoji[487] }, { k: ":reminder_ribbon:", v: allEmoji[487] }, { k: "\xF0\x9F\x8E\xBD", v: allEmoji[488] }, { k: ":running_shirt_with_sash:", v: allEmoji[488] }, { k: "\xF0\x9F\x8F\x85", v: allEmoji[489] }, { k: ":medal_sports:", v: allEmoji[489] }, { k: "\xF0\x9F\x8E\x96", v: allEmoji[490] }, { k: ":medal_military:", v: allEmoji[490] }, { k: "\xF0\x9F\x8F\x86", v: allEmoji[491] }, { k: ":trophy:", v: allEmoji[491] }, { k: "\xF0\x9F\x8F\xB5", v: allEmoji[492] }, { k: ":rosette:", v: allEmoji[492] }, { k: "\xF0\x9F\x8E\xAF", v: allEmoji[493] }, { k: ":dart:", v: allEmoji[493] }, { k: "\xF0\x9F\x8E\xAB", v: allEmoji[494] }, { k: ":ticket:", v: allEmoji[494] }, { k: "\xF0\x9F\x8E\x9F", v: allEmoji[495] }, { k: ":tickets:", v: allEmoji[495] }, { k: "\xF0\x9F\x8E\xAD", v: allEmoji[496] }, { k: ":performing_arts:", v: allEmoji[496] }, { k: "\xF0\x9F\x8E\xA8", v: allEmoji[497] }, { k: ":art:", v: allEmoji[497] }, { k: "\xF0\x9F\x8E\xAA", v: allEmoji[498] }, { k: ":circus_tent:", v: allEmoji[498] }, { k: "\xF0\x9F\x8E\xAC", v: allEmoji[499] }, { k: ":clapper:", v: allEmoji[499] }, { k: "\xF0\x9F\x8E\xA4", v: allEmoji[500] }, { k: ":microphone:", v: allEmoji[500] }, { k: "\xF0\x9F\x8E\xA7", v: allEmoji[501] }, { k: ":headphones:", v: allEmoji[501] }, { k: "\xF0\x9F\x8E\xBC", v: allEmoji[502] }, { k: ":musical_score:", v: allEmoji[502] }, { k: "\xF0\x9F\x8E\xB9", v: allEmoji[503] }, { k: ":musical_keyboard:", v: allEmoji[503] }, { k: "\xF0\x9F\x8E\xB7", v: allEmoji[504] }, { k: ":saxophone:", v: allEmoji[504] }, { k: "\xF0\x9F\x8E\xBA", v: allEmoji[505] }, { k: ":trumpet:", v: allEmoji[505] }, { k: "\xF0\x9F\x8E\xB8", v: allEmoji[506] }, { k: ":guitar:", v: allEmoji[506] }, { k: "\xF0\x9F\x8E\xBB", v: allEmoji[507] }, { k: ":violin:", v: allEmoji[507] }, { k: "\xF0\x9F\x8E\xAE", v: allEmoji[508] }, { k: ":video_game:", v: allEmoji[508] }, { k: "\xF0\x9F\x8E\xB0", v: allEmoji[509] }, { k: ":slot_machine:", v: allEmoji[509] }, { k: "\xF0\x9F\x8E\xB2", v: allEmoji[510] }, { k: ":game_die:", v: allEmoji[510] }, { k: "\xF0\x9F\x8E\xB3", v: allEmoji[511] }, { k: ":bowling:", v: allEmoji[511] }, { k: "\xF0\x9F\x9A\x97", v: allEmoji[512] }, { k: ":car:", v: allEmoji[512] }, { k: ":red_car:", v: allEmoji[512] }, { k: "\xF0\x9F\x9A\x95", v: allEmoji[513] }, { k: ":taxi:", v: allEmoji[513] }, { k: "\xF0\x9F\x9A\x99", v: allEmoji[514] }, { k: ":blue_car:", v: allEmoji[514] }, { k: "\xF0\x9F\x9A\x8C", v: allEmoji[515] }, { k: ":bus:", v: allEmoji[515] }, { k: "\xF0\x9F\x9A\x8E", v: allEmoji[516] }, { k: ":trolleybus:", v: allEmoji[516] }, { k: "\xF0\x9F\x8F\x8E", v: allEmoji[517] }, { k: ":racing_car:", v: allEmoji[517] }, { k: "\xF0\x9F\x9A\x93", v: allEmoji[518] }, { k: ":police_car:", v: allEmoji[518] }, { k: "\xF0\x9F\x9A\x91", v: allEmoji[519] }, { k: ":ambulance:", v: allEmoji[519] }, { k: "\xF0\x9F\x9A\x92", v: allEmoji[520] }, { k: ":fire_engine:", v: allEmoji[520] }, { k: "\xF0\x9F\x9A\x90", v: allEmoji[521] }, { k: ":minibus:", v: allEmoji[521] }, { k: "\xF0\x9F\x9A\x9A", v: allEmoji[522] }, { k: ":truck:", v: allEmoji[522] }, { k: "\xF0\x9F\x9A\x9B", v: allEmoji[523] }, { k: ":articulated_lorry:", v: allEmoji[523] }, { k: "\xF0\x9F\x9A\x9C", v: allEmoji[524] }, { k: ":tractor:", v: allEmoji[524] }, { k: "\xF0\x9F\x8F\x8D", v: allEmoji[525] }, { k: ":motorcycle:", v: allEmoji[525] }, { k: "\xF0\x9F\x9A\xB2", v: allEmoji[526] }, { k: ":bike:", v: allEmoji[526] }, { k: "\xF0\x9F\x9A\xA8", v: allEmoji[527] }, { k: ":rotating_light:", v: allEmoji[527] }, { k: "\xF0\x9F\x9A\x94", v: allEmoji[528] }, { k: ":oncoming_police_car:", v: allEmoji[528] }, { k: "\xF0\x9F\x9A\x8D", v: allEmoji[529] }, { k: ":oncoming_bus:", v: allEmoji[529] }, { k: "\xF0\x9F\x9A\x98", v: allEmoji[530] }, { k: ":oncoming_automobile:", v: allEmoji[530] }, { k: "\xF0\x9F\x9A\x96", v: allEmoji[531] }, { k: ":oncoming_taxi:", v: allEmoji[531] }, { k: "\xF0\x9F\x9A\xA1", v: allEmoji[532] }, { k: ":aerial_tramway:", v: allEmoji[532] }, { k: "\xF0\x9F\x9A\xA0", v: allEmoji[533] }, { k: ":mountain_cableway:", v: allEmoji[533] }, { k: "\xF0\x9F\x9A\x9F", v: allEmoji[534] }, { k: ":suspension_railway:", v: allEmoji[534] }, { k: "\xF0\x9F\x9A\x83", v: allEmoji[535] }, { k: ":railway_car:", v: allEmoji[535] }, { k: "\xF0\x9F\x9A\x8B", v: allEmoji[536] }, { k: ":train:", v: allEmoji[536] }, { k: "\xF0\x9F\x9A\x9D", v: allEmoji[537] }, { k: ":monorail:", v: allEmoji[537] }, { k: "\xF0\x9F\x9A\x84", v: allEmoji[538] }, { k: ":bullettrain_side:", v: allEmoji[538] }, { k: "\xF0\x9F\x9A\x85", v: allEmoji[539] }, { k: ":bullettrain_front:", v: allEmoji[539] }, { k: "\xF0\x9F\x9A\x88", v: allEmoji[540] }, { k: ":light_rail:", v: allEmoji[540] }, { k: "\xF0\x9F\x9A\x9E", v: allEmoji[541] }, { k: ":mountain_railway:", v: allEmoji[541] }, { k: "\xF0\x9F\x9A\x82", v: allEmoji[542] }, { k: ":steam_locomotive:", v: allEmoji[542] }, { k: "\xF0\x9F\x9A\x86", v: allEmoji[543] }, { k: ":train2:", v: allEmoji[543] }, { k: "\xF0\x9F\x9A\x87", v: allEmoji[544] }, { k: ":metro:", v: allEmoji[544] }, { k: "\xF0\x9F\x9A\x8A", v: allEmoji[545] }, { k: ":tram:", v: allEmoji[545] }, { k: "\xF0\x9F\x9A\x89", v: allEmoji[546] }, { k: ":station:", v: allEmoji[546] }, { k: "\xF0\x9F\x9A\x81", v: allEmoji[547] }, { k: ":helicopter:", v: allEmoji[547] }, { k: "\xF0\x9F\x9B\xA9", v: allEmoji[548] }, { k: ":small_airplane:", v: allEmoji[548] }, { k: "\xE2\x9C\x88\xEF\xB8\x8F", v: allEmoji[549] }, { k: ":airplane:", v: allEmoji[549] }, { k: "\xF0\x9F\x9B\xAB", v: allEmoji[550] }, { k: ":flight_departure:", v: allEmoji[550] }, { k: "\xF0\x9F\x9B\xAC", v: allEmoji[551] }, { k: ":flight_arrival:", v: allEmoji[551] }, { k: "\xE2\x9B\xB5\xEF\xB8\x8F", v: allEmoji[552] }, { k: ":boat:", v: allEmoji[552] }, { k: ":sailboat:", v: allEmoji[552] }, { k: "\xF0\x9F\x9B\xA5", v: allEmoji[553] }, { k: ":motor_boat:", v: allEmoji[553] }, { k: "\xF0\x9F\x9A\xA4", v: allEmoji[554] }, { k: ":speedboat:", v: allEmoji[554] }, { k: "\xE2\x9B\xB4", v: allEmoji[555] }, { k: ":ferry:", v: allEmoji[555] }, { k: "\xF0\x9F\x9B\xB3", v: allEmoji[556] }, { k: ":passenger_ship:", v: allEmoji[556] }, { k: "\xF0\x9F\x9A\x80", v: allEmoji[557] }, { k: ":rocket:", v: allEmoji[557] }, { k: "\xF0\x9F\x9B\xB0", v: allEmoji[558] }, { k: ":artificial_satellite:", v: allEmoji[558] }, { k: "\xF0\x9F\x92\xBA", v: allEmoji[559] }, { k: ":seat:", v: allEmoji[559] }, { k: "\xE2\x9A\x93\xEF\xB8\x8F", v: allEmoji[560] }, { k: ":anchor:", v: allEmoji[560] }, { k: "\xF0\x9F\x9A\xA7", v: allEmoji[561] }, { k: ":construction:", v: allEmoji[561] }, { k: "\xE2\x9B\xBD\xEF\xB8\x8F", v: allEmoji[562] }, { k: ":fuelpump:", v: allEmoji[562] }, { k: "\xF0\x9F\x9A\x8F", v: allEmoji[563] }, { k: ":busstop:", v: allEmoji[563] }, { k: "\xF0\x9F\x9A\xA6", v: allEmoji[564] }, { k: ":vertical_traffic_light:", v: allEmoji[564] }, { k: "\xF0\x9F\x9A\xA5", v: allEmoji[565] }, { k: ":traffic_light:", v: allEmoji[565] }, { k: "\xF0\x9F\x97\xBA", v: allEmoji[566] }, { k: ":world_map:", v: allEmoji[566] }, { k: "\xF0\x9F\x9A\xA2", v: allEmoji[567] }, { k: ":ship:", v: allEmoji[567] }, { k: "\xF0\x9F\x8E\xA1", v: allEmoji[568] }, { k: ":ferris_wheel:", v: allEmoji[568] }, { k: "\xF0\x9F\x8E\xA2", v: allEmoji[569] }, { k: ":roller_coaster:", v: allEmoji[569] }, { k: "\xF0\x9F\x8E\xA0", v: allEmoji[570] }, { k: ":carousel_horse:", v: allEmoji[570] }, { k: "\xF0\x9F\x8F\x97", v: allEmoji[571] }, { k: ":building_construction:", v: allEmoji[571] }, { k: "\xF0\x9F\x8C\x81", v: allEmoji[572] }, { k: ":foggy:", v: allEmoji[572] }, { k: "\xF0\x9F\x97\xBC", v: allEmoji[573] }, { k: ":tokyo_tower:", v: allEmoji[573] }, { k: "\xF0\x9F\x8F\xAD", v: allEmoji[574] }, { k: ":factory:", v: allEmoji[574] }, { k: "\xE2\x9B\xB2\xEF\xB8\x8F", v: allEmoji[575] }, { k: ":fountain:", v: allEmoji[575] }, { k: "\xF0\x9F\x8E\x91", v: allEmoji[576] }, { k: ":rice_scene:", v: allEmoji[576] }, { k: "\xE2\x9B\xB0", v: allEmoji[577] }, { k: ":mountain:", v: allEmoji[577] }, { k: "\xF0\x9F\x8F\x94", v: allEmoji[578] }, { k: ":mountain_snow:", v: allEmoji[578] }, { k: "\xF0\x9F\x97\xBB", v: allEmoji[579] }, { k: ":mount_fuji:", v: allEmoji[579] }, { k: "\xF0\x9F\x8C\x8B", v: allEmoji[580] }, { k: ":volcano:", v: allEmoji[580] }, { k: "\xF0\x9F\x97\xBE", v: allEmoji[581] }, { k: ":japan:", v: allEmoji[581] }, { k: "\xF0\x9F\x8F\x95", v: allEmoji[582] }, { k: ":camping:", v: allEmoji[582] }, { k: "\xE2\x9B\xBA\xEF\xB8\x8F", v: allEmoji[583] }, { k: ":tent:", v: allEmoji[583] }, { k: "\xF0\x9F\x8F\x9E", v: allEmoji[584] }, { k: ":national_park:", v: allEmoji[584] }, { k: "\xF0\x9F\x9B\xA3", v: allEmoji[585] }, { k: ":motorway:", v: allEmoji[585] }, { k: "\xF0\x9F\x9B\xA4", v: allEmoji[586] }, { k: ":railway_track:", v: allEmoji[586] }, { k: "\xF0\x9F\x8C\x85", v: allEmoji[587] }, { k: ":sunrise:", v: allEmoji[587] }, { k: "\xF0\x9F\x8C\x84", v: allEmoji[588] }, { k: ":sunrise_over_mountains:", v: allEmoji[588] }, { k: "\xF0\x9F\x8F\x9C", v: allEmoji[589] }, { k: ":desert:", v: allEmoji[589] }, { k: "\xF0\x9F\x8F\x96", v: allEmoji[590] }, { k: ":beach_umbrella:", v: allEmoji[590] }, { k: "\xF0\x9F\x8F\x9D", v: allEmoji[591] }, { k: ":desert_island:", v: allEmoji[591] }, { k: "\xF0\x9F\x8C\x87", v: allEmoji[592] }, { k: ":city_sunrise:", v: allEmoji[592] }, { k: "\xF0\x9F\x8C\x86", v: allEmoji[593] }, { k: ":city_sunset:", v: allEmoji[593] }, { k: "\xF0\x9F\x8F\x99", v: allEmoji[594] }, { k: ":cityscape:", v: allEmoji[594] }, { k: "\xF0\x9F\x8C\x83", v: allEmoji[595] }, { k: ":night_with_stars:", v: allEmoji[595] }, { k: "\xF0\x9F\x8C\x89", v: allEmoji[596] }, { k: ":bridge_at_night:", v: allEmoji[596] }, { k: "\xF0\x9F\x8C\x8C", v: allEmoji[597] }, { k: ":milky_way:", v: allEmoji[597] }, { k: "\xF0\x9F\x8C\xA0", v: allEmoji[598] }, { k: ":stars:", v: allEmoji[598] }, { k: "\xF0\x9F\x8E\x87", v: allEmoji[599] }, { k: ":sparkler:", v: allEmoji[599] }, { k: "\xF0\x9F\x8E\x86", v: allEmoji[600] }, { k: ":fireworks:", v: allEmoji[600] }, { k: "\xF0\x9F\x8C\x88", v: allEmoji[601] }, { k: ":rainbow:", v: allEmoji[601] }, { k: "\xF0\x9F\x8F\x98", v: allEmoji[602] }, { k: ":houses:", v: allEmoji[602] }, { k: "\xF0\x9F\x8F\xB0", v: allEmoji[603] }, { k: ":european_castle:", v: allEmoji[603] }, { k: "\xF0\x9F\x8F\xAF", v: allEmoji[604] }, { k: ":japanese_castle:", v: allEmoji[604] }, { k: "\xF0\x9F\x8F\x9F", v: allEmoji[605] }, { k: ":stadium:", v: allEmoji[605] }, { k: "\xF0\x9F\x97\xBD", v: allEmoji[606] }, { k: ":statue_of_liberty:", v: allEmoji[606] }, { k: "\xF0\x9F\x8F\xA0", v: allEmoji[607] }, { k: ":house:", v: allEmoji[607] }, { k: "\xF0\x9F\x8F\xA1", v: allEmoji[608] }, { k: ":house_with_garden:", v: allEmoji[608] }, { k: "\xF0\x9F\x8F\x9A", v: allEmoji[609] }, { k: ":derelict_house:", v: allEmoji[609] }, { k: "\xF0\x9F\x8F\xA2", v: allEmoji[610] }, { k: ":office:", v: allEmoji[610] }, { k: "\xF0\x9F\x8F\xAC", v: allEmoji[611] }, { k: ":department_store:", v: allEmoji[611] }, { k: "\xF0\x9F\x8F\xA3", v: allEmoji[612] }, { k: ":post_office:", v: allEmoji[612] }, { k: "\xF0\x9F\x8F\xA4", v: allEmoji[613] }, { k: ":european_post_office:", v: allEmoji[613] }, { k: "\xF0\x9F\x8F\xA5", v: allEmoji[614] }, { k: ":hospital:", v: allEmoji[614] }, { k: "\xF0\x9F\x8F\xA6", v: allEmoji[615] }, { k: ":bank:", v: allEmoji[615] }, { k: "\xF0\x9F\x8F\xA8", v: allEmoji[616] }, { k: ":hotel:", v: allEmoji[616] }, { k: "\xF0\x9F\x8F\xAA", v: allEmoji[617] }, { k: ":convenience_store:", v: allEmoji[617] }, { k: "\xF0\x9F\x8F\xAB", v: allEmoji[618] }, { k: ":school:", v: allEmoji[618] }, { k: "\xF0\x9F\x8F\xA9", v: allEmoji[619] }, { k: ":love_hotel:", v: allEmoji[619] }, { k: "\xF0\x9F\x92\x92", v: allEmoji[620] }, { k: ":wedding:", v: allEmoji[620] }, { k: "\xF0\x9F\x8F\x9B", v: allEmoji[621] }, { k: ":classical_building:", v: allEmoji[621] }, { k: "\xE2\x9B\xAA\xEF\xB8\x8F", v: allEmoji[622] }, { k: ":church:", v: allEmoji[622] }, { k: "\xF0\x9F\x95\x8C", v: allEmoji[623] }, { k: ":mosque:", v: allEmoji[623] }, { k: "\xF0\x9F\x95\x8D", v: allEmoji[624] }, { k: ":synagogue:", v: allEmoji[624] }, { k: "\xF0\x9F\x95\x8B", v: allEmoji[625] }, { k: ":kaaba:", v: allEmoji[625] }, { k: "\xE2\x9B\xA9", v: allEmoji[626] }, { k: ":shinto_shrine:", v: allEmoji[626] }, { k: "\xE2\x8C\x9A\xEF\xB8\x8F", v: allEmoji[627] }, { k: ":watch:", v: allEmoji[627] }, { k: "\xF0\x9F\x93\xB1", v: allEmoji[628] }, { k: ":iphone:", v: allEmoji[628] }, { k: "\xF0\x9F\x93\xB2", v: allEmoji[629] }, { k: ":calling:", v: allEmoji[629] }, { k: "\xF0\x9F\x92\xBB", v: allEmoji[630] }, { k: ":computer:", v: allEmoji[630] }, { k: "\xE2\x8C\xA8\xEF\xB8\x8F", v: allEmoji[631] }, { k: ":keyboard:", v: allEmoji[631] }, { k: "\xF0\x9F\x96\xA5", v: allEmoji[632] }, { k: ":desktop_computer:", v: allEmoji[632] }, { k: "\xF0\x9F\x96\xA8", v: allEmoji[633] }, { k: ":printer:", v: allEmoji[633] }, { k: "\xF0\x9F\x96\xB1", v: allEmoji[634] }, { k: ":computer_mouse:", v: allEmoji[634] }, { k: "\xF0\x9F\x96\xB2", v: allEmoji[635] }, { k: ":trackball:", v: allEmoji[635] }, { k: "\xF0\x9F\x95\xB9", v: allEmoji[636] }, { k: ":joystick:", v: allEmoji[636] }, { k: "\xF0\x9F\x97\x9C", v: allEmoji[637] }, { k: ":clamp:", v: allEmoji[637] }, { k: "\xF0\x9F\x92\xBD", v: allEmoji[638] }, { k: ":minidisc:", v: allEmoji[638] }, { k: "\xF0\x9F\x92\xBE", v: allEmoji[639] }, { k: ":floppy_disk:", v: allEmoji[639] }, { k: "\xF0\x9F\x92\xBF", v: allEmoji[640] }, { k: ":cd:", v: allEmoji[640] }, { k: "\xF0\x9F\x93\x80", v: allEmoji[641] }, { k: ":dvd:", v: allEmoji[641] }, { k: "\xF0\x9F\x93\xBC", v: allEmoji[642] }, { k: ":vhs:", v: allEmoji[642] }, { k: "\xF0\x9F\x93\xB7", v: allEmoji[643] }, { k: ":camera:", v: allEmoji[643] }, { k: "\xF0\x9F\x93\xB8", v: allEmoji[644] }, { k: ":camera_flash:", v: allEmoji[644] }, { k: "\xF0\x9F\x93\xB9", v: allEmoji[645] }, { k: ":video_camera:", v: allEmoji[645] }, { k: "\xF0\x9F\x8E\xA5", v: allEmoji[646] }, { k: ":movie_camera:", v: allEmoji[646] }, { k: "\xF0\x9F\x93\xBD", v: allEmoji[647] }, { k: ":film_projector:", v: allEmoji[647] }, { k: "\xF0\x9F\x8E\x9E", v: allEmoji[648] }, { k: ":film_strip:", v: allEmoji[648] }, { k: "\xF0\x9F\x93\x9E", v: allEmoji[649] }, { k: ":telephone_receiver:", v: allEmoji[649] }, { k: "\xE2\x98\x8E\xEF\xB8\x8F", v: allEmoji[650] }, { k: ":phone:", v: allEmoji[650] }, { k: ":telephone:", v: allEmoji[650] }, { k: "\xF0\x9F\x93\x9F", v: allEmoji[651] }, { k: ":pager:", v: allEmoji[651] }, { k: "\xF0\x9F\x93\xA0", v: allEmoji[652] }, { k: ":fax:", v: allEmoji[652] }, { k: "\xF0\x9F\x93\xBA", v: allEmoji[653] }, { k: ":tv:", v: allEmoji[653] }, { k: "\xF0\x9F\x93\xBB", v: allEmoji[654] }, { k: ":radio:", v: allEmoji[654] }, { k: "\xF0\x9F\x8E\x99", v: allEmoji[655] }, { k: ":studio_microphone:", v: allEmoji[655] }, { k: "\xF0\x9F\x8E\x9A", v: allEmoji[656] }, { k: ":level_slider:", v: allEmoji[656] }, { k: "\xF0\x9F\x8E\x9B", v: allEmoji[657] }, { k: ":control_knobs:", v: allEmoji[657] }, { k: "\xE2\x8F\xB1", v: allEmoji[658] }, { k: ":stopwatch:", v: allEmoji[658] }, { k: "\xE2\x8F\xB2", v: allEmoji[659] }, { k: ":timer_clock:", v: allEmoji[659] }, { k: "\xE2\x8F\xB0", v: allEmoji[660] }, { k: ":alarm_clock:", v: allEmoji[660] }, { k: "\xF0\x9F\x95\xB0", v: allEmoji[661] }, { k: ":mantelpiece_clock:", v: allEmoji[661] }, { k: "\xE2\x8F\xB3", v: allEmoji[662] }, { k: ":hourglass_flowing_sand:", v: allEmoji[662] }, { k: "\xE2\x8C\x9B\xEF\xB8\x8F", v: allEmoji[663] }, { k: ":hourglass:", v: allEmoji[663] }, { k: "\xF0\x9F\x93\xA1", v: allEmoji[664] }, { k: ":satellite:", v: allEmoji[664] }, { k: "\xF0\x9F\x94\x8B", v: allEmoji[665] }, { k: ":battery:", v: allEmoji[665] }, { k: "\xF0\x9F\x94\x8C", v: allEmoji[666] }, { k: ":electric_plug:", v: allEmoji[666] }, { k: "\xF0\x9F\x92\xA1", v: allEmoji[667] }, { k: ":bulb:", v: allEmoji[667] }, { k: "\xF0\x9F\x94\xA6", v: allEmoji[668] }, { k: ":flashlight:", v: allEmoji[668] }, { k: "\xF0\x9F\x95\xAF", v: allEmoji[669] }, { k: ":candle:", v: allEmoji[669] }, { k: "\xF0\x9F\x97\x91", v: allEmoji[670] }, { k: ":wastebasket:", v: allEmoji[670] }, { k: "\xF0\x9F\x9B\xA2", v: allEmoji[671] }, { k: ":oil_drum:", v: allEmoji[671] }, { k: "\xF0\x9F\x92\xB8", v: allEmoji[672] }, { k: ":money_with_wings:", v: allEmoji[672] }, { k: "\xF0\x9F\x92\xB5", v: allEmoji[673] }, { k: ":dollar:", v: allEmoji[673] }, { k: "\xF0\x9F\x92\xB4", v: allEmoji[674] }, { k: ":yen:", v: allEmoji[674] }, { k: "\xF0\x9F\x92\xB6", v: allEmoji[675] }, { k: ":euro:", v: allEmoji[675] }, { k: "\xF0\x9F\x92\xB7", v: allEmoji[676] }, { k: ":pound:", v: allEmoji[676] }, { k: "\xF0\x9F\x92\xB0", v: allEmoji[677] }, { k: ":moneybag:", v: allEmoji[677] }, { k: "\xF0\x9F\x92\xB3", v: allEmoji[678] }, { k: ":credit_card:", v: allEmoji[678] }, { k: "\xF0\x9F\x92\x8E", v: allEmoji[679] }, { k: ":gem:", v: allEmoji[679] }, { k: "\xE2\x9A\x96", v: allEmoji[680] }, { k: ":balance_scale:", v: allEmoji[680] }, { k: "\xF0\x9F\x94\xA7", v: allEmoji[681] }, { k: ":wrench:", v: allEmoji[681] }, { k: "\xF0\x9F\x94\xA8", v: allEmoji[682] }, { k: ":hammer:", v: allEmoji[682] }, { k: "\xE2\x9A\x92", v: allEmoji[683] }, { k: ":hammer_and_pick:", v: allEmoji[683] }, { k: "\xF0\x9F\x9B\xA0", v: allEmoji[684] }, { k: ":hammer_and_wrench:", v: allEmoji[684] }, { k: "\xE2\x9B\x8F", v: allEmoji[685] }, { k: ":pick:", v: allEmoji[685] }, { k: "\xF0\x9F\x94\xA9", v: allEmoji[686] }, { k: ":nut_and_bolt:", v: allEmoji[686] }, { k: "\xE2\x9A\x99", v: allEmoji[687] }, { k: ":gear:", v: allEmoji[687] }, { k: "\xE2\x9B\x93", v: allEmoji[688] }, { k: ":chains:", v: allEmoji[688] }, { k: "\xF0\x9F\x94\xAB", v: allEmoji[689] }, { k: ":gun:", v: allEmoji[689] }, { k: "\xF0\x9F\x92\xA3", v: allEmoji[690] }, { k: ":bomb:", v: allEmoji[690] }, { k: "\xF0\x9F\x94\xAA", v: allEmoji[691] }, { k: ":hocho:", v: allEmoji[691] }, { k: ":knife:", v: allEmoji[691] }, { k: "\xF0\x9F\x97\xA1", v: allEmoji[692] }, { k: ":dagger:", v: allEmoji[692] }, { k: "\xE2\x9A\x94", v: allEmoji[693] }, { k: ":crossed_swords:", v: allEmoji[693] }, { k: "\xF0\x9F\x9B\xA1", v: allEmoji[694] }, { k: ":shield:", v: allEmoji[694] }, { k: "\xF0\x9F\x9A\xAC", v: allEmoji[695] }, { k: ":smoking:", v: allEmoji[695] }, { k: "\xE2\x9A\xB0", v: allEmoji[696] }, { k: ":coffin:", v: allEmoji[696] }, { k: "\xE2\x9A\xB1", v: allEmoji[697] }, { k: ":funeral_urn:", v: allEmoji[697] }, { k: "\xF0\x9F\x8F\xBA", v: allEmoji[698] }, { k: ":amphora:", v: allEmoji[698] }, { k: "\xF0\x9F\x94\xAE", v: allEmoji[699] }, { k: ":crystal_ball:", v: allEmoji[699] }, { k: "\xF0\x9F\x93\xBF", v: allEmoji[700] }, { k: ":prayer_beads:", v: allEmoji[700] }, { k: "\xF0\x9F\x92\x88", v: allEmoji[701] }, { k: ":barber:", v: allEmoji[701] }, { k: "\xE2\x9A\x97", v: allEmoji[702] }, { k: ":alembic:", v: allEmoji[702] }, { k: "\xF0\x9F\x94\xAD", v: allEmoji[703] }, { k: ":telescope:", v: allEmoji[703] }, { k: "\xF0\x9F\x94\xAC", v: allEmoji[704] }, { k: ":microscope:", v: allEmoji[704] }, { k: "\xF0\x9F\x95\xB3", v: allEmoji[705] }, { k: ":hole:", v: allEmoji[705] }, { k: "\xF0\x9F\x92\x8A", v: allEmoji[706] }, { k: ":pill:", v: allEmoji[706] }, { k: "\xF0\x9F\x92\x89", v: allEmoji[707] }, { k: ":syringe:", v: allEmoji[707] }, { k: "\xF0\x9F\x8C\xA1", v: allEmoji[708] }, { k: ":thermometer:", v: allEmoji[708] }, { k: "\xF0\x9F\x9A\xBD", v: allEmoji[709] }, { k: ":toilet:", v: allEmoji[709] }, { k: "\xF0\x9F\x9A\xBF", v: allEmoji[710] }, { k: ":shower:", v: allEmoji[710] }, { k: "\xF0\x9F\x9B\x81", v: allEmoji[711] }, { k: ":bathtub:", v: allEmoji[711] }, { k: "\xF0\x9F\x9B\x8E", v: allEmoji[712] }, { k: ":bellhop_bell:", v: allEmoji[712] }, { k: "\xF0\x9F\x94\x91", v: allEmoji[713] }, { k: ":key:", v: allEmoji[713] }, { k: "\xF0\x9F\x97\x9D", v: allEmoji[714] }, { k: ":old_key:", v: allEmoji[714] }, { k: "\xF0\x9F\x9A\xAA", v: allEmoji[715] }, { k: ":door:", v: allEmoji[715] }, { k: "\xF0\x9F\x9B\x8B", v: allEmoji[716] }, { k: ":couch_and_lamp:", v: allEmoji[716] }, { k: "\xF0\x9F\x9B\x8C", v: allEmoji[717] }, { k: ":sleeping_bed:", v: allEmoji[717] }, { k: "\xF0\x9F\x9B\x8F", v: allEmoji[718] }, { k: ":bed:", v: allEmoji[718] }, { k: "\xF0\x9F\x96\xBC", v: allEmoji[719] }, { k: ":framed_picture:", v: allEmoji[719] }, { k: "\xE2\x9B\xB1", v: allEmoji[720] }, { k: ":parasol_on_ground:", v: allEmoji[720] }, { k: "\xF0\x9F\x97\xBF", v: allEmoji[721] }, { k: ":moyai:", v: allEmoji[721] }, { k: "\xF0\x9F\x9B\x8D", v: allEmoji[722] }, { k: ":shopping:", v: allEmoji[722] }, { k: "\xF0\x9F\x8E\x81", v: allEmoji[723] }, { k: ":gift:", v: allEmoji[723] }, { k: "\xF0\x9F\x8E\x88", v: allEmoji[724] }, { k: ":balloon:", v: allEmoji[724] }, { k: "\xF0\x9F\x8E\x8F", v: allEmoji[725] }, { k: ":flags:", v: allEmoji[725] }, { k: "\xF0\x9F\x8E\x80", v: allEmoji[726] }, { k: ":ribbon:", v: allEmoji[726] }, { k: "\xF0\x9F\x8E\x8A", v: allEmoji[727] }, { k: ":confetti_ball:", v: allEmoji[727] }, { k: "\xF0\x9F\x8E\x89", v: allEmoji[728] }, { k: ":tada:", v: allEmoji[728] }, { k: "\xF0\x9F\x8E\x90", v: allEmoji[729] }, { k: ":wind_chime:", v: allEmoji[729] }, { k: "\xF0\x9F\x8F\xAE", v: allEmoji[730] }, { k: ":izakaya_lantern:", v: allEmoji[730] }, { k: ":lantern:", v: allEmoji[730] }, { k: "\xF0\x9F\x8E\x8E", v: allEmoji[731] }, { k: ":dolls:", v: allEmoji[731] }, { k: "\xE2\x9C\x89\xEF\xB8\x8F", v: allEmoji[732] }, { k: ":email:", v: allEmoji[732] }, { k: ":envelope:", v: allEmoji[732] }, { k: "\xF0\x9F\x93\xA9", v: allEmoji[733] }, { k: ":envelope_with_arrow:", v: allEmoji[733] }, { k: "\xF0\x9F\x93\xA8", v: allEmoji[734] }, { k: ":incoming_envelope:", v: allEmoji[734] }, { k: "\xF0\x9F\x93\xA7", v: allEmoji[735] }, { k: ":e-mail:", v: allEmoji[735] }, { k: "\xF0\x9F\x92\x8C", v: allEmoji[736] }, { k: ":love_letter:", v: allEmoji[736] }, { k: "\xF0\x9F\x93\xA5", v: allEmoji[737] }, { k: ":inbox_tray:", v: allEmoji[737] }, { k: "\xF0\x9F\x93\xA4", v: allEmoji[738] }, { k: ":outbox_tray:", v: allEmoji[738] }, { k: "\xF0\x9F\x93\xA6", v: allEmoji[739] }, { k: ":package:", v: allEmoji[739] }, { k: "\xF0\x9F\x8F\xB7", v: allEmoji[740] }, { k: ":label:", v: allEmoji[740] }, { k: "\xF0\x9F\x94\x96", v: allEmoji[741] }, { k: ":bookmark:", v: allEmoji[741] }, { k: "\xF0\x9F\x93\xAA", v: allEmoji[742] }, { k: ":mailbox_closed:", v: allEmoji[742] }, { k: "\xF0\x9F\x93\xAB", v: allEmoji[743] }, { k: ":mailbox:", v: allEmoji[743] }, { k: "\xF0\x9F\x93\xAC", v: allEmoji[744] }, { k: ":mailbox_with_mail:", v: allEmoji[744] }, { k: "\xF0\x9F\x93\xAD", v: allEmoji[745] }, { k: ":mailbox_with_no_mail:", v: allEmoji[745] }, { k: "\xF0\x9F\x93\xAE", v: allEmoji[746] }, { k: ":postbox:", v: allEmoji[746] }, { k: "\xF0\x9F\x93\xAF", v: allEmoji[747] }, { k: ":postal_horn:", v: allEmoji[747] }, { k: "\xF0\x9F\x93\x9C", v: allEmoji[748] }, { k: ":scroll:", v: allEmoji[748] }, { k: "\xF0\x9F\x93\x83", v: allEmoji[749] }, { k: ":page_with_curl:", v: allEmoji[749] }, { k: "\xF0\x9F\x93\x84", v: allEmoji[750] }, { k: ":page_facing_up:", v: allEmoji[750] }, { k: "\xF0\x9F\x93\x91", v: allEmoji[751] }, { k: ":bookmark_tabs:", v: allEmoji[751] }, { k: "\xF0\x9F\x93\x8A", v: allEmoji[752] }, { k: ":bar_chart:", v: allEmoji[752] }, { k: "\xF0\x9F\x93\x88", v: allEmoji[753] }, { k: ":chart_with_upwards_trend:", v: allEmoji[753] }, { k: "\xF0\x9F\x93\x89", v: allEmoji[754] }, { k: ":chart_with_downwards_trend:", v: allEmoji[754] }, { k: "\xF0\x9F\x97\x92", v: allEmoji[755] }, { k: ":spiral_notepad:", v: allEmoji[755] }, { k: "\xF0\x9F\x97\x93", v: allEmoji[756] }, { k: ":spiral_calendar:", v: allEmoji[756] }, { k: "\xF0\x9F\x93\x86", v: allEmoji[757] }, { k: ":calendar:", v: allEmoji[757] }, { k: "\xF0\x9F\x93\x85", v: allEmoji[758] }, { k: ":date:", v: allEmoji[758] }, { k: "\xF0\x9F\x93\x87", v: allEmoji[759] }, { k: ":card_index:", v: allEmoji[759] }, { k: "\xF0\x9F\x97\x83", v: allEmoji[760] }, { k: ":card_file_box:", v: allEmoji[760] }, { k: "\xF0\x9F\x97\xB3", v: allEmoji[761] }, { k: ":ballot_box:", v: allEmoji[761] }, { k: "\xF0\x9F\x97\x84", v: allEmoji[762] }, { k: ":file_cabinet:", v: allEmoji[762] }, { k: "\xF0\x9F\x93\x8B", v: allEmoji[763] }, { k: ":clipboard:", v: allEmoji[763] }, { k: "\xF0\x9F\x93\x81", v: allEmoji[764] }, { k: ":file_folder:", v: allEmoji[764] }, { k: "\xF0\x9F\x93\x82", v: allEmoji[765] }, { k: ":open_file_folder:", v: allEmoji[765] }, { k: "\xF0\x9F\x97\x82", v: allEmoji[766] }, { k: ":card_index_dividers:", v: allEmoji[766] }, { k: "\xF0\x9F\x97\x9E", v: allEmoji[767] }, { k: ":newspaper_roll:", v: allEmoji[767] }, { k: "\xF0\x9F\x93\xB0", v: allEmoji[768] }, { k: ":newspaper:", v: allEmoji[768] }, { k: "\xF0\x9F\x93\x93", v: allEmoji[769] }, { k: ":notebook:", v: allEmoji[769] }, { k: "\xF0\x9F\x93\x94", v: allEmoji[770] }, { k: ":notebook_with_decorative_cover:", v: allEmoji[770] }, { k: "\xF0\x9F\x93\x92", v: allEmoji[771] }, { k: ":ledger:", v: allEmoji[771] }, { k: "\xF0\x9F\x93\x95", v: allEmoji[772] }, { k: ":closed_book:", v: allEmoji[772] }, { k: "\xF0\x9F\x93\x97", v: allEmoji[773] }, { k: ":green_book:", v: allEmoji[773] }, { k: "\xF0\x9F\x93\x98", v: allEmoji[774] }, { k: ":blue_book:", v: allEmoji[774] }, { k: "\xF0\x9F\x93\x99", v: allEmoji[775] }, { k: ":orange_book:", v: allEmoji[775] }, { k: "\xF0\x9F\x93\x9A", v: allEmoji[776] }, { k: ":books:", v: allEmoji[776] }, { k: "\xF0\x9F\x93\x96", v: allEmoji[777] }, { k: ":book:", v: allEmoji[777] }, { k: ":open_book:", v: allEmoji[777] }, { k: "\xF0\x9F\x94\x97", v: allEmoji[778] }, { k: ":link:", v: allEmoji[778] }, { k: "\xF0\x9F\x93\x8E", v: allEmoji[779] }, { k: ":paperclip:", v: allEmoji[779] }, { k: "\xF0\x9F\x96\x87", v: allEmoji[780] }, { k: ":paperclips:", v: allEmoji[780] }, { k: "\xF0\x9F\x93\x90", v: allEmoji[781] }, { k: ":triangular_ruler:", v: allEmoji[781] }, { k: "\xF0\x9F\x93\x8F", v: allEmoji[782] }, { k: ":straight_ruler:", v: allEmoji[782] }, { k: "\xE2\x9C\x82\xEF\xB8\x8F", v: allEmoji[783] }, { k: ":scissors:", v: allEmoji[783] }, { k: "\xF0\x9F\x93\x8C", v: allEmoji[784] }, { k: ":pushpin:", v: allEmoji[784] }, { k: "\xF0\x9F\x93\x8D", v: allEmoji[785] }, { k: ":round_pushpin:", v: allEmoji[785] }, { k: "\xF0\x9F\x9A\xA9", v: allEmoji[786] }, { k: ":triangular_flag_on_post:", v: allEmoji[786] }, { k: "\xF0\x9F\x8E\x8C", v: allEmoji[787] }, { k: ":crossed_flags:", v: allEmoji[787] }, { k: "\xF0\x9F\x8F\xB3\xEF\xB8\x8F", v: allEmoji[788] }, { k: ":white_flag:", v: allEmoji[788] }, { k: "\xF0\x9F\x8F\xB4", v: allEmoji[789] }, { k: ":black_flag:", v: allEmoji[789] }, { k: "\xF0\x9F\x8F\x81", v: allEmoji[790] }, { k: ":checkered_flag:", v: allEmoji[790] }, { k: "\xF0\x9F\x8F\xB3\xEF\xB8\x8F\xE2\x80\x8D\xF0\x9F\x8C\x88", v: allEmoji[791] }, { k: ":rainbow_flag:", v: allEmoji[791] }, { k: "\xF0\x9F\x96\x8C", v: allEmoji[792] }, { k: ":paintbrush:", v: allEmoji[792] }, { k: "\xF0\x9F\x96\x8D", v: allEmoji[793] }, { k: ":crayon:", v: allEmoji[793] }, { k: "\xF0\x9F\x96\x8A", v: allEmoji[794] }, { k: ":pen:", v: allEmoji[794] }, { k: "\xF0\x9F\x96\x8B", v: allEmoji[795] }, { k: ":fountain_pen:", v: allEmoji[795] }, { k: "\xE2\x9C\x92\xEF\xB8\x8F", v: allEmoji[796] }, { k: ":black_nib:", v: allEmoji[796] }, { k: "\xF0\x9F\x93\x9D", v: allEmoji[797] }, { k: ":memo:", v: allEmoji[797] }, { k: ":pencil:", v: allEmoji[797] }, { k: "\xE2\x9C\x8F\xEF\xB8\x8F", v: allEmoji[798] }, { k: ":pencil2:", v: allEmoji[798] }, { k: "\xF0\x9F\x94\x8F", v: allEmoji[799] }, { k: ":lock_with_ink_pen:", v: allEmoji[799] }, { k: "\xF0\x9F\x94\x90", v: allEmoji[800] }, { k: ":closed_lock_with_key:", v: allEmoji[800] }, { k: "\xF0\x9F\x94\x92", v: allEmoji[801] }, { k: ":lock:", v: allEmoji[801] }, { k: "\xF0\x9F\x94\x93", v: allEmoji[802] }, { k: ":unlock:", v: allEmoji[802] }, { k: "\xF0\x9F\x94\x8D", v: allEmoji[803] }, { k: ":mag:", v: allEmoji[803] }, { k: "\xF0\x9F\x94\x8E", v: allEmoji[804] }, { k: ":mag_right:", v: allEmoji[804] }, { k: "\xE2\x9D\xA4\xEF\xB8\x8F", v: allEmoji[805] }, { k: ":heart:", v: allEmoji[805] }, { k: "\xF0\x9F\x92\x9B", v: allEmoji[806] }, { k: ":yellow_heart:", v: allEmoji[806] }, { k: "\xF0\x9F\x92\x9A", v: allEmoji[807] }, { k: ":green_heart:", v: allEmoji[807] }, { k: "\xF0\x9F\x92\x99", v: allEmoji[808] }, { k: ":blue_heart:", v: allEmoji[808] }, { k: "\xF0\x9F\x92\x9C", v: allEmoji[809] }, { k: ":purple_heart:", v: allEmoji[809] }, { k: "\xF0\x9F\x92\x94", v: allEmoji[810] }, { k: ":broken_heart:", v: allEmoji[810] }, { k: "\xE2\x9D\xA3\xEF\xB8\x8F", v: allEmoji[811] }, { k: ":heavy_heart_exclamation:", v: allEmoji[811] }, { k: "\xF0\x9F\x92\x95", v: allEmoji[812] }, { k: ":two_hearts:", v: allEmoji[812] }, { k: "\xF0\x9F\x92\x9E", v: allEmoji[813] }, { k: ":revolving_hearts:", v: allEmoji[813] }, { k: "\xF0\x9F\x92\x93", v: allEmoji[814] }, { k: ":heartbeat:", v: allEmoji[814] }, { k: "\xF0\x9F\x92\x97", v: allEmoji[815] }, { k: ":heartpulse:", v: allEmoji[815] }, { k: "\xF0\x9F\x92\x96", v: allEmoji[816] }, { k: ":sparkling_heart:", v: allEmoji[816] }, { k: "\xF0\x9F\x92\x98", v: allEmoji[817] }, { k: ":cupid:", v: allEmoji[817] }, { k: "\xF0\x9F\x92\x9D", v: allEmoji[818] }, { k: ":gift_heart:", v: allEmoji[818] }, { k: "\xF0\x9F\x92\x9F", v: allEmoji[819] }, { k: ":heart_decoration:", v: allEmoji[819] }, { k: "\xE2\x98\xAE\xEF\xB8\x8F", v: allEmoji[820] }, { k: ":peace_symbol:", v: allEmoji[820] }, { k: "\xE2\x9C\x9D\xEF\xB8\x8F", v: allEmoji[821] }, { k: ":latin_cross:", v: allEmoji[821] }, { k: "\xE2\x98\xAA\xEF\xB8\x8F", v: allEmoji[822] }, { k: ":star_and_crescent:", v: allEmoji[822] }, { k: "\xF0\x9F\x95\x89", v: allEmoji[823] }, { k: ":om:", v: allEmoji[823] }, { k: "\xE2\x98\xB8\xEF\xB8\x8F", v: allEmoji[824] }, { k: ":wheel_of_dharma:", v: allEmoji[824] }, { k: "\xE2\x9C\xA1\xEF\xB8\x8F", v: allEmoji[825] }, { k: ":star_of_david:", v: allEmoji[825] }, { k: "\xF0\x9F\x94\xAF", v: allEmoji[826] }, { k: ":six_pointed_star:", v: allEmoji[826] }, { k: "\xF0\x9F\x95\x8E", v: allEmoji[827] }, { k: ":menorah:", v: allEmoji[827] }, { k: "\xE2\x98\xAF\xEF\xB8\x8F", v: allEmoji[828] }, { k: ":yin_yang:", v: allEmoji[828] }, { k: "\xE2\x98\xA6\xEF\xB8\x8F", v: allEmoji[829] }, { k: ":orthodox_cross:", v: allEmoji[829] }, { k: "\xF0\x9F\x9B\x90", v: allEmoji[830] }, { k: ":place_of_worship:", v: allEmoji[830] }, { k: "\xE2\x9B\x8E", v: allEmoji[831] }, { k: ":ophiuchus:", v: allEmoji[831] }, { k: "\xE2\x99\x88\xEF\xB8\x8F", v: allEmoji[832] }, { k: ":aries:", v: allEmoji[832] }, { k: "\xE2\x99\x89\xEF\xB8\x8F", v: allEmoji[833] }, { k: ":taurus:", v: allEmoji[833] }, { k: "\xE2\x99\x8A\xEF\xB8\x8F", v: allEmoji[834] }, { k: ":gemini:", v: allEmoji[834] }, { k: "\xE2\x99\x8B\xEF\xB8\x8F", v: allEmoji[835] }, { k: ":cancer:", v: allEmoji[835] }, { k: "\xE2\x99\x8C\xEF\xB8\x8F", v: allEmoji[836] }, { k: ":leo:", v: allEmoji[836] }, { k: "\xE2\x99\x8D\xEF\xB8\x8F", v: allEmoji[837] }, { k: ":virgo:", v: allEmoji[837] }, { k: "\xE2\x99\x8E\xEF\xB8\x8F", v: allEmoji[838] }, { k: ":libra:", v: allEmoji[838] }, { k: "\xE2\x99\x8F\xEF\xB8\x8F", v: allEmoji[839] }, { k: ":scorpius:", v: allEmoji[839] }, { k: "\xE2\x99\x90\xEF\xB8\x8F", v: allEmoji[840] }, { k: ":sagittarius:", v: allEmoji[840] }, { k: "\xE2\x99\x91\xEF\xB8\x8F", v: allEmoji[841] }, { k: ":capricorn:", v: allEmoji[841] }, { k: "\xE2\x99\x92\xEF\xB8\x8F", v: allEmoji[842] }, { k: ":aquarius:", v: allEmoji[842] }, { k: "\xE2\x99\x93\xEF\xB8\x8F", v: allEmoji[843] }, { k: ":pisces:", v: allEmoji[843] }, { k: "\xF0\x9F\x86\x94", v: allEmoji[844] }, { k: ":id:", v: allEmoji[844] }, { k: "\xE2\x9A\x9B", v: allEmoji[845] }, { k: ":atom_symbol:", v: allEmoji[845] }, { k: "\xF0\x9F\x88\xB3", v: allEmoji[846] }, { k: ":u7a7a:", v: allEmoji[846] }, { k: "\xF0\x9F\x88\xB9", v: allEmoji[847] }, { k: ":u5272:", v: allEmoji[847] }, { k: "\xE2\x98\xA2\xEF\xB8\x8F", v: allEmoji[848] }, { k: ":radioactive:", v: allEmoji[848] }, { k: "\xE2\x98\xA3\xEF\xB8\x8F", v: allEmoji[849] }, { k: ":biohazard:", v: allEmoji[849] }, { k: "\xF0\x9F\x93\xB4", v: allEmoji[850] }, { k: ":mobile_phone_off:", v: allEmoji[850] }, { k: "\xF0\x9F\x93\xB3", v: allEmoji[851] }, { k: ":vibration_mode:", v: allEmoji[851] }, { k: "\xF0\x9F\x88\xB6", v: allEmoji[852] }, { k: ":u6709:", v: allEmoji[852] }, { k: "\xF0\x9F\x88\x9A\xEF\xB8\x8F", v: allEmoji[853] }, { k: ":u7121:", v: allEmoji[853] }, { k: "\xF0\x9F\x88\xB8", v: allEmoji[854] }, { k: ":u7533:", v: allEmoji[854] }, { k: "\xF0\x9F\x88\xBA", v: allEmoji[855] }, { k: ":u55b6:", v: allEmoji[855] }, { k: "\xF0\x9F\x88\xB7\xEF\xB8\x8F", v: allEmoji[856] }, { k: ":u6708:", v: allEmoji[856] }, { k: "\xE2\x9C\xB4\xEF\xB8\x8F", v: allEmoji[857] }, { k: ":eight_pointed_black_star:", v: allEmoji[857] }, { k: "\xF0\x9F\x86\x9A", v: allEmoji[858] }, { k: ":vs:", v: allEmoji[858] }, { k: "\xF0\x9F\x89\x91", v: allEmoji[859] }, { k: ":accept:", v: allEmoji[859] }, { k: "\xF0\x9F\x92\xAE", v: allEmoji[860] }, { k: ":white_flower:", v: allEmoji[860] }, { k: "\xF0\x9F\x89\x90", v: allEmoji[861] }, { k: ":ideograph_advantage:", v: allEmoji[861] }, { k: "\xE3\x8A\x99\xEF\xB8\x8F", v: allEmoji[862] }, { k: ":secret:", v: allEmoji[862] }, { k: "\xE3\x8A\x97\xEF\xB8\x8F", v: allEmoji[863] }, { k: ":congratulations:", v: allEmoji[863] }, { k: "\xF0\x9F\x88\xB4", v: allEmoji[864] }, { k: ":u5408:", v: allEmoji[864] }, { k: "\xF0\x9F\x88\xB5", v: allEmoji[865] }, { k: ":u6e80:", v: allEmoji[865] }, { k: "\xF0\x9F\x88\xB2", v: allEmoji[866] }, { k: ":u7981:", v: allEmoji[866] }, { k: "\xF0\x9F\x85\xB0\xEF\xB8\x8F", v: allEmoji[867] }, { k: ":a:", v: allEmoji[867] }, { k: "\xF0\x9F\x85\xB1\xEF\xB8\x8F", v: allEmoji[868] }, { k: ":b:", v: allEmoji[868] }, { k: "\xF0\x9F\x86\x8E", v: allEmoji[869] }, { k: ":ab:", v: allEmoji[869] }, { k: "\xF0\x9F\x86\x91", v: allEmoji[870] }, { k: ":cl:", v: allEmoji[870] }, { k: "\xF0\x9F\x85\xBE\xEF\xB8\x8F", v: allEmoji[871] }, { k: ":o2:", v: allEmoji[871] }, { k: "\xF0\x9F\x86\x98", v: allEmoji[872] }, { k: ":sos:", v: allEmoji[872] }, { k: "\xE2\x9B\x94\xEF\xB8\x8F", v: allEmoji[873] }, { k: ":no_entry:", v: allEmoji[873] }, { k: "\xF0\x9F\x93\x9B", v: allEmoji[874] }, { k: ":name_badge:", v: allEmoji[874] }, { k: "\xF0\x9F\x9A\xAB", v: allEmoji[875] }, { k: ":no_entry_sign:", v: allEmoji[875] }, { k: "\xE2\x9D\x8C", v: allEmoji[876] }, { k: ":x:", v: allEmoji[876] }, { k: "\xE2\xAD\x95\xEF\xB8\x8F", v: allEmoji[877] }, { k: ":o:", v: allEmoji[877] }, { k: "\xF0\x9F\x92\xA2", v: allEmoji[878] }, { k: ":anger:", v: allEmoji[878] }, { k: "\xE2\x99\xA8\xEF\xB8\x8F", v: allEmoji[879] }, { k: ":hotsprings:", v: allEmoji[879] }, { k: "\xF0\x9F\x9A\xB7", v: allEmoji[880] }, { k: ":no_pedestrians:", v: allEmoji[880] }, { k: "\xF0\x9F\x9A\xAF", v: allEmoji[881] }, { k: ":do_not_litter:", v: allEmoji[881] }, { k: "\xF0\x9F\x9A\xB3", v: allEmoji[882] }, { k: ":no_bicycles:", v: allEmoji[882] }, { k: "\xF0\x9F\x9A\xB1", v: allEmoji[883] }, { k: ":non-potable_water:", v: allEmoji[883] }, { k: "\xF0\x9F\x94\x9E", v: allEmoji[884] }, { k: ":underage:", v: allEmoji[884] }, { k: "\xF0\x9F\x93\xB5", v: allEmoji[885] }, { k: ":no_mobile_phones:", v: allEmoji[885] }, { k: "\xE2\x9D\x97\xEF\xB8\x8F", v: allEmoji[886] }, { k: ":exclamation:", v: allEmoji[886] }, { k: ":heavy_exclamation_mark:", v: allEmoji[886] }, { k: "\xE2\x9D\x95", v: allEmoji[887] }, { k: ":grey_exclamation:", v: allEmoji[887] }, { k: "\xE2\x9D\x93", v: allEmoji[888] }, { k: ":question:", v: allEmoji[888] }, { k: "\xE2\x9D\x94", v: allEmoji[889] }, { k: ":grey_question:", v: allEmoji[889] }, { k: "\xE2\x80\xBC\xEF\xB8\x8F", v: allEmoji[890] }, { k: ":bangbang:", v: allEmoji[890] }, { k: "\xE2\x81\x89\xEF\xB8\x8F", v: allEmoji[891] }, { k: ":interrobang:", v: allEmoji[891] }, { k: "\xF0\x9F\x92\xAF", v: allEmoji[892] }, { k: ":100:", v: allEmoji[892] }, { k: "\xF0\x9F\x94\x85", v: allEmoji[893] }, { k: ":low_brightness:", v: allEmoji[893] }, { k: "\xF0\x9F\x94\x86", v: allEmoji[894] }, { k: ":high_brightness:", v: allEmoji[894] }, { k: "\xF0\x9F\x94\xB1", v: allEmoji[895] }, { k: ":trident:", v: allEmoji[895] }, { k: "\xE2\x9A\x9C", v: allEmoji[896] }, { k: ":fleur_de_lis:", v: allEmoji[896] }, { k: "\xE3\x80\xBD\xEF\xB8\x8F", v: allEmoji[897] }, { k: ":part_alternation_mark:", v: allEmoji[897] }, { k: "\xE2\x9A\xA0\xEF\xB8\x8F", v: allEmoji[898] }, { k: ":warning:", v: allEmoji[898] }, { k: "\xF0\x9F\x9A\xB8", v: allEmoji[899] }, { k: ":children_crossing:", v: allEmoji[899] }, { k: "\xF0\x9F\x94\xB0", v: allEmoji[900] }, { k: ":beginner:", v: allEmoji[900] }, { k: "\xE2\x99\xBB\xEF\xB8\x8F", v: allEmoji[901] }, { k: ":recycle:", v: allEmoji[901] }, { k: "\xF0\x9F\x88\xAF\xEF\xB8\x8F", v: allEmoji[902] }, { k: ":u6307:", v: allEmoji[902] }, { k: "\xF0\x9F\x92\xB9", v: allEmoji[903] }, { k: ":chart:", v: allEmoji[903] }, { k: "\xE2\x9D\x87\xEF\xB8\x8F", v: allEmoji[904] }, { k: ":sparkle:", v: allEmoji[904] }, { k: "\xE2\x9C\xB3\xEF\xB8\x8F", v: allEmoji[905] }, { k: ":eight_spoked_asterisk:", v: allEmoji[905] }, { k: "\xE2\x9D\x8E", v: allEmoji[906] }, { k: ":negative_squared_cross_mark:", v: allEmoji[906] }, { k: "\xE2\x9C\x85", v: allEmoji[907] }, { k: ":white_check_mark:", v: allEmoji[907] }, { k: "\xF0\x9F\x8C\x90", v: allEmoji[908] }, { k: ":globe_with_meridians:", v: allEmoji[908] }, { k: "\xE2\x93\x82\xEF\xB8\x8F", v: allEmoji[909] }, { k: ":m:", v: allEmoji[909] }, { k: "\xF0\x9F\x92\xA0", v: allEmoji[910] }, { k: ":diamond_shape_with_a_dot_inside:", v: allEmoji[910] }, { k: "\xF0\x9F\x8C\x80", v: allEmoji[911] }, { k: ":cyclone:", v: allEmoji[911] }, { k: "\xE2\x9E\xBF", v: allEmoji[912] }, { k: ":loop:", v: allEmoji[912] }, { k: "\xF0\x9F\x8F\xA7", v: allEmoji[913] }, { k: ":atm:", v: allEmoji[913] }, { k: "\xF0\x9F\x88\x82\xEF\xB8\x8F", v: allEmoji[914] }, { k: ":sa:", v: allEmoji[914] }, { k: "\xF0\x9F\x9B\x82", v: allEmoji[915] }, { k: ":passport_control:", v: allEmoji[915] }, { k: "\xF0\x9F\x9B\x83", v: allEmoji[916] }, { k: ":customs:", v: allEmoji[916] }, { k: "\xF0\x9F\x9B\x84", v: allEmoji[917] }, { k: ":baggage_claim:", v: allEmoji[917] }, { k: "\xF0\x9F\x9B\x85", v: allEmoji[918] }, { k: ":left_luggage:", v: allEmoji[918] }, { k: "\xE2\x99\xBF\xEF\xB8\x8F", v: allEmoji[919] }, { k: ":wheelchair:", v: allEmoji[919] }, { k: "\xF0\x9F\x9A\xAD", v: allEmoji[920] }, { k: ":no_smoking:", v: allEmoji[920] }, { k: "\xF0\x9F\x9A\xBE", v: allEmoji[921] }, { k: ":wc:", v: allEmoji[921] }, { k: "\xF0\x9F\x85\xBF\xEF\xB8\x8F", v: allEmoji[922] }, { k: ":parking:", v: allEmoji[922] }, { k: "\xF0\x9F\x9A\xB0", v: allEmoji[923] }, { k: ":potable_water:", v: allEmoji[923] }, { k: "\xF0\x9F\x9A\xB9", v: allEmoji[924] }, { k: ":mens:", v: allEmoji[924] }, { k: "\xF0\x9F\x9A\xBA", v: allEmoji[925] }, { k: ":womens:", v: allEmoji[925] }, { k: "\xF0\x9F\x9A\xBC", v: allEmoji[926] }, { k: ":baby_symbol:", v: allEmoji[926] }, { k: "\xF0\x9F\x9A\xBB", v: allEmoji[927] }, { k: ":restroom:", v: allEmoji[927] }, { k: "\xF0\x9F\x9A\xAE", v: allEmoji[928] }, { k: ":put_litter_in_its_place:", v: allEmoji[928] }, { k: "\xF0\x9F\x8E\xA6", v: allEmoji[929] }, { k: ":cinema:", v: allEmoji[929] }, { k: "\xF0\x9F\x93\xB6", v: allEmoji[930] }, { k: ":signal_strength:", v: allEmoji[930] }, { k: "\xF0\x9F\x88\x81", v: allEmoji[931] }, { k: ":koko:", v: allEmoji[931] }, { k: "\xF0\x9F\x94\xA4", v: allEmoji[932] }, { k: ":abc:", v: allEmoji[932] }, { k: "\xF0\x9F\x94\xA1", v: allEmoji[933] }, { k: ":abcd:", v: allEmoji[933] }, { k: "\xF0\x9F\x94\xA0", v: allEmoji[934] }, { k: ":capital_abcd:", v: allEmoji[934] }, { k: "\xF0\x9F\x94\xA3", v: allEmoji[935] }, { k: ":symbols:", v: allEmoji[935] }, { k: "\xE2\x84\xB9\xEF\xB8\x8F", v: allEmoji[936] }, { k: ":information_source:", v: allEmoji[936] }, { k: "\xF0\x9F\x86\x96", v: allEmoji[937] }, { k: ":ng:", v: allEmoji[937] }, { k: "\xF0\x9F\x86\x97", v: allEmoji[938] }, { k: ":ok:", v: allEmoji[938] }, { k: "\xF0\x9F\x86\x99", v: allEmoji[939] }, { k: ":up:", v: allEmoji[939] }, { k: "\xF0\x9F\x86\x92", v: allEmoji[940] }, { k: ":cool:", v: allEmoji[940] }, { k: "\xF0\x9F\x86\x95", v: allEmoji[941] }, { k: ":new:", v: allEmoji[941] }, { k: "\xF0\x9F\x86\x93", v: allEmoji[942] }, { k: ":free:", v: allEmoji[942] }, { k: "0\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[943] }, { k: ":zero:", v: allEmoji[943] }, { k: "1\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[944] }, { k: ":one:", v: allEmoji[944] }, { k: "2\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[945] }, { k: ":two:", v: allEmoji[945] }, { k: "3\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[946] }, { k: ":three:", v: allEmoji[946] }, { k: "4\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[947] }, { k: ":four:", v: allEmoji[947] }, { k: "5\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[948] }, { k: ":five:", v: allEmoji[948] }, { k: "6\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[949] }, { k: ":six:", v: allEmoji[949] }, { k: "7\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[950] }, { k: ":seven:", v: allEmoji[950] }, { k: "8\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[951] }, { k: ":eight:", v: allEmoji[951] }, { k: "9\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[952] }, { k: ":nine:", v: allEmoji[952] }, { k: "\xF0\x9F\x94\x9F", v: allEmoji[953] }, { k: ":keycap_ten:", v: allEmoji[953] }, { k: "\xF0\x9F\x94\xA2", v: allEmoji[954] }, { k: ":1234:", v: allEmoji[954] }, { k: "#\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[955] }, { k: ":hash:", v: allEmoji[955] }, { k: "*\xEF\xB8\x8F\xE2\x83\xA3", v: allEmoji[956] }, { k: ":asterisk:", v: allEmoji[956] }, { k: "\xE2\x96\xB6\xEF\xB8\x8F", v: allEmoji[957] }, { k: ":arrow_forward:", v: allEmoji[957] }, { k: "\xE2\x8F\xB8", v: allEmoji[958] }, { k: ":pause_button:", v: allEmoji[958] }, { k: "\xE2\x8F\xAF", v: allEmoji[959] }, { k: ":play_or_pause_button:", v: allEmoji[959] }, { k: "\xE2\x8F\xB9", v: allEmoji[960] }, { k: ":stop_button:", v: allEmoji[960] }, { k: "\xE2\x8F\xBA", v: allEmoji[961] }, { k: ":record_button:", v: allEmoji[961] }, { k: "\xE2\x8F\xAD", v: allEmoji[962] }, { k: ":next_track_button:", v: allEmoji[962] }, { k: "\xE2\x8F\xAE", v: allEmoji[963] }, { k: ":previous_track_button:", v: allEmoji[963] }, { k: "\xE2\x8F\xA9", v: allEmoji[964] }, { k: ":fast_forward:", v: allEmoji[964] }, { k: "\xE2\x8F\xAA", v: allEmoji[965] }, { k: ":rewind:", v: allEmoji[965] }, { k: "\xE2\x8F\xAB", v: allEmoji[966] }, { k: ":arrow_double_up:", v: allEmoji[966] }, { k: "\xE2\x8F\xAC", v: allEmoji[967] }, { k: ":arrow_double_down:", v: allEmoji[967] }, { k: "\xE2\x97\x80\xEF\xB8\x8F", v: allEmoji[968] }, { k: ":arrow_backward:", v: allEmoji[968] }, { k: "\xF0\x9F\x94\xBC", v: allEmoji[969] }, { k: ":arrow_up_small:", v: allEmoji[969] }, { k: "\xF0\x9F\x94\xBD", v: allEmoji[970] }, { k: ":arrow_down_small:", v: allEmoji[970] }, { k: "\xE2\x9E\xA1\xEF\xB8\x8F", v: allEmoji[971] }, { k: ":arrow_right:", v: allEmoji[971] }, { k: "\xE2\xAC\x85\xEF\xB8\x8F", v: allEmoji[972] }, { k: ":arrow_left:", v: allEmoji[972] }, { k: "\xE2\xAC\x86\xEF\xB8\x8F", v: allEmoji[973] }, { k: ":arrow_up:", v: allEmoji[973] }, { k: "\xE2\xAC\x87\xEF\xB8\x8F", v: allEmoji[974] }, { k: ":arrow_down:", v: allEmoji[974] }, { k: "\xE2\x86\x97\xEF\xB8\x8F", v: allEmoji[975] }, { k: ":arrow_upper_right:", v: allEmoji[975] }, { k: "\xE2\x86\x98\xEF\xB8\x8F", v: allEmoji[976] }, { k: ":arrow_lower_right:", v: allEmoji[976] }, { k: "\xE2\x86\x99\xEF\xB8\x8F", v: allEmoji[977] }, { k: ":arrow_lower_left:", v: allEmoji[977] }, { k: "\xE2\x86\x96\xEF\xB8\x8F", v: allEmoji[978] }, { k: ":arrow_upper_left:", v: allEmoji[978] }, { k: "\xE2\x86\x95\xEF\xB8\x8F", v: allEmoji[979] }, { k: ":arrow_up_down:", v: allEmoji[979] }, { k: "\xE2\x86\x94\xEF\xB8\x8F", v: allEmoji[980] }, { k: ":left_right_arrow:", v: allEmoji[980] }, { k: "\xE2\x86\xAA\xEF\xB8\x8F", v: allEmoji[981] }, { k: ":arrow_right_hook:", v: allEmoji[981] }, { k: "\xE2\x86\xA9\xEF\xB8\x8F", v: allEmoji[982] }, { k: ":leftwards_arrow_with_hook:", v: allEmoji[982] }, { k: "\xE2\xA4\xB4\xEF\xB8\x8F", v: allEmoji[983] }, { k: ":arrow_heading_up:", v: allEmoji[983] }, { k: "\xE2\xA4\xB5\xEF\xB8\x8F", v: allEmoji[984] }, { k: ":arrow_heading_down:", v: allEmoji[984] }, { k: "\xF0\x9F\x94\x80", v: allEmoji[985] }, { k: ":twisted_rightwards_arrows:", v: allEmoji[985] }, { k: "\xF0\x9F\x94\x81", v: allEmoji[986] }, { k: ":repeat:", v: allEmoji[986] }, { k: "\xF0\x9F\x94\x82", v: allEmoji[987] }, { k: ":repeat_one:", v: allEmoji[987] }, { k: "\xF0\x9F\x94\x84", v: allEmoji[988] }, { k: ":arrows_counterclockwise:", v: allEmoji[988] }, { k: "\xF0\x9F\x94\x83", v: allEmoji[989] }, { k: ":arrows_clockwise:", v: allEmoji[989] }, { k: "\xF0\x9F\x8E\xB5", v: allEmoji[990] }, { k: ":musical_note:", v: allEmoji[990] }, { k: "\xF0\x9F\x8E\xB6", v: allEmoji[991] }, { k: ":notes:", v: allEmoji[991] }, { k: "\xE3\x80\xB0\xEF\xB8\x8F", v: allEmoji[992] }, { k: ":wavy_dash:", v: allEmoji[992] }, { k: "\xE2\x9E\xB0", v: allEmoji[993] }, { k: ":curly_loop:", v: allEmoji[993] }, { k: "\xE2\x9C\x94\xEF\xB8\x8F", v: allEmoji[994] }, { k: ":heavy_check_mark:", v: allEmoji[994] }, { k: "\xE2\x9E\x95", v: allEmoji[995] }, { k: ":heavy_plus_sign:", v: allEmoji[995] }, { k: "\xE2\x9E\x96", v: allEmoji[996] }, { k: ":heavy_minus_sign:", v: allEmoji[996] }, { k: "\xE2\x9E\x97", v: allEmoji[997] }, { k: ":heavy_division_sign:", v: allEmoji[997] }, { k: "\xE2\x9C\x96\xEF\xB8\x8F", v: allEmoji[998] }, { k: ":heavy_multiplication_x:", v: allEmoji[998] }, { k: "\xF0\x9F\x92\xB2", v: allEmoji[999] }, { k: ":heavy_dollar_sign:", v: allEmoji[999] }, { k: "\xF0\x9F\x92\xB1", v: allEmoji[1000] }, { k: ":currency_exchange:", v: allEmoji[1000] }, { k: "\xE2\x84\xA2\xEF\xB8\x8F", v: allEmoji[1001] }, { k: ":tm:", v: allEmoji[1001] }, { k: "\xC2\xA9\xEF\xB8\x8F", v: allEmoji[1002] }, { k: ":copyright:", v: allEmoji[1002] }, { k: "\xC2\xAE\xEF\xB8\x8F", v: allEmoji[1003] }, { k: ":registered:", v: allEmoji[1003] }, { k: "\xF0\x9F\x94\x9A", v: allEmoji[1004] }, { k: ":end:", v: allEmoji[1004] }, { k: "\xF0\x9F\x94\x99", v: allEmoji[1005] }, { k: ":back:", v: allEmoji[1005] }, { k: "\xF0\x9F\x94\x9B", v: allEmoji[1006] }, { k: ":on:", v: allEmoji[1006] }, { k: "\xF0\x9F\x94\x9D", v: allEmoji[1007] }, { k: ":top:", v: allEmoji[1007] }, { k: "\xF0\x9F\x94\x9C", v: allEmoji[1008] }, { k: ":soon:", v: allEmoji[1008] }, { k: "\xE2\x98\x91\xEF\xB8\x8F", v: allEmoji[1009] }, { k: ":ballot_box_with_check:", v: allEmoji[1009] }, { k: "\xF0\x9F\x94\x98", v: allEmoji[1010] }, { k: ":radio_button:", v: allEmoji[1010] }, { k: "\xE2\x9A\xAA\xEF\xB8\x8F", v: allEmoji[1011] }, { k: ":white_circle:", v: allEmoji[1011] }, { k: "\xE2\x9A\xAB\xEF\xB8\x8F", v: allEmoji[1012] }, { k: ":black_circle:", v: allEmoji[1012] }, { k: "\xF0\x9F\x94\xB4", v: allEmoji[1013] }, { k: ":red_circle:", v: allEmoji[1013] }, { k: "\xF0\x9F\x94\xB5", v: allEmoji[1014] }, { k: ":large_blue_circle:", v: allEmoji[1014] }, { k: "\xF0\x9F\x94\xBA", v: allEmoji[1015] }, { k: ":small_red_triangle:", v: allEmoji[1015] }, { k: "\xF0\x9F\x94\xBB", v: allEmoji[1016] }, { k: ":small_red_triangle_down:", v: allEmoji[1016] }, { k: "\xF0\x9F\x94\xB8", v: allEmoji[1017] }, { k: ":small_orange_diamond:", v: allEmoji[1017] }, { k: "\xF0\x9F\x94\xB9", v: allEmoji[1018] }, { k: ":small_blue_diamond:", v: allEmoji[1018] }, { k: "\xF0\x9F\x94\xB6", v: allEmoji[1019] }, { k: ":large_orange_diamond:", v: allEmoji[1019] }, { k: "\xF0\x9F\x94\xB7", v: allEmoji[1020] }, { k: ":large_blue_diamond:", v: allEmoji[1020] }, { k: "\xF0\x9F\x94\xB3", v: allEmoji[1021] }, { k: ":white_square_button:", v: allEmoji[1021] }, { k: "\xF0\x9F\x94\xB2", v: allEmoji[1022] }, { k: ":black_square_button:", v: allEmoji[1022] }, { k: "\xE2\x96\xAA\xEF\xB8\x8F", v: allEmoji[1023] }, { k: ":black_small_square:", v: allEmoji[1023] }, { k: "\xE2\x96\xAB\xEF\xB8\x8F", v: allEmoji[1024] }, { k: ":white_small_square:", v: allEmoji[1024] }, { k: "\xE2\x97\xBE\xEF\xB8\x8F", v: allEmoji[1025] }, { k: ":black_medium_small_square:", v: allEmoji[1025] }, { k: "\xE2\x97\xBD\xEF\xB8\x8F", v: allEmoji[1026] }, { k: ":white_medium_small_square:", v: allEmoji[1026] }, { k: "\xE2\x97\xBC\xEF\xB8\x8F", v: allEmoji[1027] }, { k: ":black_medium_square:", v: allEmoji[1027] }, { k: "\xE2\x97\xBB\xEF\xB8\x8F", v: allEmoji[1028] }, { k: ":white_medium_square:", v: allEmoji[1028] }, { k: "\xE2\xAC\x9B\xEF\xB8\x8F", v: allEmoji[1029] }, { k: ":black_large_square:", v: allEmoji[1029] }, { k: "\xE2\xAC\x9C\xEF\xB8\x8F", v: allEmoji[1030] }, { k: ":white_large_square:", v: allEmoji[1030] }, { k: "\xF0\x9F\x94\x87", v: allEmoji[1031] }, { k: ":mute:", v: allEmoji[1031] }, { k: "\xF0\x9F\x94\x88", v: allEmoji[1032] }, { k: ":speaker:", v: allEmoji[1032] }, { k: "\xF0\x9F\x94\x89", v: allEmoji[1033] }, { k: ":sound:", v: allEmoji[1033] }, { k: "\xF0\x9F\x94\x8A", v: allEmoji[1034] }, { k: ":loud_sound:", v: allEmoji[1034] }, { k: "\xF0\x9F\x94\x95", v: allEmoji[1035] }, { k: ":no_bell:", v: allEmoji[1035] }, { k: "\xF0\x9F\x94\x94", v: allEmoji[1036] }, { k: ":bell:", v: allEmoji[1036] }, { k: "\xF0\x9F\x93\xA3", v: allEmoji[1037] }, { k: ":mega:", v: allEmoji[1037] }, { k: "\xF0\x9F\x93\xA2", v: allEmoji[1038] }, { k: ":loudspeaker:", v: allEmoji[1038] }, { k: "\xF0\x9F\x91\x81\xE2\x80\x8D\xF0\x9F\x97\xA8", v: allEmoji[1039] }, { k: ":eye_speech_bubble:", v: allEmoji[1039] }, { k: "\xF0\x9F\x92\xAC", v: allEmoji[1040] }, { k: ":speech_balloon:", v: allEmoji[1040] }, { k: "\xF0\x9F\x92\xAD", v: allEmoji[1041] }, { k: ":thought_balloon:", v: allEmoji[1041] }, { k: "\xF0\x9F\x97\xAF", v: allEmoji[1042] }, { k: ":right_anger_bubble:", v: allEmoji[1042] }, { k: "\xF0\x9F\x83\x8F", v: allEmoji[1043] }, { k: ":black_joker:", v: allEmoji[1043] }, { k: "\xF0\x9F\x80\x84\xEF\xB8\x8F", v: allEmoji[1044] }, { k: ":mahjong:", v: allEmoji[1044] }, { k: "\xF0\x9F\x8E\xB4", v: allEmoji[1045] }, { k: ":flower_playing_cards:", v: allEmoji[1045] }, { k: "\xE2\x99\xA0\xEF\xB8\x8F", v: allEmoji[1046] }, { k: ":spades:", v: allEmoji[1046] }, { k: "\xE2\x99\xA3\xEF\xB8\x8F", v: allEmoji[1047] }, { k: ":clubs:", v: allEmoji[1047] }, { k: "\xE2\x99\xA5\xEF\xB8\x8F", v: allEmoji[1048] }, { k: ":hearts:", v: allEmoji[1048] }, { k: "\xE2\x99\xA6\xEF\xB8\x8F", v: allEmoji[1049] }, { k: ":diamonds:", v: allEmoji[1049] }, { k: "\xF0\x9F\x95\x90", v: allEmoji[1050] }, { k: ":clock1:", v: allEmoji[1050] }, { k: "\xF0\x9F\x95\x91", v: allEmoji[1051] }, { k: ":clock2:", v: allEmoji[1051] }, { k: "\xF0\x9F\x95\x92", v: allEmoji[1052] }, { k: ":clock3:", v: allEmoji[1052] }, { k: "\xF0\x9F\x95\x93", v: allEmoji[1053] }, { k: ":clock4:", v: allEmoji[1053] }, { k: "\xF0\x9F\x95\x94", v: allEmoji[1054] }, { k: ":clock5:", v: allEmoji[1054] }, { k: "\xF0\x9F\x95\x95", v: allEmoji[1055] }, { k: ":clock6:", v: allEmoji[1055] }, { k: "\xF0\x9F\x95\x96", v: allEmoji[1056] }, { k: ":clock7:", v: allEmoji[1056] }, { k: "\xF0\x9F\x95\x97", v: allEmoji[1057] }, { k: ":clock8:", v: allEmoji[1057] }, { k: "\xF0\x9F\x95\x98", v: allEmoji[1058] }, { k: ":clock9:", v: allEmoji[1058] }, { k: "\xF0\x9F\x95\x99", v: allEmoji[1059] }, { k: ":clock10:", v: allEmoji[1059] }, { k: "\xF0\x9F\x95\x9A", v: allEmoji[1060] }, { k: ":clock11:", v: allEmoji[1060] }, { k: "\xF0\x9F\x95\x9B", v: allEmoji[1061] }, { k: ":clock12:", v: allEmoji[1061] }, { k: "\xF0\x9F\x95\x9C", v: allEmoji[1062] }, { k: ":clock130:", v: allEmoji[1062] }, { k: "\xF0\x9F\x95\x9D", v: allEmoji[1063] }, { k: ":clock230:", v: allEmoji[1063] }, { k: "\xF0\x9F\x95\x9E", v: allEmoji[1064] }, { k: ":clock330:", v: allEmoji[1064] }, { k: "\xF0\x9F\x95\x9F", v: allEmoji[1065] }, { k: ":clock430:", v: allEmoji[1065] }, { k: "\xF0\x9F\x95\xA0", v: allEmoji[1066] }, { k: ":clock530:", v: allEmoji[1066] }, { k: "\xF0\x9F\x95\xA1", v: allEmoji[1067] }, { k: ":clock630:", v: allEmoji[1067] }, { k: "\xF0\x9F\x95\xA2", v: allEmoji[1068] }, { k: ":clock730:", v: allEmoji[1068] }, { k: "\xF0\x9F\x95\xA3", v: allEmoji[1069] }, { k: ":clock830:", v: allEmoji[1069] }, { k: "\xF0\x9F\x95\xA4", v: allEmoji[1070] }, { k: ":clock930:", v: allEmoji[1070] }, { k: "\xF0\x9F\x95\xA5", v: allEmoji[1071] }, { k: ":clock1030:", v: allEmoji[1071] }, { k: "\xF0\x9F\x95\xA6", v: allEmoji[1072] }, { k: ":clock1130:", v: allEmoji[1072] }, { k: "\xF0\x9F\x95\xA7", v: allEmoji[1073] }, { k: ":clock1230:", v: allEmoji[1073] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xAB", v: allEmoji[1074] }, { k: ":afghanistan:", v: allEmoji[1074] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xBD", v: allEmoji[1075] }, { k: ":aland_islands:", v: allEmoji[1075] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB1", v: allEmoji[1076] }, { k: ":albania:", v: allEmoji[1076] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xBF", v: allEmoji[1077] }, { k: ":algeria:", v: allEmoji[1077] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB8", v: allEmoji[1078] }, { k: ":american_samoa:", v: allEmoji[1078] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xA9", v: allEmoji[1079] }, { k: ":andorra:", v: allEmoji[1079] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB4", v: allEmoji[1080] }, { k: ":angola:", v: allEmoji[1080] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xAE", v: allEmoji[1081] }, { k: ":anguilla:", v: allEmoji[1081] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB6", v: allEmoji[1082] }, { k: ":antarctica:", v: allEmoji[1082] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xAC", v: allEmoji[1083] }, { k: ":antigua_barbuda:", v: allEmoji[1083] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB7", v: allEmoji[1084] }, { k: ":argentina:", v: allEmoji[1084] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB2", v: allEmoji[1085] }, { k: ":armenia:", v: allEmoji[1085] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xBC", v: allEmoji[1086] }, { k: ":aruba:", v: allEmoji[1086] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xBA", v: allEmoji[1087] }, { k: ":australia:", v: allEmoji[1087] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xB9", v: allEmoji[1088] }, { k: ":austria:", v: allEmoji[1088] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xBF", v: allEmoji[1089] }, { k: ":azerbaijan:", v: allEmoji[1089] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB8", v: allEmoji[1090] }, { k: ":bahamas:", v: allEmoji[1090] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAD", v: allEmoji[1091] }, { k: ":bahrain:", v: allEmoji[1091] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xA9", v: allEmoji[1092] }, { k: ":bangladesh:", v: allEmoji[1092] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xA7", v: allEmoji[1093] }, { k: ":barbados:", v: allEmoji[1093] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xBE", v: allEmoji[1094] }, { k: ":belarus:", v: allEmoji[1094] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAA", v: allEmoji[1095] }, { k: ":belgium:", v: allEmoji[1095] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xBF", v: allEmoji[1096] }, { k: ":belize:", v: allEmoji[1096] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAF", v: allEmoji[1097] }, { k: ":benin:", v: allEmoji[1097] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB2", v: allEmoji[1098] }, { k: ":bermuda:", v: allEmoji[1098] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB9", v: allEmoji[1099] }, { k: ":bhutan:", v: allEmoji[1099] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB4", v: allEmoji[1100] }, { k: ":bolivia:", v: allEmoji[1100] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB6", v: allEmoji[1101] }, { k: ":caribbean_netherlands:", v: allEmoji[1101] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xA6", v: allEmoji[1102] }, { k: ":bosnia_herzegovina:", v: allEmoji[1102] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xBC", v: allEmoji[1103] }, { k: ":botswana:", v: allEmoji[1103] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB7", v: allEmoji[1104] }, { k: ":brazil:", v: allEmoji[1104] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB4", v: allEmoji[1105] }, { k: ":british_indian_ocean_territory:", v: allEmoji[1105] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xAC", v: allEmoji[1106] }, { k: ":british_virgin_islands:", v: allEmoji[1106] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB3", v: allEmoji[1107] }, { k: ":brunei:", v: allEmoji[1107] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAC", v: allEmoji[1108] }, { k: ":bulgaria:", v: allEmoji[1108] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAB", v: allEmoji[1109] }, { k: ":burkina_faso:", v: allEmoji[1109] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xAE", v: allEmoji[1110] }, { k: ":burundi:", v: allEmoji[1110] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBB", v: allEmoji[1111] }, { k: ":cape_verde:", v: allEmoji[1111] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xAD", v: allEmoji[1112] }, { k: ":cambodia:", v: allEmoji[1112] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB2", v: allEmoji[1113] }, { k: ":cameroon:", v: allEmoji[1113] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xA6", v: allEmoji[1114] }, { k: ":canada:", v: allEmoji[1114] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xA8", v: allEmoji[1115] }, { k: ":canary_islands:", v: allEmoji[1115] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xBE", v: allEmoji[1116] }, { k: ":cayman_islands:", v: allEmoji[1116] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xAB", v: allEmoji[1117] }, { k: ":central_african_republic:", v: allEmoji[1117] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xA9", v: allEmoji[1118] }, { k: ":chad:", v: allEmoji[1118] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB1", v: allEmoji[1119] }, { k: ":chile:", v: allEmoji[1119] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB3", v: allEmoji[1120] }, { k: ":cn:", v: allEmoji[1120] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBD", v: allEmoji[1121] }, { k: ":christmas_island:", v: allEmoji[1121] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xA8", v: allEmoji[1122] }, { k: ":cocos_islands:", v: allEmoji[1122] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB4", v: allEmoji[1123] }, { k: ":colombia:", v: allEmoji[1123] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xB2", v: allEmoji[1124] }, { k: ":comoros:", v: allEmoji[1124] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xAC", v: allEmoji[1125] }, { k: ":congo_brazzaville:", v: allEmoji[1125] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xA9", v: allEmoji[1126] }, { k: ":congo_kinshasa:", v: allEmoji[1126] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB0", v: allEmoji[1127] }, { k: ":cook_islands:", v: allEmoji[1127] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xB7", v: allEmoji[1128] }, { k: ":costa_rica:", v: allEmoji[1128] }, { k: "\xF0\x9F\x87\xAD\xF0\x9F\x87\xB7", v: allEmoji[1129] }, { k: ":croatia:", v: allEmoji[1129] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBA", v: allEmoji[1130] }, { k: ":cuba:", v: allEmoji[1130] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBC", v: allEmoji[1131] }, { k: ":curacao:", v: allEmoji[1131] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBE", v: allEmoji[1132] }, { k: ":cyprus:", v: allEmoji[1132] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xBF", v: allEmoji[1133] }, { k: ":czech_republic:", v: allEmoji[1133] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xB0", v: allEmoji[1134] }, { k: ":denmark:", v: allEmoji[1134] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xAF", v: allEmoji[1135] }, { k: ":djibouti:", v: allEmoji[1135] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xB2", v: allEmoji[1136] }, { k: ":dominica:", v: allEmoji[1136] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xB4", v: allEmoji[1137] }, { k: ":dominican_republic:", v: allEmoji[1137] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xA8", v: allEmoji[1138] }, { k: ":ecuador:", v: allEmoji[1138] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xAC", v: allEmoji[1139] }, { k: ":egypt:", v: allEmoji[1139] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xBB", v: allEmoji[1140] }, { k: ":el_salvador:", v: allEmoji[1140] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB6", v: allEmoji[1141] }, { k: ":equatorial_guinea:", v: allEmoji[1141] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xB7", v: allEmoji[1142] }, { k: ":eritrea:", v: allEmoji[1142] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xAA", v: allEmoji[1143] }, { k: ":estonia:", v: allEmoji[1143] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xB9", v: allEmoji[1144] }, { k: ":ethiopia:", v: allEmoji[1144] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xBA", v: allEmoji[1145] }, { k: ":eu:", v: allEmoji[1145] }, { k: ":european_union:", v: allEmoji[1145] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xB0", v: allEmoji[1146] }, { k: ":falkland_islands:", v: allEmoji[1146] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xB4", v: allEmoji[1147] }, { k: ":faroe_islands:", v: allEmoji[1147] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xAF", v: allEmoji[1148] }, { k: ":fiji:", v: allEmoji[1148] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xAE", v: allEmoji[1149] }, { k: ":finland:", v: allEmoji[1149] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xB7", v: allEmoji[1150] }, { k: ":fr:", v: allEmoji[1150] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xAB", v: allEmoji[1151] }, { k: ":french_guiana:", v: allEmoji[1151] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xAB", v: allEmoji[1152] }, { k: ":french_polynesia:", v: allEmoji[1152] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xAB", v: allEmoji[1153] }, { k: ":french_southern_territories:", v: allEmoji[1153] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xA6", v: allEmoji[1154] }, { k: ":gabon:", v: allEmoji[1154] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB2", v: allEmoji[1155] }, { k: ":gambia:", v: allEmoji[1155] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xAA", v: allEmoji[1156] }, { k: ":georgia:", v: allEmoji[1156] }, { k: "\xF0\x9F\x87\xA9\xF0\x9F\x87\xAA", v: allEmoji[1157] }, { k: ":de:", v: allEmoji[1157] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xAD", v: allEmoji[1158] }, { k: ":ghana:", v: allEmoji[1158] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xAE", v: allEmoji[1159] }, { k: ":gibraltar:", v: allEmoji[1159] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB7", v: allEmoji[1160] }, { k: ":greece:", v: allEmoji[1160] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB1", v: allEmoji[1161] }, { k: ":greenland:", v: allEmoji[1161] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xA9", v: allEmoji[1162] }, { k: ":grenada:", v: allEmoji[1162] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB5", v: allEmoji[1163] }, { k: ":guadeloupe:", v: allEmoji[1163] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xBA", v: allEmoji[1164] }, { k: ":guam:", v: allEmoji[1164] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB9", v: allEmoji[1165] }, { k: ":guatemala:", v: allEmoji[1165] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xAC", v: allEmoji[1166] }, { k: ":guernsey:", v: allEmoji[1166] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB3", v: allEmoji[1167] }, { k: ":guinea:", v: allEmoji[1167] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xBC", v: allEmoji[1168] }, { k: ":guinea_bissau:", v: allEmoji[1168] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xBE", v: allEmoji[1169] }, { k: ":guyana:", v: allEmoji[1169] }, { k: "\xF0\x9F\x87\xAD\xF0\x9F\x87\xB9", v: allEmoji[1170] }, { k: ":haiti:", v: allEmoji[1170] }, { k: "\xF0\x9F\x87\xAD\xF0\x9F\x87\xB3", v: allEmoji[1171] }, { k: ":honduras:", v: allEmoji[1171] }, { k: "\xF0\x9F\x87\xAD\xF0\x9F\x87\xB0", v: allEmoji[1172] }, { k: ":hong_kong:", v: allEmoji[1172] }, { k: "\xF0\x9F\x87\xAD\xF0\x9F\x87\xBA", v: allEmoji[1173] }, { k: ":hungary:", v: allEmoji[1173] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB8", v: allEmoji[1174] }, { k: ":iceland:", v: allEmoji[1174] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB3", v: allEmoji[1175] }, { k: ":india:", v: allEmoji[1175] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xA9", v: allEmoji[1176] }, { k: ":indonesia:", v: allEmoji[1176] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB7", v: allEmoji[1177] }, { k: ":iran:", v: allEmoji[1177] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB6", v: allEmoji[1178] }, { k: ":iraq:", v: allEmoji[1178] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xAA", v: allEmoji[1179] }, { k: ":ireland:", v: allEmoji[1179] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB2", v: allEmoji[1180] }, { k: ":isle_of_man:", v: allEmoji[1180] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB1", v: allEmoji[1181] }, { k: ":israel:", v: allEmoji[1181] }, { k: "\xF0\x9F\x87\xAE\xF0\x9F\x87\xB9", v: allEmoji[1182] }, { k: ":it:", v: allEmoji[1182] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xAE", v: allEmoji[1183] }, { k: ":cote_divoire:", v: allEmoji[1183] }, { k: "\xF0\x9F\x87\xAF\xF0\x9F\x87\xB2", v: allEmoji[1184] }, { k: ":jamaica:", v: allEmoji[1184] }, { k: "\xF0\x9F\x87\xAF\xF0\x9F\x87\xB5", v: allEmoji[1185] }, { k: ":jp:", v: allEmoji[1185] }, { k: "\xF0\x9F\x87\xAF\xF0\x9F\x87\xAA", v: allEmoji[1186] }, { k: ":jersey:", v: allEmoji[1186] }, { k: "\xF0\x9F\x87\xAF\xF0\x9F\x87\xB4", v: allEmoji[1187] }, { k: ":jordan:", v: allEmoji[1187] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xBF", v: allEmoji[1188] }, { k: ":kazakhstan:", v: allEmoji[1188] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xAA", v: allEmoji[1189] }, { k: ":kenya:", v: allEmoji[1189] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xAE", v: allEmoji[1190] }, { k: ":kiribati:", v: allEmoji[1190] }, { k: "\xF0\x9F\x87\xBD\xF0\x9F\x87\xB0", v: allEmoji[1191] }, { k: ":kosovo:", v: allEmoji[1191] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xBC", v: allEmoji[1192] }, { k: ":kuwait:", v: allEmoji[1192] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xAC", v: allEmoji[1193] }, { k: ":kyrgyzstan:", v: allEmoji[1193] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xA6", v: allEmoji[1194] }, { k: ":laos:", v: allEmoji[1194] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xBB", v: allEmoji[1195] }, { k: ":latvia:", v: allEmoji[1195] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xA7", v: allEmoji[1196] }, { k: ":lebanon:", v: allEmoji[1196] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xB8", v: allEmoji[1197] }, { k: ":lesotho:", v: allEmoji[1197] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xB7", v: allEmoji[1198] }, { k: ":liberia:", v: allEmoji[1198] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xBE", v: allEmoji[1199] }, { k: ":libya:", v: allEmoji[1199] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xAE", v: allEmoji[1200] }, { k: ":liechtenstein:", v: allEmoji[1200] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xB9", v: allEmoji[1201] }, { k: ":lithuania:", v: allEmoji[1201] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xBA", v: allEmoji[1202] }, { k: ":luxembourg:", v: allEmoji[1202] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB4", v: allEmoji[1203] }, { k: ":macau:", v: allEmoji[1203] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB0", v: allEmoji[1204] }, { k: ":macedonia:", v: allEmoji[1204] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xAC", v: allEmoji[1205] }, { k: ":madagascar:", v: allEmoji[1205] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBC", v: allEmoji[1206] }, { k: ":malawi:", v: allEmoji[1206] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBE", v: allEmoji[1207] }, { k: ":malaysia:", v: allEmoji[1207] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBB", v: allEmoji[1208] }, { k: ":maldives:", v: allEmoji[1208] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB1", v: allEmoji[1209] }, { k: ":mali:", v: allEmoji[1209] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB9", v: allEmoji[1210] }, { k: ":malta:", v: allEmoji[1210] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xAD", v: allEmoji[1211] }, { k: ":marshall_islands:", v: allEmoji[1211] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB6", v: allEmoji[1212] }, { k: ":martinique:", v: allEmoji[1212] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB7", v: allEmoji[1213] }, { k: ":mauritania:", v: allEmoji[1213] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBA", v: allEmoji[1214] }, { k: ":mauritius:", v: allEmoji[1214] }, { k: "\xF0\x9F\x87\xBE\xF0\x9F\x87\xB9", v: allEmoji[1215] }, { k: ":mayotte:", v: allEmoji[1215] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBD", v: allEmoji[1216] }, { k: ":mexico:", v: allEmoji[1216] }, { k: "\xF0\x9F\x87\xAB\xF0\x9F\x87\xB2", v: allEmoji[1217] }, { k: ":micronesia:", v: allEmoji[1217] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xA9", v: allEmoji[1218] }, { k: ":moldova:", v: allEmoji[1218] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xA8", v: allEmoji[1219] }, { k: ":monaco:", v: allEmoji[1219] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB3", v: allEmoji[1220] }, { k: ":mongolia:", v: allEmoji[1220] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xAA", v: allEmoji[1221] }, { k: ":montenegro:", v: allEmoji[1221] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB8", v: allEmoji[1222] }, { k: ":montserrat:", v: allEmoji[1222] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xA6", v: allEmoji[1223] }, { k: ":morocco:", v: allEmoji[1223] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xBF", v: allEmoji[1224] }, { k: ":mozambique:", v: allEmoji[1224] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB2", v: allEmoji[1225] }, { k: ":myanmar:", v: allEmoji[1225] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xA6", v: allEmoji[1226] }, { k: ":namibia:", v: allEmoji[1226] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xB7", v: allEmoji[1227] }, { k: ":nauru:", v: allEmoji[1227] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xB5", v: allEmoji[1228] }, { k: ":nepal:", v: allEmoji[1228] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xB1", v: allEmoji[1229] }, { k: ":netherlands:", v: allEmoji[1229] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xA8", v: allEmoji[1230] }, { k: ":new_caledonia:", v: allEmoji[1230] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xBF", v: allEmoji[1231] }, { k: ":new_zealand:", v: allEmoji[1231] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xAE", v: allEmoji[1232] }, { k: ":nicaragua:", v: allEmoji[1232] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xAA", v: allEmoji[1233] }, { k: ":niger:", v: allEmoji[1233] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xAC", v: allEmoji[1234] }, { k: ":nigeria:", v: allEmoji[1234] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xBA", v: allEmoji[1235] }, { k: ":niue:", v: allEmoji[1235] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xAB", v: allEmoji[1236] }, { k: ":norfolk_island:", v: allEmoji[1236] }, { k: "\xF0\x9F\x87\xB2\xF0\x9F\x87\xB5", v: allEmoji[1237] }, { k: ":northern_mariana_islands:", v: allEmoji[1237] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xB5", v: allEmoji[1238] }, { k: ":north_korea:", v: allEmoji[1238] }, { k: "\xF0\x9F\x87\xB3\xF0\x9F\x87\xB4", v: allEmoji[1239] }, { k: ":norway:", v: allEmoji[1239] }, { k: "\xF0\x9F\x87\xB4\xF0\x9F\x87\xB2", v: allEmoji[1240] }, { k: ":oman:", v: allEmoji[1240] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB0", v: allEmoji[1241] }, { k: ":pakistan:", v: allEmoji[1241] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xBC", v: allEmoji[1242] }, { k: ":palau:", v: allEmoji[1242] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB8", v: allEmoji[1243] }, { k: ":palestinian_territories:", v: allEmoji[1243] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xA6", v: allEmoji[1244] }, { k: ":panama:", v: allEmoji[1244] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xAC", v: allEmoji[1245] }, { k: ":papua_new_guinea:", v: allEmoji[1245] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xBE", v: allEmoji[1246] }, { k: ":paraguay:", v: allEmoji[1246] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xAA", v: allEmoji[1247] }, { k: ":peru:", v: allEmoji[1247] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xAD", v: allEmoji[1248] }, { k: ":philippines:", v: allEmoji[1248] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB3", v: allEmoji[1249] }, { k: ":pitcairn_islands:", v: allEmoji[1249] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB1", v: allEmoji[1250] }, { k: ":poland:", v: allEmoji[1250] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB9", v: allEmoji[1251] }, { k: ":portugal:", v: allEmoji[1251] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB7", v: allEmoji[1252] }, { k: ":puerto_rico:", v: allEmoji[1252] }, { k: "\xF0\x9F\x87\xB6\xF0\x9F\x87\xA6", v: allEmoji[1253] }, { k: ":qatar:", v: allEmoji[1253] }, { k: "\xF0\x9F\x87\xB7\xF0\x9F\x87\xAA", v: allEmoji[1254] }, { k: ":reunion:", v: allEmoji[1254] }, { k: "\xF0\x9F\x87\xB7\xF0\x9F\x87\xB4", v: allEmoji[1255] }, { k: ":romania:", v: allEmoji[1255] }, { k: "\xF0\x9F\x87\xB7\xF0\x9F\x87\xBA", v: allEmoji[1256] }, { k: ":ru:", v: allEmoji[1256] }, { k: "\xF0\x9F\x87\xB7\xF0\x9F\x87\xBC", v: allEmoji[1257] }, { k: ":rwanda:", v: allEmoji[1257] }, { k: "\xF0\x9F\x87\xA7\xF0\x9F\x87\xB1", v: allEmoji[1258] }, { k: ":st_barthelemy:", v: allEmoji[1258] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xAD", v: allEmoji[1259] }, { k: ":st_helena:", v: allEmoji[1259] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xB3", v: allEmoji[1260] }, { k: ":st_kitts_nevis:", v: allEmoji[1260] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xA8", v: allEmoji[1261] }, { k: ":st_lucia:", v: allEmoji[1261] }, { k: "\xF0\x9F\x87\xB5\xF0\x9F\x87\xB2", v: allEmoji[1262] }, { k: ":st_pierre_miquelon:", v: allEmoji[1262] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xA8", v: allEmoji[1263] }, { k: ":st_vincent_grenadines:", v: allEmoji[1263] }, { k: "\xF0\x9F\x87\xBC\xF0\x9F\x87\xB8", v: allEmoji[1264] }, { k: ":samoa:", v: allEmoji[1264] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB2", v: allEmoji[1265] }, { k: ":san_marino:", v: allEmoji[1265] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB9", v: allEmoji[1266] }, { k: ":sao_tome_principe:", v: allEmoji[1266] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xA6", v: allEmoji[1267] }, { k: ":saudi_arabia:", v: allEmoji[1267] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB3", v: allEmoji[1268] }, { k: ":senegal:", v: allEmoji[1268] }, { k: "\xF0\x9F\x87\xB7\xF0\x9F\x87\xB8", v: allEmoji[1269] }, { k: ":serbia:", v: allEmoji[1269] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xA8", v: allEmoji[1270] }, { k: ":seychelles:", v: allEmoji[1270] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB1", v: allEmoji[1271] }, { k: ":sierra_leone:", v: allEmoji[1271] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xAC", v: allEmoji[1272] }, { k: ":singapore:", v: allEmoji[1272] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xBD", v: allEmoji[1273] }, { k: ":sint_maarten:", v: allEmoji[1273] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB0", v: allEmoji[1274] }, { k: ":slovakia:", v: allEmoji[1274] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xAE", v: allEmoji[1275] }, { k: ":slovenia:", v: allEmoji[1275] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xA7", v: allEmoji[1276] }, { k: ":solomon_islands:", v: allEmoji[1276] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB4", v: allEmoji[1277] }, { k: ":somalia:", v: allEmoji[1277] }, { k: "\xF0\x9F\x87\xBF\xF0\x9F\x87\xA6", v: allEmoji[1278] }, { k: ":south_africa:", v: allEmoji[1278] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xB8", v: allEmoji[1279] }, { k: ":south_georgia_south_sandwich_islands:", v: allEmoji[1279] }, { k: "\xF0\x9F\x87\xB0\xF0\x9F\x87\xB7", v: allEmoji[1280] }, { k: ":kr:", v: allEmoji[1280] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB8", v: allEmoji[1281] }, { k: ":south_sudan:", v: allEmoji[1281] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xB8", v: allEmoji[1282] }, { k: ":es:", v: allEmoji[1282] }, { k: "\xF0\x9F\x87\xB1\xF0\x9F\x87\xB0", v: allEmoji[1283] }, { k: ":sri_lanka:", v: allEmoji[1283] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xA9", v: allEmoji[1284] }, { k: ":sudan:", v: allEmoji[1284] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xB7", v: allEmoji[1285] }, { k: ":suriname:", v: allEmoji[1285] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xBF", v: allEmoji[1286] }, { k: ":swaziland:", v: allEmoji[1286] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xAA", v: allEmoji[1287] }, { k: ":sweden:", v: allEmoji[1287] }, { k: "\xF0\x9F\x87\xA8\xF0\x9F\x87\xAD", v: allEmoji[1288] }, { k: ":switzerland:", v: allEmoji[1288] }, { k: "\xF0\x9F\x87\xB8\xF0\x9F\x87\xBE", v: allEmoji[1289] }, { k: ":syria:", v: allEmoji[1289] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xBC", v: allEmoji[1290] }, { k: ":taiwan:", v: allEmoji[1290] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xAF", v: allEmoji[1291] }, { k: ":tajikistan:", v: allEmoji[1291] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xBF", v: allEmoji[1292] }, { k: ":tanzania:", v: allEmoji[1292] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xAD", v: allEmoji[1293] }, { k: ":thailand:", v: allEmoji[1293] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB1", v: allEmoji[1294] }, { k: ":timor_leste:", v: allEmoji[1294] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xAC", v: allEmoji[1295] }, { k: ":togo:", v: allEmoji[1295] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB0", v: allEmoji[1296] }, { k: ":tokelau:", v: allEmoji[1296] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB4", v: allEmoji[1297] }, { k: ":tonga:", v: allEmoji[1297] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB9", v: allEmoji[1298] }, { k: ":trinidad_tobago:", v: allEmoji[1298] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB3", v: allEmoji[1299] }, { k: ":tunisia:", v: allEmoji[1299] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB7", v: allEmoji[1300] }, { k: ":tr:", v: allEmoji[1300] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xB2", v: allEmoji[1301] }, { k: ":turkmenistan:", v: allEmoji[1301] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xA8", v: allEmoji[1302] }, { k: ":turks_caicos_islands:", v: allEmoji[1302] }, { k: "\xF0\x9F\x87\xB9\xF0\x9F\x87\xBB", v: allEmoji[1303] }, { k: ":tuvalu:", v: allEmoji[1303] }, { k: "\xF0\x9F\x87\xBA\xF0\x9F\x87\xAC", v: allEmoji[1304] }, { k: ":uganda:", v: allEmoji[1304] }, { k: "\xF0\x9F\x87\xBA\xF0\x9F\x87\xA6", v: allEmoji[1305] }, { k: ":ukraine:", v: allEmoji[1305] }, { k: "\xF0\x9F\x87\xA6\xF0\x9F\x87\xAA", v: allEmoji[1306] }, { k: ":united_arab_emirates:", v: allEmoji[1306] }, { k: "\xF0\x9F\x87\xAC\xF0\x9F\x87\xA7", v: allEmoji[1307] }, { k: ":gb:", v: allEmoji[1307] }, { k: ":uk:", v: allEmoji[1307] }, { k: "\xF0\x9F\x87\xBA\xF0\x9F\x87\xB8", v: allEmoji[1308] }, { k: ":us:", v: allEmoji[1308] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xAE", v: allEmoji[1309] }, { k: ":us_virgin_islands:", v: allEmoji[1309] }, { k: "\xF0\x9F\x87\xBA\xF0\x9F\x87\xBE", v: allEmoji[1310] }, { k: ":uruguay:", v: allEmoji[1310] }, { k: "\xF0\x9F\x87\xBA\xF0\x9F\x87\xBF", v: allEmoji[1311] }, { k: ":uzbekistan:", v: allEmoji[1311] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xBA", v: allEmoji[1312] }, { k: ":vanuatu:", v: allEmoji[1312] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xA6", v: allEmoji[1313] }, { k: ":vatican_city:", v: allEmoji[1313] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xAA", v: allEmoji[1314] }, { k: ":venezuela:", v: allEmoji[1314] }, { k: "\xF0\x9F\x87\xBB\xF0\x9F\x87\xB3", v: allEmoji[1315] }, { k: ":vietnam:", v: allEmoji[1315] }, { k: "\xF0\x9F\x87\xBC\xF0\x9F\x87\xAB", v: allEmoji[1316] }, { k: ":wallis_futuna:", v: allEmoji[1316] }, { k: "\xF0\x9F\x87\xAA\xF0\x9F\x87\xAD", v: allEmoji[1317] }, { k: ":western_sahara:", v: allEmoji[1317] }, { k: "\xF0\x9F\x87\xBE\xF0\x9F\x87\xAA", v: allEmoji[1318] }, { k: ":yemen:", v: allEmoji[1318] }, { k: "\xF0\x9F\x87\xBF\xF0\x9F\x87\xB2", v: allEmoji[1319] }, { k: ":zambia:", v: allEmoji[1319] }, { k: "\xF0\x9F\x87\xBF\xF0\x9F\x87\xBC", v: allEmoji[1320] }, { k: ":zimbabwe:", v: allEmoji[1320] }]);
		skipElement = $makeMap(atom.Atom.keyFor, [{ k: 250886, v: true }, { k: 397573, v: true }, { k: 155139, v: true }, { k: 84228, v: true }]);
		_r = (function $b() {
			var $ptr, _entry, _i, _keys, _r, _ref, name, root, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; name = $f.name; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			root = [root];
			root[0] = new state.ptr(arrayType.zero(), false);
			_ref = byName;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 1:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					/* continue; */ $s = 1; continue;
				}
				name = _entry.k;
				_r = strings.ToLower(name); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = root[0].addInPlace(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return root[0];
			return root[0];
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f.name = name; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
		})(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		startState = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/BenLubar/hellstew.gh-pages/emoji"] = (function() {
	var $pkg = {}, $init, bytes, emoji, js, html, atom, strings, ptrType, ptrType$1, sliceType, sliceType$1, sliceType$2, funcType, funcType$1, sliceType$3, arrayType, arrayType$1, ptrType$2, sliceType$4, sliceType$5, funcType$2, funcType$3, main;
	bytes = $packages["bytes"];
	emoji = $packages["github.com/BenLubar/hellstew/emoji"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	html = $packages["golang.org/x/net/html"];
	atom = $packages["golang.org/x/net/html/atom"];
	strings = $packages["strings"];
	ptrType = $ptrType(emoji.state);
	ptrType$1 = $ptrType(emoji.emoji);
	sliceType = $sliceType(ptrType$1);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType(sliceType);
	funcType = $funcType([sliceType$1], [], false);
	funcType$1 = $funcType([$String, funcType], [], false);
	sliceType$3 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(html.Node);
	sliceType$4 = $sliceType(html.Attribute);
	sliceType$5 = $sliceType(ptrType$2);
	funcType$2 = $funcType([$String, $String], [$String], false);
	funcType$3 = $funcType([], [], false);
	main = function() {
		var $ptr, addGitHubEmoji, conf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; addGitHubEmoji = $f.addGitHubEmoji; conf = $f.conf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		conf = [conf];
		conf[0] = new emoji.Config.ptr(ptrType.nil, sliceType.nil, false, sliceType$1.nil, sliceType$2.nil, sliceType$1.nil, sliceType$2.nil);
		addGitHubEmoji = (function(conf) { return function $b(name, aliases) {
			var $ptr, aliases, name, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; aliases = $f.aliases; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = conf[0].AddImage("https://assets-cdn.github.com/images/icons/emoji/" + name + ".png", ":" + name + ":", $appendSlice(new sliceType$1([name]), aliases), "GitHub", sliceType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.aliases = aliases; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
		}; })(conf);
		$r = addGitHubEmoji("basecamp", new sliceType$1([])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("basecampy", new sliceType$1([])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("bowtie", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("feelsgood", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("finnadie", new sliceType$1([])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("goberserk", new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("godmode", new sliceType$1([])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("hurtrealbad", new sliceType$1([])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("neckbeard", new sliceType$1([])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("octocat", new sliceType$1([])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("rage1", new sliceType$1([])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("rage2", new sliceType$1([])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("rage3", new sliceType$1([])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("rage4", new sliceType$1([])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("shipit", new sliceType$1(["squirrel"])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("suspect", new sliceType$1([])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addGitHubEmoji("trollface", new sliceType$1([])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$global.$($externalize("#emoji", $String)).autoComplete($externalize($makeMap($String.keyFor, [{ k: "cache", v: new $Bool(false) }, { k: "minChars", v: new $Int(1) }, { k: "source", v: new funcType$1((function(conf) { return function $b(term, response) {
			var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, buf, div, err, i, item, node, output, replacement, response, results, term, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; buf = $f.buf; div = $f.div; err = $f.err; i = $f.i; item = $f.item; node = $f.node; output = $f.output; replacement = $f.replacement; response = $f.response; results = $f.results; term = $f.term; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			buf = [buf];
			_r = conf[0].Search(term, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			results = _r;
			output = $makeSlice(sliceType$1, results.$length);
			buf[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_ref = results;
			_i = 0;
			/* while (true) { */ case 2:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
				i = _i;
				item = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), emoji.SearchResult);
				replacement = item.Emoji();
				if (replacement === "") {
					replacement = ":" + (x = item.Aliases(), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) + ":";
				}
				div = new html.Node.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, 3, 70403, "div", "", new sliceType$4([new html.Attribute.ptr("", "class", "autocomplete-suggestion"), new html.Attribute.ptr("", "data-val", replacement)]));
				_ref$1 = conf[0].Replace(new sliceType$5([new html.Node.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, 1, 0, replacement, "", sliceType$4.nil)]));
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					node = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					div.AppendChild(node);
					_i$1++;
				}
				div.AppendChild(new html.Node.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, 1, 0, " " + item.Description(), "", sliceType$4.nil));
				buf[0].Reset();
				_r$1 = html.Render(buf[0], div); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$panic(err);
				}
				((i < 0 || i >= output.$length) ? $throwRuntimeError("index out of range") : output.$array[output.$offset + i] = buf[0].String());
				_i++;
			/* } */ $s = 2; continue; case 3:
			$r = response(output); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buf = buf; $f.div = div; $f.err = err; $f.i = i; $f.item = item; $f.node = node; $f.output = output; $f.replacement = replacement; $f.response = response; $f.results = results; $f.term = term; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(conf)) }, { k: "renderItem", v: new funcType$2((function(conf) { return function(item, search) {
			var $ptr, item, search;
			return item;
		}; })(conf)) }]), js.M));
		$global.$($externalize("#html-button", $String)).on($externalize("click", $String), $externalize((function(conf) { return function $b() {
			var $ptr, _i, _r, _r$1, _ref, _tuple, buf, err, node, nodes, text, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; err = $f.err; node = $f.node; nodes = $f.nodes; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			buf = [buf];
			text = $global.$($externalize("#html", $String));
			_r = html.ParseFragment(strings.NewReader($internalize(text.val(), $String)), new html.Node.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, 3, 70403, "div", "", sliceType$4.nil)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nodes = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(err);
			}
			nodes = conf[0].Replace(nodes);
			buf[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_ref = nodes;
			_i = 0;
			/* while (true) { */ case 2:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
				node = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$1 = html.Render(buf[0], node); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$panic(err);
				}
				_i++;
			/* } */ $s = 2; continue; case 3:
			text.val($externalize(buf[0].String(), $String));
			$s = -1; return;
			return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.node = node; $f.nodes = nodes; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
		}; })(conf), funcType$3)).removeAttr($externalize("disabled", $String));
		$s = -1; return;
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f.addGitHubEmoji = addGitHubEmoji; $f.conf = conf; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = emoji.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = html.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atom.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg === $mainPkg) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($pkg === $mainPkg) { */ case 7:
			$r = main(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 8:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["github.com/BenLubar/hellstew.gh-pages/emoji"];
$packages["runtime"].$init();
$go($mainPkg.$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=emoji.js.map
